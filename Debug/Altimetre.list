
Altimetre.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b4c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008c90  08008c90  00009c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090fc  080090fc  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009100  08009100  0000a100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009104  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200001d4  080092d8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  080092d8  0000b478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f2ed  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002089  00000000  00000000  0001a4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  0001c578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bb9  00000000  00000000  0001d470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180b7  00000000  00000000  0001e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001081d  00000000  00000000  000360e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097fbb  00000000  00000000  000468fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e8  00000000  00000000  000de8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e3ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08008c74 	.word	0x08008c74

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08008c74 	.word	0x08008c74

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_frsub>:
 8000ab8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	e002      	b.n	8000ac4 <__addsf3>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_fsub>:
 8000ac0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ac4 <__addsf3>:
 8000ac4:	0042      	lsls	r2, r0, #1
 8000ac6:	bf1f      	itttt	ne
 8000ac8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000acc:	ea92 0f03 	teqne	r2, r3
 8000ad0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad8:	d06a      	beq.n	8000bb0 <__addsf3+0xec>
 8000ada:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ade:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ae2:	bfc1      	itttt	gt
 8000ae4:	18d2      	addgt	r2, r2, r3
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	4048      	eorgt	r0, r1
 8000aea:	4041      	eorgt	r1, r0
 8000aec:	bfb8      	it	lt
 8000aee:	425b      	neglt	r3, r3
 8000af0:	2b19      	cmp	r3, #25
 8000af2:	bf88      	it	hi
 8000af4:	4770      	bxhi	lr
 8000af6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000afa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b02:	bf18      	it	ne
 8000b04:	4240      	negne	r0, r0
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4249      	negne	r1, r1
 8000b16:	ea92 0f03 	teq	r2, r3
 8000b1a:	d03f      	beq.n	8000b9c <__addsf3+0xd8>
 8000b1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b20:	fa41 fc03 	asr.w	ip, r1, r3
 8000b24:	eb10 000c 	adds.w	r0, r0, ip
 8000b28:	f1c3 0320 	rsb	r3, r3, #32
 8000b2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b34:	d502      	bpl.n	8000b3c <__addsf3+0x78>
 8000b36:	4249      	negs	r1, r1
 8000b38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b40:	d313      	bcc.n	8000b6a <__addsf3+0xa6>
 8000b42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b46:	d306      	bcc.n	8000b56 <__addsf3+0x92>
 8000b48:	0840      	lsrs	r0, r0, #1
 8000b4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4e:	f102 0201 	add.w	r2, r2, #1
 8000b52:	2afe      	cmp	r2, #254	@ 0xfe
 8000b54:	d251      	bcs.n	8000bfa <__addsf3+0x136>
 8000b56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5e:	bf08      	it	eq
 8000b60:	f020 0001 	biceq.w	r0, r0, #1
 8000b64:	ea40 0003 	orr.w	r0, r0, r3
 8000b68:	4770      	bx	lr
 8000b6a:	0049      	lsls	r1, r1, #1
 8000b6c:	eb40 0000 	adc.w	r0, r0, r0
 8000b70:	3a01      	subs	r2, #1
 8000b72:	bf28      	it	cs
 8000b74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b78:	d2ed      	bcs.n	8000b56 <__addsf3+0x92>
 8000b7a:	fab0 fc80 	clz	ip, r0
 8000b7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b82:	ebb2 020c 	subs.w	r2, r2, ip
 8000b86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b8a:	bfaa      	itet	ge
 8000b8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b90:	4252      	neglt	r2, r2
 8000b92:	4318      	orrge	r0, r3
 8000b94:	bfbc      	itt	lt
 8000b96:	40d0      	lsrlt	r0, r2
 8000b98:	4318      	orrlt	r0, r3
 8000b9a:	4770      	bx	lr
 8000b9c:	f092 0f00 	teq	r2, #0
 8000ba0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ba4:	bf06      	itte	eq
 8000ba6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000baa:	3201      	addeq	r2, #1
 8000bac:	3b01      	subne	r3, #1
 8000bae:	e7b5      	b.n	8000b1c <__addsf3+0x58>
 8000bb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb8:	bf18      	it	ne
 8000bba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bbe:	d021      	beq.n	8000c04 <__addsf3+0x140>
 8000bc0:	ea92 0f03 	teq	r2, r3
 8000bc4:	d004      	beq.n	8000bd0 <__addsf3+0x10c>
 8000bc6:	f092 0f00 	teq	r2, #0
 8000bca:	bf08      	it	eq
 8000bcc:	4608      	moveq	r0, r1
 8000bce:	4770      	bx	lr
 8000bd0:	ea90 0f01 	teq	r0, r1
 8000bd4:	bf1c      	itt	ne
 8000bd6:	2000      	movne	r0, #0
 8000bd8:	4770      	bxne	lr
 8000bda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bde:	d104      	bne.n	8000bea <__addsf3+0x126>
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	bf28      	it	cs
 8000be4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000be8:	4770      	bx	lr
 8000bea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bee:	bf3c      	itt	cc
 8000bf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bxcc	lr
 8000bf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c02:	4770      	bx	lr
 8000c04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c08:	bf16      	itet	ne
 8000c0a:	4608      	movne	r0, r1
 8000c0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c10:	4601      	movne	r1, r0
 8000c12:	0242      	lsls	r2, r0, #9
 8000c14:	bf06      	itte	eq
 8000c16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c1a:	ea90 0f01 	teqeq	r0, r1
 8000c1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_ui2f>:
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	e004      	b.n	8000c34 <__aeabi_i2f+0x8>
 8000c2a:	bf00      	nop

08000c2c <__aeabi_i2f>:
 8000c2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c30:	bf48      	it	mi
 8000c32:	4240      	negmi	r0, r0
 8000c34:	ea5f 0c00 	movs.w	ip, r0
 8000c38:	bf08      	it	eq
 8000c3a:	4770      	bxeq	lr
 8000c3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c40:	4601      	mov	r1, r0
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	e01c      	b.n	8000c82 <__aeabi_l2f+0x2a>

08000c48 <__aeabi_ul2f>:
 8000c48:	ea50 0201 	orrs.w	r2, r0, r1
 8000c4c:	bf08      	it	eq
 8000c4e:	4770      	bxeq	lr
 8000c50:	f04f 0300 	mov.w	r3, #0
 8000c54:	e00a      	b.n	8000c6c <__aeabi_l2f+0x14>
 8000c56:	bf00      	nop

08000c58 <__aeabi_l2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__aeabi_l2f+0x14>
 8000c66:	4240      	negs	r0, r0
 8000c68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6c:	ea5f 0c01 	movs.w	ip, r1
 8000c70:	bf02      	ittt	eq
 8000c72:	4684      	moveq	ip, r0
 8000c74:	4601      	moveq	r1, r0
 8000c76:	2000      	moveq	r0, #0
 8000c78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c7c:	bf08      	it	eq
 8000c7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c86:	fabc f28c 	clz	r2, ip
 8000c8a:	3a08      	subs	r2, #8
 8000c8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c90:	db10      	blt.n	8000cb4 <__aeabi_l2f+0x5c>
 8000c92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c96:	4463      	add	r3, ip
 8000c98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ca0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ca4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca8:	eb43 0002 	adc.w	r0, r3, r2
 8000cac:	bf08      	it	eq
 8000cae:	f020 0001 	biceq.w	r0, r0, #1
 8000cb2:	4770      	bx	lr
 8000cb4:	f102 0220 	add.w	r2, r2, #32
 8000cb8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_fmul>:
 8000cd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000cd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cdc:	bf1e      	ittt	ne
 8000cde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ce2:	ea92 0f0c 	teqne	r2, ip
 8000ce6:	ea93 0f0c 	teqne	r3, ip
 8000cea:	d06f      	beq.n	8000dcc <__aeabi_fmul+0xf8>
 8000cec:	441a      	add	r2, r3
 8000cee:	ea80 0c01 	eor.w	ip, r0, r1
 8000cf2:	0240      	lsls	r0, r0, #9
 8000cf4:	bf18      	it	ne
 8000cf6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cfa:	d01e      	beq.n	8000d3a <__aeabi_fmul+0x66>
 8000cfc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d08:	fba0 3101 	umull	r3, r1, r0, r1
 8000d0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d14:	bf3e      	ittt	cc
 8000d16:	0049      	lslcc	r1, r1, #1
 8000d18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d1c:	005b      	lslcc	r3, r3, #1
 8000d1e:	ea40 0001 	orr.w	r0, r0, r1
 8000d22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d26:	2afd      	cmp	r2, #253	@ 0xfd
 8000d28:	d81d      	bhi.n	8000d66 <__aeabi_fmul+0x92>
 8000d2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d32:	bf08      	it	eq
 8000d34:	f020 0001 	biceq.w	r0, r0, #1
 8000d38:	4770      	bx	lr
 8000d3a:	f090 0f00 	teq	r0, #0
 8000d3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d42:	bf08      	it	eq
 8000d44:	0249      	lsleq	r1, r1, #9
 8000d46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d50:	bfc2      	ittt	gt
 8000d52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d5a:	4770      	bxgt	lr
 8000d5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	3a01      	subs	r2, #1
 8000d66:	dc5d      	bgt.n	8000e24 <__aeabi_fmul+0x150>
 8000d68:	f112 0f19 	cmn.w	r2, #25
 8000d6c:	bfdc      	itt	le
 8000d6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d72:	4770      	bxle	lr
 8000d74:	f1c2 0200 	rsb	r2, r2, #0
 8000d78:	0041      	lsls	r1, r0, #1
 8000d7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7e:	f1c2 0220 	rsb	r2, r2, #32
 8000d82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d8a:	f140 0000 	adc.w	r0, r0, #0
 8000d8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d92:	bf08      	it	eq
 8000d94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d98:	4770      	bx	lr
 8000d9a:	f092 0f00 	teq	r2, #0
 8000d9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000da2:	bf02      	ittt	eq
 8000da4:	0040      	lsleq	r0, r0, #1
 8000da6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000daa:	3a01      	subeq	r2, #1
 8000dac:	d0f9      	beq.n	8000da2 <__aeabi_fmul+0xce>
 8000dae:	ea40 000c 	orr.w	r0, r0, ip
 8000db2:	f093 0f00 	teq	r3, #0
 8000db6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dba:	bf02      	ittt	eq
 8000dbc:	0049      	lsleq	r1, r1, #1
 8000dbe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000dc2:	3b01      	subeq	r3, #1
 8000dc4:	d0f9      	beq.n	8000dba <__aeabi_fmul+0xe6>
 8000dc6:	ea41 010c 	orr.w	r1, r1, ip
 8000dca:	e78f      	b.n	8000cec <__aeabi_fmul+0x18>
 8000dcc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dd0:	ea92 0f0c 	teq	r2, ip
 8000dd4:	bf18      	it	ne
 8000dd6:	ea93 0f0c 	teqne	r3, ip
 8000dda:	d00a      	beq.n	8000df2 <__aeabi_fmul+0x11e>
 8000ddc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000de0:	bf18      	it	ne
 8000de2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000de6:	d1d8      	bne.n	8000d9a <__aeabi_fmul+0xc6>
 8000de8:	ea80 0001 	eor.w	r0, r0, r1
 8000dec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df0:	4770      	bx	lr
 8000df2:	f090 0f00 	teq	r0, #0
 8000df6:	bf17      	itett	ne
 8000df8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dfc:	4608      	moveq	r0, r1
 8000dfe:	f091 0f00 	teqne	r1, #0
 8000e02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e06:	d014      	beq.n	8000e32 <__aeabi_fmul+0x15e>
 8000e08:	ea92 0f0c 	teq	r2, ip
 8000e0c:	d101      	bne.n	8000e12 <__aeabi_fmul+0x13e>
 8000e0e:	0242      	lsls	r2, r0, #9
 8000e10:	d10f      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e12:	ea93 0f0c 	teq	r3, ip
 8000e16:	d103      	bne.n	8000e20 <__aeabi_fmul+0x14c>
 8000e18:	024b      	lsls	r3, r1, #9
 8000e1a:	bf18      	it	ne
 8000e1c:	4608      	movne	r0, r1
 8000e1e:	d108      	bne.n	8000e32 <__aeabi_fmul+0x15e>
 8000e20:	ea80 0001 	eor.w	r0, r0, r1
 8000e24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e30:	4770      	bx	lr
 8000e32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_fdiv>:
 8000e3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e44:	bf1e      	ittt	ne
 8000e46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e4a:	ea92 0f0c 	teqne	r2, ip
 8000e4e:	ea93 0f0c 	teqne	r3, ip
 8000e52:	d069      	beq.n	8000f28 <__aeabi_fdiv+0xec>
 8000e54:	eba2 0203 	sub.w	r2, r2, r3
 8000e58:	ea80 0c01 	eor.w	ip, r0, r1
 8000e5c:	0249      	lsls	r1, r1, #9
 8000e5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e62:	d037      	beq.n	8000ed4 <__aeabi_fdiv+0x98>
 8000e64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e74:	428b      	cmp	r3, r1
 8000e76:	bf38      	it	cc
 8000e78:	005b      	lslcc	r3, r3, #1
 8000e7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e82:	428b      	cmp	r3, r1
 8000e84:	bf24      	itt	cs
 8000e86:	1a5b      	subcs	r3, r3, r1
 8000e88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e90:	bf24      	itt	cs
 8000e92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9e:	bf24      	itt	cs
 8000ea0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000eac:	bf24      	itt	cs
 8000eae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	bf18      	it	ne
 8000eba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ebe:	d1e0      	bne.n	8000e82 <__aeabi_fdiv+0x46>
 8000ec0:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec2:	f63f af50 	bhi.w	8000d66 <__aeabi_fmul+0x92>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ed8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000edc:	327f      	adds	r2, #127	@ 0x7f
 8000ede:	bfc2      	ittt	gt
 8000ee0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ee4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee8:	4770      	bxgt	lr
 8000eea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eee:	f04f 0300 	mov.w	r3, #0
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	e737      	b.n	8000d66 <__aeabi_fmul+0x92>
 8000ef6:	f092 0f00 	teq	r2, #0
 8000efa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000efe:	bf02      	ittt	eq
 8000f00:	0040      	lsleq	r0, r0, #1
 8000f02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f06:	3a01      	subeq	r2, #1
 8000f08:	d0f9      	beq.n	8000efe <__aeabi_fdiv+0xc2>
 8000f0a:	ea40 000c 	orr.w	r0, r0, ip
 8000f0e:	f093 0f00 	teq	r3, #0
 8000f12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f16:	bf02      	ittt	eq
 8000f18:	0049      	lsleq	r1, r1, #1
 8000f1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f1e:	3b01      	subeq	r3, #1
 8000f20:	d0f9      	beq.n	8000f16 <__aeabi_fdiv+0xda>
 8000f22:	ea41 010c 	orr.w	r1, r1, ip
 8000f26:	e795      	b.n	8000e54 <__aeabi_fdiv+0x18>
 8000f28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f2c:	ea92 0f0c 	teq	r2, ip
 8000f30:	d108      	bne.n	8000f44 <__aeabi_fdiv+0x108>
 8000f32:	0242      	lsls	r2, r0, #9
 8000f34:	f47f af7d 	bne.w	8000e32 <__aeabi_fmul+0x15e>
 8000f38:	ea93 0f0c 	teq	r3, ip
 8000f3c:	f47f af70 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f40:	4608      	mov	r0, r1
 8000f42:	e776      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f44:	ea93 0f0c 	teq	r3, ip
 8000f48:	d104      	bne.n	8000f54 <__aeabi_fdiv+0x118>
 8000f4a:	024b      	lsls	r3, r1, #9
 8000f4c:	f43f af4c 	beq.w	8000de8 <__aeabi_fmul+0x114>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e76e      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f58:	bf18      	it	ne
 8000f5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	d1ca      	bne.n	8000ef6 <__aeabi_fdiv+0xba>
 8000f60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f64:	f47f af5c 	bne.w	8000e20 <__aeabi_fmul+0x14c>
 8000f68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f6c:	f47f af3c 	bne.w	8000de8 <__aeabi_fmul+0x114>
 8000f70:	e75f      	b.n	8000e32 <__aeabi_fmul+0x15e>
 8000f72:	bf00      	nop

08000f74 <__gesf2>:
 8000f74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000f78:	e006      	b.n	8000f88 <__cmpsf2+0x4>
 8000f7a:	bf00      	nop

08000f7c <__lesf2>:
 8000f7c:	f04f 0c01 	mov.w	ip, #1
 8000f80:	e002      	b.n	8000f88 <__cmpsf2+0x4>
 8000f82:	bf00      	nop

08000f84 <__cmpsf2>:
 8000f84:	f04f 0c01 	mov.w	ip, #1
 8000f88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	bf18      	it	ne
 8000f9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f9e:	d011      	beq.n	8000fc4 <__cmpsf2+0x40>
 8000fa0:	b001      	add	sp, #4
 8000fa2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fa6:	bf18      	it	ne
 8000fa8:	ea90 0f01 	teqne	r0, r1
 8000fac:	bf58      	it	pl
 8000fae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fb2:	bf88      	it	hi
 8000fb4:	17c8      	asrhi	r0, r1, #31
 8000fb6:	bf38      	it	cc
 8000fb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fbc:	bf18      	it	ne
 8000fbe:	f040 0001 	orrne.w	r0, r0, #1
 8000fc2:	4770      	bx	lr
 8000fc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fc8:	d102      	bne.n	8000fd0 <__cmpsf2+0x4c>
 8000fca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fce:	d105      	bne.n	8000fdc <__cmpsf2+0x58>
 8000fd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fd4:	d1e4      	bne.n	8000fa0 <__cmpsf2+0x1c>
 8000fd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fda:	d0e1      	beq.n	8000fa0 <__cmpsf2+0x1c>
 8000fdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_cfrcmple>:
 8000fe4:	4684      	mov	ip, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4661      	mov	r1, ip
 8000fea:	e7ff      	b.n	8000fec <__aeabi_cfcmpeq>

08000fec <__aeabi_cfcmpeq>:
 8000fec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fee:	f7ff ffc9 	bl	8000f84 <__cmpsf2>
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	bf48      	it	mi
 8000ff6:	f110 0f00 	cmnmi.w	r0, #0
 8000ffa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ffc <__aeabi_fcmpeq>:
 8000ffc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001000:	f7ff fff4 	bl	8000fec <__aeabi_cfcmpeq>
 8001004:	bf0c      	ite	eq
 8001006:	2001      	moveq	r0, #1
 8001008:	2000      	movne	r0, #0
 800100a:	f85d fb08 	ldr.w	pc, [sp], #8
 800100e:	bf00      	nop

08001010 <__aeabi_fcmplt>:
 8001010:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001014:	f7ff ffea 	bl	8000fec <__aeabi_cfcmpeq>
 8001018:	bf34      	ite	cc
 800101a:	2001      	movcc	r0, #1
 800101c:	2000      	movcs	r0, #0
 800101e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001022:	bf00      	nop

08001024 <__aeabi_fcmple>:
 8001024:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001028:	f7ff ffe0 	bl	8000fec <__aeabi_cfcmpeq>
 800102c:	bf94      	ite	ls
 800102e:	2001      	movls	r0, #1
 8001030:	2000      	movhi	r0, #0
 8001032:	f85d fb08 	ldr.w	pc, [sp], #8
 8001036:	bf00      	nop

08001038 <__aeabi_fcmpge>:
 8001038:	f84d ed08 	str.w	lr, [sp, #-8]!
 800103c:	f7ff ffd2 	bl	8000fe4 <__aeabi_cfrcmple>
 8001040:	bf94      	ite	ls
 8001042:	2001      	movls	r0, #1
 8001044:	2000      	movhi	r0, #0
 8001046:	f85d fb08 	ldr.w	pc, [sp], #8
 800104a:	bf00      	nop

0800104c <__aeabi_fcmpgt>:
 800104c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001050:	f7ff ffc8 	bl	8000fe4 <__aeabi_cfrcmple>
 8001054:	bf34      	ite	cc
 8001056:	2001      	movcc	r0, #1
 8001058:	2000      	movcs	r0, #0
 800105a:	f85d fb08 	ldr.w	pc, [sp], #8
 800105e:	bf00      	nop

08001060 <__aeabi_fcmpun>:
 8001060:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001064:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001068:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800106c:	d102      	bne.n	8001074 <__aeabi_fcmpun+0x14>
 800106e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001072:	d108      	bne.n	8001086 <__aeabi_fcmpun+0x26>
 8001074:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001078:	d102      	bne.n	8001080 <__aeabi_fcmpun+0x20>
 800107a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800107e:	d102      	bne.n	8001086 <__aeabi_fcmpun+0x26>
 8001080:	f04f 0000 	mov.w	r0, #0
 8001084:	4770      	bx	lr
 8001086:	f04f 0001 	mov.w	r0, #1
 800108a:	4770      	bx	lr

0800108c <__aeabi_uldivmod>:
 800108c:	b953      	cbnz	r3, 80010a4 <__aeabi_uldivmod+0x18>
 800108e:	b94a      	cbnz	r2, 80010a4 <__aeabi_uldivmod+0x18>
 8001090:	2900      	cmp	r1, #0
 8001092:	bf08      	it	eq
 8001094:	2800      	cmpeq	r0, #0
 8001096:	bf1c      	itt	ne
 8001098:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800109c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80010a0:	f000 b98c 	b.w	80013bc <__aeabi_idiv0>
 80010a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80010a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010ac:	f000 f806 	bl	80010bc <__udivmoddi4>
 80010b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010b8:	b004      	add	sp, #16
 80010ba:	4770      	bx	lr

080010bc <__udivmoddi4>:
 80010bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c0:	9d08      	ldr	r5, [sp, #32]
 80010c2:	468e      	mov	lr, r1
 80010c4:	4604      	mov	r4, r0
 80010c6:	4688      	mov	r8, r1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d14a      	bne.n	8001162 <__udivmoddi4+0xa6>
 80010cc:	428a      	cmp	r2, r1
 80010ce:	4617      	mov	r7, r2
 80010d0:	d962      	bls.n	8001198 <__udivmoddi4+0xdc>
 80010d2:	fab2 f682 	clz	r6, r2
 80010d6:	b14e      	cbz	r6, 80010ec <__udivmoddi4+0x30>
 80010d8:	f1c6 0320 	rsb	r3, r6, #32
 80010dc:	fa01 f806 	lsl.w	r8, r1, r6
 80010e0:	fa20 f303 	lsr.w	r3, r0, r3
 80010e4:	40b7      	lsls	r7, r6
 80010e6:	ea43 0808 	orr.w	r8, r3, r8
 80010ea:	40b4      	lsls	r4, r6
 80010ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010f0:	fbb8 f1fe 	udiv	r1, r8, lr
 80010f4:	fa1f fc87 	uxth.w	ip, r7
 80010f8:	fb0e 8811 	mls	r8, lr, r1, r8
 80010fc:	fb01 f20c 	mul.w	r2, r1, ip
 8001100:	0c23      	lsrs	r3, r4, #16
 8001102:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001106:	429a      	cmp	r2, r3
 8001108:	d909      	bls.n	800111e <__udivmoddi4+0x62>
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8001110:	f080 80eb 	bcs.w	80012ea <__udivmoddi4+0x22e>
 8001114:	429a      	cmp	r2, r3
 8001116:	f240 80e8 	bls.w	80012ea <__udivmoddi4+0x22e>
 800111a:	3902      	subs	r1, #2
 800111c:	443b      	add	r3, r7
 800111e:	1a9a      	subs	r2, r3, r2
 8001120:	fbb2 f0fe 	udiv	r0, r2, lr
 8001124:	fb0e 2210 	mls	r2, lr, r0, r2
 8001128:	fb00 fc0c 	mul.w	ip, r0, ip
 800112c:	b2a3      	uxth	r3, r4
 800112e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001132:	459c      	cmp	ip, r3
 8001134:	d909      	bls.n	800114a <__udivmoddi4+0x8e>
 8001136:	18fb      	adds	r3, r7, r3
 8001138:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800113c:	f080 80d7 	bcs.w	80012ee <__udivmoddi4+0x232>
 8001140:	459c      	cmp	ip, r3
 8001142:	f240 80d4 	bls.w	80012ee <__udivmoddi4+0x232>
 8001146:	443b      	add	r3, r7
 8001148:	3802      	subs	r0, #2
 800114a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800114e:	2100      	movs	r1, #0
 8001150:	eba3 030c 	sub.w	r3, r3, ip
 8001154:	b11d      	cbz	r5, 800115e <__udivmoddi4+0xa2>
 8001156:	2200      	movs	r2, #0
 8001158:	40f3      	lsrs	r3, r6
 800115a:	e9c5 3200 	strd	r3, r2, [r5]
 800115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001162:	428b      	cmp	r3, r1
 8001164:	d905      	bls.n	8001172 <__udivmoddi4+0xb6>
 8001166:	b10d      	cbz	r5, 800116c <__udivmoddi4+0xb0>
 8001168:	e9c5 0100 	strd	r0, r1, [r5]
 800116c:	2100      	movs	r1, #0
 800116e:	4608      	mov	r0, r1
 8001170:	e7f5      	b.n	800115e <__udivmoddi4+0xa2>
 8001172:	fab3 f183 	clz	r1, r3
 8001176:	2900      	cmp	r1, #0
 8001178:	d146      	bne.n	8001208 <__udivmoddi4+0x14c>
 800117a:	4573      	cmp	r3, lr
 800117c:	d302      	bcc.n	8001184 <__udivmoddi4+0xc8>
 800117e:	4282      	cmp	r2, r0
 8001180:	f200 8108 	bhi.w	8001394 <__udivmoddi4+0x2d8>
 8001184:	1a84      	subs	r4, r0, r2
 8001186:	eb6e 0203 	sbc.w	r2, lr, r3
 800118a:	2001      	movs	r0, #1
 800118c:	4690      	mov	r8, r2
 800118e:	2d00      	cmp	r5, #0
 8001190:	d0e5      	beq.n	800115e <__udivmoddi4+0xa2>
 8001192:	e9c5 4800 	strd	r4, r8, [r5]
 8001196:	e7e2      	b.n	800115e <__udivmoddi4+0xa2>
 8001198:	2a00      	cmp	r2, #0
 800119a:	f000 8091 	beq.w	80012c0 <__udivmoddi4+0x204>
 800119e:	fab2 f682 	clz	r6, r2
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	f040 80a5 	bne.w	80012f2 <__udivmoddi4+0x236>
 80011a8:	1a8a      	subs	r2, r1, r2
 80011aa:	2101      	movs	r1, #1
 80011ac:	0c03      	lsrs	r3, r0, #16
 80011ae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011b2:	b280      	uxth	r0, r0
 80011b4:	b2bc      	uxth	r4, r7
 80011b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80011ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80011be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011c2:	fb04 f20c 	mul.w	r2, r4, ip
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x11e>
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80011d0:	d202      	bcs.n	80011d8 <__udivmoddi4+0x11c>
 80011d2:	429a      	cmp	r2, r3
 80011d4:	f200 80e3 	bhi.w	800139e <__udivmoddi4+0x2e2>
 80011d8:	46c4      	mov	ip, r8
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80011e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80011e4:	fb02 f404 	mul.w	r4, r2, r4
 80011e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80011ec:	429c      	cmp	r4, r3
 80011ee:	d907      	bls.n	8001200 <__udivmoddi4+0x144>
 80011f0:	18fb      	adds	r3, r7, r3
 80011f2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80011f6:	d202      	bcs.n	80011fe <__udivmoddi4+0x142>
 80011f8:	429c      	cmp	r4, r3
 80011fa:	f200 80cd 	bhi.w	8001398 <__udivmoddi4+0x2dc>
 80011fe:	4602      	mov	r2, r0
 8001200:	1b1b      	subs	r3, r3, r4
 8001202:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001206:	e7a5      	b.n	8001154 <__udivmoddi4+0x98>
 8001208:	f1c1 0620 	rsb	r6, r1, #32
 800120c:	408b      	lsls	r3, r1
 800120e:	fa22 f706 	lsr.w	r7, r2, r6
 8001212:	431f      	orrs	r7, r3
 8001214:	fa2e fa06 	lsr.w	sl, lr, r6
 8001218:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800121c:	fbba f8f9 	udiv	r8, sl, r9
 8001220:	fa0e fe01 	lsl.w	lr, lr, r1
 8001224:	fa20 f306 	lsr.w	r3, r0, r6
 8001228:	fb09 aa18 	mls	sl, r9, r8, sl
 800122c:	fa1f fc87 	uxth.w	ip, r7
 8001230:	ea43 030e 	orr.w	r3, r3, lr
 8001234:	fa00 fe01 	lsl.w	lr, r0, r1
 8001238:	fb08 f00c 	mul.w	r0, r8, ip
 800123c:	0c1c      	lsrs	r4, r3, #16
 800123e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001242:	42a0      	cmp	r0, r4
 8001244:	fa02 f201 	lsl.w	r2, r2, r1
 8001248:	d90a      	bls.n	8001260 <__udivmoddi4+0x1a4>
 800124a:	193c      	adds	r4, r7, r4
 800124c:	f108 3aff 	add.w	sl, r8, #4294967295	@ 0xffffffff
 8001250:	f080 809e 	bcs.w	8001390 <__udivmoddi4+0x2d4>
 8001254:	42a0      	cmp	r0, r4
 8001256:	f240 809b 	bls.w	8001390 <__udivmoddi4+0x2d4>
 800125a:	f1a8 0802 	sub.w	r8, r8, #2
 800125e:	443c      	add	r4, r7
 8001260:	1a24      	subs	r4, r4, r0
 8001262:	b298      	uxth	r0, r3
 8001264:	fbb4 f3f9 	udiv	r3, r4, r9
 8001268:	fb09 4413 	mls	r4, r9, r3, r4
 800126c:	fb03 fc0c 	mul.w	ip, r3, ip
 8001270:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8001274:	45a4      	cmp	ip, r4
 8001276:	d909      	bls.n	800128c <__udivmoddi4+0x1d0>
 8001278:	193c      	adds	r4, r7, r4
 800127a:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800127e:	f080 8085 	bcs.w	800138c <__udivmoddi4+0x2d0>
 8001282:	45a4      	cmp	ip, r4
 8001284:	f240 8082 	bls.w	800138c <__udivmoddi4+0x2d0>
 8001288:	3b02      	subs	r3, #2
 800128a:	443c      	add	r4, r7
 800128c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001290:	eba4 040c 	sub.w	r4, r4, ip
 8001294:	fba0 8c02 	umull	r8, ip, r0, r2
 8001298:	4564      	cmp	r4, ip
 800129a:	4643      	mov	r3, r8
 800129c:	46e1      	mov	r9, ip
 800129e:	d364      	bcc.n	800136a <__udivmoddi4+0x2ae>
 80012a0:	d061      	beq.n	8001366 <__udivmoddi4+0x2aa>
 80012a2:	b15d      	cbz	r5, 80012bc <__udivmoddi4+0x200>
 80012a4:	ebbe 0203 	subs.w	r2, lr, r3
 80012a8:	eb64 0409 	sbc.w	r4, r4, r9
 80012ac:	fa04 f606 	lsl.w	r6, r4, r6
 80012b0:	fa22 f301 	lsr.w	r3, r2, r1
 80012b4:	431e      	orrs	r6, r3
 80012b6:	40cc      	lsrs	r4, r1
 80012b8:	e9c5 6400 	strd	r6, r4, [r5]
 80012bc:	2100      	movs	r1, #0
 80012be:	e74e      	b.n	800115e <__udivmoddi4+0xa2>
 80012c0:	fbb1 fcf2 	udiv	ip, r1, r2
 80012c4:	0c01      	lsrs	r1, r0, #16
 80012c6:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012ca:	b280      	uxth	r0, r0
 80012cc:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80012d0:	463b      	mov	r3, r7
 80012d2:	fbb1 f1f7 	udiv	r1, r1, r7
 80012d6:	4638      	mov	r0, r7
 80012d8:	463c      	mov	r4, r7
 80012da:	46b8      	mov	r8, r7
 80012dc:	46be      	mov	lr, r7
 80012de:	2620      	movs	r6, #32
 80012e0:	eba2 0208 	sub.w	r2, r2, r8
 80012e4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80012e8:	e765      	b.n	80011b6 <__udivmoddi4+0xfa>
 80012ea:	4601      	mov	r1, r0
 80012ec:	e717      	b.n	800111e <__udivmoddi4+0x62>
 80012ee:	4610      	mov	r0, r2
 80012f0:	e72b      	b.n	800114a <__udivmoddi4+0x8e>
 80012f2:	f1c6 0120 	rsb	r1, r6, #32
 80012f6:	fa2e fc01 	lsr.w	ip, lr, r1
 80012fa:	40b7      	lsls	r7, r6
 80012fc:	fa0e fe06 	lsl.w	lr, lr, r6
 8001300:	fa20 f101 	lsr.w	r1, r0, r1
 8001304:	ea41 010e 	orr.w	r1, r1, lr
 8001308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800130c:	fbbc f8fe 	udiv	r8, ip, lr
 8001310:	b2bc      	uxth	r4, r7
 8001312:	fb0e cc18 	mls	ip, lr, r8, ip
 8001316:	fb08 f904 	mul.w	r9, r8, r4
 800131a:	0c0a      	lsrs	r2, r1, #16
 800131c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001320:	40b0      	lsls	r0, r6
 8001322:	4591      	cmp	r9, r2
 8001324:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001328:	b280      	uxth	r0, r0
 800132a:	d93e      	bls.n	80013aa <__udivmoddi4+0x2ee>
 800132c:	18ba      	adds	r2, r7, r2
 800132e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001332:	d201      	bcs.n	8001338 <__udivmoddi4+0x27c>
 8001334:	4591      	cmp	r9, r2
 8001336:	d81f      	bhi.n	8001378 <__udivmoddi4+0x2bc>
 8001338:	eba2 0209 	sub.w	r2, r2, r9
 800133c:	fbb2 f9fe 	udiv	r9, r2, lr
 8001340:	fb09 f804 	mul.w	r8, r9, r4
 8001344:	fb0e 2a19 	mls	sl, lr, r9, r2
 8001348:	b28a      	uxth	r2, r1
 800134a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800134e:	4542      	cmp	r2, r8
 8001350:	d229      	bcs.n	80013a6 <__udivmoddi4+0x2ea>
 8001352:	18ba      	adds	r2, r7, r2
 8001354:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001358:	d2c2      	bcs.n	80012e0 <__udivmoddi4+0x224>
 800135a:	4542      	cmp	r2, r8
 800135c:	d2c0      	bcs.n	80012e0 <__udivmoddi4+0x224>
 800135e:	f1a9 0102 	sub.w	r1, r9, #2
 8001362:	443a      	add	r2, r7
 8001364:	e7bc      	b.n	80012e0 <__udivmoddi4+0x224>
 8001366:	45c6      	cmp	lr, r8
 8001368:	d29b      	bcs.n	80012a2 <__udivmoddi4+0x1e6>
 800136a:	ebb8 0302 	subs.w	r3, r8, r2
 800136e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001372:	3801      	subs	r0, #1
 8001374:	46e1      	mov	r9, ip
 8001376:	e794      	b.n	80012a2 <__udivmoddi4+0x1e6>
 8001378:	eba7 0909 	sub.w	r9, r7, r9
 800137c:	444a      	add	r2, r9
 800137e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001382:	f1a8 0c02 	sub.w	ip, r8, #2
 8001386:	fb09 f804 	mul.w	r8, r9, r4
 800138a:	e7db      	b.n	8001344 <__udivmoddi4+0x288>
 800138c:	4603      	mov	r3, r0
 800138e:	e77d      	b.n	800128c <__udivmoddi4+0x1d0>
 8001390:	46d0      	mov	r8, sl
 8001392:	e765      	b.n	8001260 <__udivmoddi4+0x1a4>
 8001394:	4608      	mov	r0, r1
 8001396:	e6fa      	b.n	800118e <__udivmoddi4+0xd2>
 8001398:	443b      	add	r3, r7
 800139a:	3a02      	subs	r2, #2
 800139c:	e730      	b.n	8001200 <__udivmoddi4+0x144>
 800139e:	f1ac 0c02 	sub.w	ip, ip, #2
 80013a2:	443b      	add	r3, r7
 80013a4:	e719      	b.n	80011da <__udivmoddi4+0x11e>
 80013a6:	4649      	mov	r1, r9
 80013a8:	e79a      	b.n	80012e0 <__udivmoddi4+0x224>
 80013aa:	eba2 0209 	sub.w	r2, r2, r9
 80013ae:	fbb2 f9fe 	udiv	r9, r2, lr
 80013b2:	46c4      	mov	ip, r8
 80013b4:	fb09 f804 	mul.w	r8, r9, r4
 80013b8:	e7c4      	b.n	8001344 <__udivmoddi4+0x288>
 80013ba:	bf00      	nop

080013bc <__aeabi_idiv0>:
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c6:	f000 fd76 	bl	8001eb6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ca:	f000 f82f 	bl	800142c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ce:	f000 f983 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013d2:	f000 f957 	bl	8001684 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013d6:	f000 f8ff 	bl	80015d8 <MX_TIM3_Init>
  MX_I2C1_Init();
 80013da:	f000 f8cf 	bl	800157c <MX_I2C1_Init>
  MX_ADC_Init();
 80013de:	f000 f873 	bl	80014c8 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim3);  // <--- START TIMER EN MODE INTERRUPTION
  printf("Init OK\r\n");
 80013e2:	480f      	ldr	r0, [pc, #60]	@ (8001420 <main+0x60>)
 80013e4:	f005 f838 	bl	8006458 <puts>
  // Active le LPS22HH à 10Hz
	uint8_t reg = 0x10;              // CTRL_REG1
 80013e8:	2310      	movs	r3, #16
 80013ea:	71fb      	strb	r3, [r7, #7]
	uint8_t odr = 0x20;              // ODR = 10 Hz (bit[6:4] = 010)
 80013ec:	2320      	movs	r3, #32
 80013ee:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, adresseCapteur << 1, reg, 1, &odr, 1, 100);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	2364      	movs	r3, #100	@ 0x64
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	1dbb      	adds	r3, r7, #6
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	21ba      	movs	r1, #186	@ 0xba
 8001404:	4807      	ldr	r0, [pc, #28]	@ (8001424 <main+0x64>)
 8001406:	f001 fe71 	bl	80030ec <HAL_I2C_Mem_Write>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  scan_i2c_bus(&hi2c1);
 800140a:	4806      	ldr	r0, [pc, #24]	@ (8001424 <main+0x64>)
 800140c:	f000 fa4c 	bl	80018a8 <scan_i2c_bus>
  printf("En attente de BTN2...\r\n");
 8001410:	4805      	ldr	r0, [pc, #20]	@ (8001428 <main+0x68>)
 8001412:	f005 f821 	bl	8006458 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1000);
 8001416:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800141a:	f000 fdbb 	bl	8001f94 <HAL_Delay>
 800141e:	e7fa      	b.n	8001416 <main+0x56>
 8001420:	08008c90 	.word	0x08008c90
 8001424:	20000244 	.word	0x20000244
 8001428:	08008c9c 	.word	0x08008c9c

0800142c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b092      	sub	sp, #72	@ 0x48
 8001430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2234      	movs	r2, #52	@ 0x34
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f005 f814 	bl	8006468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <SystemClock_Config+0x98>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001456:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <SystemClock_Config+0x98>)
 8001458:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800145c:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800145e:	2302      	movs	r3, #2
 8001460:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001462:	2301      	movs	r3, #1
 8001464:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001466:	2310      	movs	r3, #16
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800146a:	2302      	movs	r3, #2
 800146c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800146e:	2300      	movs	r3, #0
 8001470:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001472:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8001476:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001478:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800147c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0314 	add.w	r3, r7, #20
 8001482:	4618      	mov	r0, r3
 8001484:	f002 fe40 	bl	8004108 <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800148e:	f000 fabf 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2303      	movs	r3, #3
 8001498:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	2101      	movs	r1, #1
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 f95c 	bl	8004768 <HAL_RCC_ClockConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80014b6:	f000 faab 	bl	8001a10 <Error_Handler>
  }
}
 80014ba:	bf00      	nop
 80014bc:	3748      	adds	r7, #72	@ 0x48
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80014d8:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <MX_ADC_Init+0xac>)
 80014da:	4a27      	ldr	r2, [pc, #156]	@ (8001578 <MX_ADC_Init+0xb0>)
 80014dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80014de:	4b25      	ldr	r3, [pc, #148]	@ (8001574 <MX_ADC_Init+0xac>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80014e4:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <MX_ADC_Init+0xac>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ea:	4b22      	ldr	r3, [pc, #136]	@ (8001574 <MX_ADC_Init+0xac>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014f0:	4b20      	ldr	r3, [pc, #128]	@ (8001574 <MX_ADC_Init+0xac>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <MX_ADC_Init+0xac>)
 80014f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014fc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80014fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001574 <MX_ADC_Init+0xac>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <MX_ADC_Init+0xac>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 800150a:	4b1a      	ldr	r3, [pc, #104]	@ (8001574 <MX_ADC_Init+0xac>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001510:	4b18      	ldr	r3, [pc, #96]	@ (8001574 <MX_ADC_Init+0xac>)
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001518:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_ADC_Init+0xac>)
 800151a:	2201      	movs	r2, #1
 800151c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <MX_ADC_Init+0xac>)
 8001520:	2200      	movs	r2, #0
 8001522:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001526:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <MX_ADC_Init+0xac>)
 8001528:	2210      	movs	r2, #16
 800152a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_ADC_Init+0xac>)
 800152e:	2200      	movs	r2, #0
 8001530:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <MX_ADC_Init+0xac>)
 8001534:	2200      	movs	r2, #0
 8001536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800153a:	480e      	ldr	r0, [pc, #56]	@ (8001574 <MX_ADC_Init+0xac>)
 800153c:	f000 fd4c 	bl	8001fd8 <HAL_ADC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_ADC_Init+0x82>
  {
    Error_Handler();
 8001546:	f000 fa63 	bl	8001a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800154a:	2301      	movs	r3, #1
 800154c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800154e:	2301      	movs	r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4806      	ldr	r0, [pc, #24]	@ (8001574 <MX_ADC_Init+0xac>)
 800155c:	f000 ffaa 	bl	80024b4 <HAL_ADC_ConfigChannel>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 8001566:	f000 fa53 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200001f0 	.word	0x200001f0
 8001578:	40012400 	.word	0x40012400

0800157c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x50>)
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <MX_I2C1_Init+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_I2C1_Init+0x50>)
 8001588:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_I2C1_Init+0x58>)
 800158a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_I2C1_Init+0x50>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_I2C1_Init+0x50>)
 8001594:	2200      	movs	r2, #0
 8001596:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_I2C1_Init+0x50>)
 800159a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b0a      	ldr	r3, [pc, #40]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ac:	4b07      	ldr	r3, [pc, #28]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b2:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_I2C1_Init+0x50>)
 80015ba:	f001 fc53 	bl	8002e64 <HAL_I2C_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015c4:	f000 fa24 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000244 	.word	0x20000244
 80015d0:	40005400 	.word	0x40005400
 80015d4:	00061a80 	.word	0x00061a80

080015d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015f4:	4b21      	ldr	r3, [pc, #132]	@ (800167c <MX_TIM3_Init+0xa4>)
 80015f6:	4a22      	ldr	r2, [pc, #136]	@ (8001680 <MX_TIM3_Init+0xa8>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 17500;
 80015fa:	4b20      	ldr	r3, [pc, #128]	@ (800167c <MX_TIM3_Init+0xa4>)
 80015fc:	f244 425c 	movw	r2, #17500	@ 0x445c
 8001600:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001602:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_TIM3_Init+0xa4>)
 800160a:	2264      	movs	r2, #100	@ 0x64
 800160c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b1b      	ldr	r3, [pc, #108]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800161a:	4818      	ldr	r0, [pc, #96]	@ (800167c <MX_TIM3_Init+0xa4>)
 800161c:	f003 fb6a 	bl	8004cf4 <HAL_TIM_Base_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 f9f3 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800162a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800162e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	4619      	mov	r1, r3
 8001636:	4811      	ldr	r0, [pc, #68]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001638:	f003 fcba 	bl	8004fb0 <HAL_TIM_ConfigClockSource>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001642:	f000 f9e5 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800164e:	463b      	mov	r3, r7
 8001650:	4619      	mov	r1, r3
 8001652:	480a      	ldr	r0, [pc, #40]	@ (800167c <MX_TIM3_Init+0xa4>)
 8001654:	f003 fea4 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800165e:	f000 f9d7 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2101      	movs	r1, #1
 8001666:	201d      	movs	r0, #29
 8001668:	f001 fa05 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800166c:	201d      	movs	r0, #29
 800166e:	f001 fa1e 	bl	8002aae <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM3_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000298 	.word	0x20000298
 8001680:	40000400 	.word	0x40000400

08001684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <MX_USART2_UART_Init+0x50>)
 800168c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_USART2_UART_Init+0x4c>)
 80016bc:	f003 fece 	bl	800545c <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c6:	f000 f9a3 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002d8 	.word	0x200002d8
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	4a34      	ldr	r2, [pc, #208]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	61d3      	str	r3, [r2, #28]
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_GPIO_Init+0xec>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <MX_GPIO_Init+0xec>)
 800170c:	f043 0320 	orr.w	r3, r3, #32
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 0320 	and.w	r3, r3, #32
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a28      	ldr	r2, [pc, #160]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_GPIO_Init+0xec>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001736:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001738:	69db      	ldr	r3, [r3, #28]
 800173a:	4a22      	ldr	r2, [pc, #136]	@ (80017c4 <MX_GPIO_Init+0xec>)
 800173c:	f043 0302 	orr.w	r3, r3, #2
 8001740:	61d3      	str	r3, [r2, #28]
 8001742:	4b20      	ldr	r3, [pc, #128]	@ (80017c4 <MX_GPIO_Init+0xec>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800174e:	2200      	movs	r2, #0
 8001750:	2120      	movs	r1, #32
 8001752:	481d      	ldr	r0, [pc, #116]	@ (80017c8 <MX_GPIO_Init+0xf0>)
 8001754:	f001 fb56 	bl	8002e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001758:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	4619      	mov	r1, r3
 800176e:	4817      	ldr	r0, [pc, #92]	@ (80017cc <MX_GPIO_Init+0xf4>)
 8001770:	f001 f9b8 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001774:	2320      	movs	r3, #32
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	480f      	ldr	r0, [pc, #60]	@ (80017c8 <MX_GPIO_Init+0xf0>)
 800178c:	f001 f9aa 	bl	8002ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN2_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin;
 8001790:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN2_GPIO_Port, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	4808      	ldr	r0, [pc, #32]	@ (80017c8 <MX_GPIO_Init+0xf0>)
 80017a8:	f001 f99c 	bl	8002ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ac:	2200      	movs	r2, #0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2028      	movs	r0, #40	@ 0x28
 80017b2:	f001 f960 	bl	8002a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017b6:	2028      	movs	r0, #40	@ 0x28
 80017b8:	f001 f979 	bl	8002aae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017bc:	bf00      	nop
 80017be:	3728      	adds	r7, #40	@ 0x28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000
 80017cc:	40020800 	.word	0x40020800

080017d0 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch) {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80017d8:	1d39      	adds	r1, r7, #4
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017de:	2201      	movs	r2, #1
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <__io_putchar+0x20>)
 80017e2:	f003 fe8b 	bl	80054fc <HAL_UART_Transmit>
    return ch;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	200002d8 	.word	0x200002d8

080017f4 <lire_adc>:

uint32_t lire_adc(ADC_HandleTypeDef *hadc) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(hadc);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f000 fd31 	bl	8002264 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8001802:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fdb8 	bl	800237c <HAL_ADC_PollForConversion>
    uint32_t val = HAL_ADC_GetValue(hadc);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fe45 	bl	800249c <HAL_ADC_GetValue>
 8001812:	60f8      	str	r0, [r7, #12]
    HAL_ADC_Stop(hadc);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 fd85 	bl	8002324 <HAL_ADC_Stop>
    return val;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <lire_pression_LPS22HH>:

float lire_pression_LPS22HH(I2C_HandleTypeDef *hi2c) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	@ 0x28
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[3] = {0};
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	2100      	movs	r1, #0
 8001832:	460a      	mov	r2, r1
 8001834:	801a      	strh	r2, [r3, #0]
 8001836:	460a      	mov	r2, r1
 8001838:	709a      	strb	r2, [r3, #2]
    uint8_t reg = 0x28;  // PRESS_OUT_XL
 800183a:	2328      	movs	r3, #40	@ 0x28
 800183c:	75fb      	strb	r3, [r7, #23]

    // Lecture de 3 octets consécutifs
    if (HAL_I2C_Mem_Read(hi2c, adresseCapteur << 1, reg | 0x80, 1, buffer, 3, 100) != HAL_OK) {
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001844:	b2db      	uxtb	r3, r3
 8001846:	461a      	mov	r2, r3
 8001848:	2364      	movs	r3, #100	@ 0x64
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	2303      	movs	r3, #3
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	2301      	movs	r3, #1
 8001858:	21ba      	movs	r1, #186	@ 0xba
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f001 fd40 	bl	80032e0 <HAL_I2C_Mem_Read>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d004      	beq.n	8001870 <lire_pression_LPS22HH+0x4c>
        printf("Erreur lecture LPS22HH\r\n");
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <lire_pression_LPS22HH+0x7c>)
 8001868:	f004 fdf6 	bl	8006458 <puts>
        return -1;
 800186c:	4b0d      	ldr	r3, [pc, #52]	@ (80018a4 <lire_pression_LPS22HH+0x80>)
 800186e:	e013      	b.n	8001898 <lire_pression_LPS22HH+0x74>
    }

    int32_t raw_press = (int32_t)(buffer[2] << 16 | buffer[1] << 8 | buffer[0]);
 8001870:	7abb      	ldrb	r3, [r7, #10]
 8001872:	041a      	lsls	r2, r3, #16
 8001874:	7a7b      	ldrb	r3, [r7, #9]
 8001876:	021b      	lsls	r3, r3, #8
 8001878:	4313      	orrs	r3, r2
 800187a:	7a3a      	ldrb	r2, [r7, #8]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    // Le capteur retourne une pression en 1/4096 hPa
    float pressure_hPa = raw_press / 4096.0f;
 8001880:	6938      	ldr	r0, [r7, #16]
 8001882:	f7ff f9d3 	bl	8000c2c <__aeabi_i2f>
 8001886:	4603      	mov	r3, r0
 8001888:	f04f 418b 	mov.w	r1, #1166016512	@ 0x45800000
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fad5 	bl	8000e3c <__aeabi_fdiv>
 8001892:	4603      	mov	r3, r0
 8001894:	60fb      	str	r3, [r7, #12]

    return pressure_hPa;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	08008cb4 	.word	0x08008cb4
 80018a4:	bf800000 	.word	0xbf800000

080018a8 <scan_i2c_bus>:

void scan_i2c_bus(I2C_HandleTypeDef *hi2c) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
    printf("Scan I2C...\r\n");
 80018b0:	4813      	ldr	r0, [pc, #76]	@ (8001900 <scan_i2c_bus+0x58>)
 80018b2:	f004 fdd1 	bl	8006458 <puts>

    for (uint8_t addr = 1; addr < 127; addr++) {
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e016      	b.n	80018ea <scan_i2c_bus+0x42>
        if (HAL_I2C_IsDeviceReady(hi2c, (addr << 1), 3, 50) == HAL_OK) {
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	b299      	uxth	r1, r3
 80018c4:	2332      	movs	r3, #50	@ 0x32
 80018c6:	2203      	movs	r2, #3
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f001 ff3b 	bl	8003744 <HAL_I2C_IsDeviceReady>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d104      	bne.n	80018de <scan_i2c_bus+0x36>
            printf("-> Device found at 0x%02X\r\n", addr);
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	4619      	mov	r1, r3
 80018d8:	480a      	ldr	r0, [pc, #40]	@ (8001904 <scan_i2c_bus+0x5c>)
 80018da:	f004 fd55 	bl	8006388 <iprintf>
        }
        HAL_Delay(10); // 🔧 ajoute une pause
 80018de:	200a      	movs	r0, #10
 80018e0:	f000 fb58 	bl	8001f94 <HAL_Delay>
    for (uint8_t addr = 1; addr < 127; addr++) {
 80018e4:	7bfb      	ldrb	r3, [r7, #15]
 80018e6:	3301      	adds	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	2b7e      	cmp	r3, #126	@ 0x7e
 80018ee:	d9e5      	bls.n	80018bc <scan_i2c_bus+0x14>
    }

    printf("Scan termine.\r\n");
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <scan_i2c_bus+0x60>)
 80018f2:	f004 fdb1 	bl	8006458 <puts>
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	08008ccc 	.word	0x08008ccc
 8001904:	08008cdc 	.word	0x08008cdc
 8001908:	08008cf8 	.word	0x08008cf8

0800190c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a24      	ldr	r2, [pc, #144]	@ (80019ac <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d142      	bne.n	80019a4 <HAL_TIM_PeriodElapsedCallback+0x98>
    	uint32_t adc_val = lire_adc(&hadc);
 800191e:	4824      	ldr	r0, [pc, #144]	@ (80019b0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001920:	f7ff ff68 	bl	80017f4 <lire_adc>
 8001924:	61f8      	str	r0, [r7, #28]
    	float pression_niveau_mer = 1010.0f + (adc_val / 4095.0f) * 20.0f;
 8001926:	69f8      	ldr	r0, [r7, #28]
 8001928:	f7ff f97c 	bl	8000c24 <__aeabi_ui2f>
 800192c:	4603      	mov	r3, r0
 800192e:	4921      	ldr	r1, [pc, #132]	@ (80019b4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fa83 	bl	8000e3c <__aeabi_fdiv>
 8001936:	4603      	mov	r3, r0
 8001938:	491f      	ldr	r1, [pc, #124]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f9ca 	bl	8000cd4 <__aeabi_fmul>
 8001940:	4603      	mov	r3, r0
 8001942:	491e      	ldr	r1, [pc, #120]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff f8bd 	bl	8000ac4 <__addsf3>
 800194a:	4603      	mov	r3, r0
 800194c:	61bb      	str	r3, [r7, #24]
        float offset = +0.0f;
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
        float pression = lire_pression_LPS22HH(&hi2c1);
 8001954:	481a      	ldr	r0, [pc, #104]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001956:	f7ff ff65 	bl	8001824 <lire_pression_LPS22HH>
 800195a:	6138      	str	r0, [r7, #16]
        float pression_corrigee = pression + offset;
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	6938      	ldr	r0, [r7, #16]
 8001960:	f7ff f8b0 	bl	8000ac4 <__addsf3>
 8001964:	4603      	mov	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
        float altitude = 44330.0f * (1.0f - powf(pression_corrigee / pression_niveau_mer, 1.0f / 5.255f));
 8001968:	69b9      	ldr	r1, [r7, #24]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f7ff fa66 	bl	8000e3c <__aeabi_fdiv>
 8001970:	4603      	mov	r3, r0
 8001972:	4914      	ldr	r1, [pc, #80]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001974:	4618      	mov	r0, r3
 8001976:	f006 fce9 	bl	800834c <powf>
 800197a:	4603      	mov	r3, r0
 800197c:	4619      	mov	r1, r3
 800197e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001982:	f7ff f89d 	bl	8000ac0 <__aeabi_fsub>
 8001986:	4603      	mov	r3, r0
 8001988:	490f      	ldr	r1, [pc, #60]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f9a2 	bl	8000cd4 <__aeabi_fmul>
 8001990:	4603      	mov	r3, r0
 8001992:	60bb      	str	r3, [r7, #8]
        //printf("Pression de reference: %.2f hPa |Pression mesuree: %.2f hPa | Altitude : %.2f m\n",pression_niveau_mer, pression_corrigee, altitude);
        printf("%.2f\n", pression_corrigee);
 8001994:	68f8      	ldr	r0, [r7, #12]
 8001996:	f7fe fd5f 	bl	8000458 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	480b      	ldr	r0, [pc, #44]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80019a0:	f004 fcf2 	bl	8006388 <iprintf>
    }
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40000400 	.word	0x40000400
 80019b0:	200001f0 	.word	0x200001f0
 80019b4:	457ff000 	.word	0x457ff000
 80019b8:	41a00000 	.word	0x41a00000
 80019bc:	447c8000 	.word	0x447c8000
 80019c0:	20000244 	.word	0x20000244
 80019c4:	3e42dcae 	.word	0x3e42dcae
 80019c8:	472d2a00 	.word	0x472d2a00
 80019cc:	08008d08 	.word	0x08008d08

080019d0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) {
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019e0:	d10c      	bne.n	80019fc <HAL_GPIO_EXTI_Callback+0x2c>
        static uint8_t start = 0;

        if (!start) {
 80019e2:	4b08      	ldr	r3, [pc, #32]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x34>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d108      	bne.n	80019fc <HAL_GPIO_EXTI_Callback+0x2c>
            start = 1;
 80019ea:	4b06      	ldr	r3, [pc, #24]	@ (8001a04 <HAL_GPIO_EXTI_Callback+0x34>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
            printf("BTN2 presse -> lancement des mesures\n");
 80019f0:	4805      	ldr	r0, [pc, #20]	@ (8001a08 <HAL_GPIO_EXTI_Callback+0x38>)
 80019f2:	f004 fd31 	bl	8006458 <puts>
            HAL_TIM_Base_Start_IT(&htim3);  // 🔥 lancement du timer
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <HAL_GPIO_EXTI_Callback+0x3c>)
 80019f8:	f003 f9bc 	bl	8004d74 <HAL_TIM_Base_Start_IT>
        }
    }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000320 	.word	0x20000320
 8001a08:	08008d10 	.word	0x08008d10
 8001a0c:	20000298 	.word	0x20000298

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	bf00      	nop
 8001a1a:	e7fd      	b.n	8001a18 <Error_Handler+0x8>

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	4a14      	ldr	r2, [pc, #80]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001a2c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6213      	str	r3, [r2, #32]
 8001a46:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a56:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_MspInit+0x5c>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a6a:	2007      	movs	r0, #7
 8001a6c:	f000 fff8 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800

08001a7c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08a      	sub	sp, #40	@ 0x28
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a15      	ldr	r2, [pc, #84]	@ (8001af0 <HAL_ADC_MspInit+0x74>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d123      	bne.n	8001ae6 <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a9e:	4b15      	ldr	r3, [pc, #84]	@ (8001af4 <HAL_ADC_MspInit+0x78>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <HAL_ADC_MspInit+0x78>)
 8001aa4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_ADC_MspInit+0x78>)
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8001af4 <HAL_ADC_MspInit+0x78>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a0e      	ldr	r2, [pc, #56]	@ (8001af4 <HAL_ADC_MspInit+0x78>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	61d3      	str	r3, [r2, #28]
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <HAL_ADC_MspInit+0x78>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	@ (8001af8 <HAL_ADC_MspInit+0x7c>)
 8001ae2:	f000 ffff 	bl	8002ae4 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ae6:	bf00      	nop
 8001ae8:	3728      	adds	r7, #40	@ 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40012400 	.word	0x40012400
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40020000 	.word	0x40020000

08001afc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a17      	ldr	r2, [pc, #92]	@ (8001b78 <HAL_I2C_MspInit+0x7c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d128      	bne.n	8001b70 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1e:	4b17      	ldr	r3, [pc, #92]	@ (8001b7c <HAL_I2C_MspInit+0x80>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	4a16      	ldr	r2, [pc, #88]	@ (8001b7c <HAL_I2C_MspInit+0x80>)
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	61d3      	str	r3, [r2, #28]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_I2C_MspInit+0x80>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b44:	2303      	movs	r3, #3
 8001b46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b48:	2304      	movs	r3, #4
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4619      	mov	r1, r3
 8001b52:	480b      	ldr	r0, [pc, #44]	@ (8001b80 <HAL_I2C_MspInit+0x84>)
 8001b54:	f000 ffc6 	bl	8002ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <HAL_I2C_MspInit+0x80>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5c:	4a07      	ldr	r2, [pc, #28]	@ (8001b7c <HAL_I2C_MspInit+0x80>)
 8001b5e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b62:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_I2C_MspInit+0x80>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b70:	bf00      	nop
 8001b72:	3728      	adds	r7, #40	@ 0x28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020400 	.word	0x40020400

08001b84 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0d      	ldr	r2, [pc, #52]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x44>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d113      	bne.n	8001bbe <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b96:	4b0d      	ldr	r3, [pc, #52]	@ (8001bcc <HAL_TIM_Base_MspInit+0x48>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001bcc <HAL_TIM_Base_MspInit+0x48>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bcc <HAL_TIM_Base_MspInit+0x48>)
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	201d      	movs	r0, #29
 8001bb4:	f000 ff5f 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bb8:	201d      	movs	r0, #29
 8001bba:	f000 ff78 	bl	8002aae <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40000400 	.word	0x40000400
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	@ 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a17      	ldr	r2, [pc, #92]	@ (8001c4c <HAL_UART_MspInit+0x7c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d127      	bne.n	8001c42 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <HAL_UART_MspInit+0x80>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	4a16      	ldr	r2, [pc, #88]	@ (8001c50 <HAL_UART_MspInit+0x80>)
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bfc:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bfe:	4b14      	ldr	r3, [pc, #80]	@ (8001c50 <HAL_UART_MspInit+0x80>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <HAL_UART_MspInit+0x80>)
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	4a10      	ldr	r2, [pc, #64]	@ (8001c50 <HAL_UART_MspInit+0x80>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	61d3      	str	r3, [r2, #28]
 8001c16:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <HAL_UART_MspInit+0x80>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c22:	230c      	movs	r3, #12
 8001c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c32:	2307      	movs	r3, #7
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	@ (8001c54 <HAL_UART_MspInit+0x84>)
 8001c3e:	f000 ff51 	bl	8002ae4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c42:	bf00      	nop
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40004400 	.word	0x40004400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020000 	.word	0x40020000

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <MemManage_Handler+0x4>

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr

08001c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca8:	f000 f958 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cb4:	4802      	ldr	r0, [pc, #8]	@ (8001cc0 <TIM3_IRQHandler+0x10>)
 8001cb6:	f003 f8af 	bl	8004e18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000298 	.word	0x20000298

08001cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8001cc8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001ccc:	f001 f8b2 	bl	8002e34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cd0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001cd4:	f001 f8ae 	bl	8002e34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return 1;
 8001ce0:	2301      	movs	r3, #1
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <_kill>:

int _kill(int pid, int sig)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cf4:	f004 fbc0 	bl	8006478 <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2216      	movs	r2, #22
 8001cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_exit>:

void _exit (int status)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff ffe7 	bl	8001cea <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d1c:	bf00      	nop
 8001d1e:	e7fd      	b.n	8001d1c <_exit+0x12>

08001d20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	e00a      	b.n	8001d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d32:	f3af 8000 	nop.w
 8001d36:	4601      	mov	r1, r0
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	b2ca      	uxtb	r2, r1
 8001d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3301      	adds	r3, #1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	dbf0      	blt.n	8001d32 <_read+0x12>
  }

  return len;
 8001d50:	687b      	ldr	r3, [r7, #4]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	60f8      	str	r0, [r7, #12]
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	e009      	b.n	8001d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	60ba      	str	r2, [r7, #8]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fd2b 	bl	80017d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dbf1      	blt.n	8001d6c <_write+0x12>
  }
  return len;
 8001d88:	687b      	ldr	r3, [r7, #4]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <_close>:

int _close(int file)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001db8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr

08001dc6 <_isatty>:

int _isatty(int file)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dce:	2301      	movs	r3, #1
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b085      	sub	sp, #20
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
	...

08001df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <_sbrk+0x5c>)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	@ (8001e54 <_sbrk+0x60>)
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e08:	4b13      	ldr	r3, [pc, #76]	@ (8001e58 <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e10:	4b11      	ldr	r3, [pc, #68]	@ (8001e58 <_sbrk+0x64>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	@ (8001e5c <_sbrk+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e16:	4b10      	ldr	r3, [pc, #64]	@ (8001e58 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d207      	bcs.n	8001e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e24:	f004 fb28 	bl	8006478 <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e32:	e009      	b.n	8001e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a05      	ldr	r2, [pc, #20]	@ (8001e58 <_sbrk+0x64>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20014000 	.word	0x20014000
 8001e54:	00000400 	.word	0x00000400
 8001e58:	20000324 	.word	0x20000324
 8001e5c:	20000478 	.word	0x20000478

08001e60 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr

08001e6c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e6c:	f7ff fff8 	bl	8001e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480b      	ldr	r0, [pc, #44]	@ (8001ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e72:	490c      	ldr	r1, [pc, #48]	@ (8001ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a09      	ldr	r2, [pc, #36]	@ (8001eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e88:	4c09      	ldr	r4, [pc, #36]	@ (8001eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e96:	f004 faf5 	bl	8006484 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9a:	f7ff fa91 	bl	80013c0 <main>
  bx lr
 8001e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ea8:	08009104 	.word	0x08009104
  ldr r2, =_sbss
 8001eac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001eb0:	20000478 	.word	0x20000478

08001eb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC1_IRQHandler>

08001eb6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f000 fdcd 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f000 f80e 	bl	8001ee8 <HAL_InitTick>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	71fb      	strb	r3, [r7, #7]
 8001ed6:	e001      	b.n	8001edc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ed8:	f7ff fda0 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001edc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
	...

08001ee8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <HAL_InitTick+0x68>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d022      	beq.n	8001f42 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <HAL_InitTick+0x6c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b13      	ldr	r3, [pc, #76]	@ (8001f50 <HAL_InitTick+0x68>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f08:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fdda 	bl	8002aca <HAL_SYSTICK_Config>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10f      	bne.n	8001f3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	d809      	bhi.n	8001f36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f22:	2200      	movs	r2, #0
 8001f24:	6879      	ldr	r1, [r7, #4]
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f2a:	f000 fda4 	bl	8002a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f58 <HAL_InitTick+0x70>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e007      	b.n	8001f46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
 8001f3a:	e004      	b.n	8001f46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000008 	.word	0x20000008
 8001f54:	20000000 	.word	0x20000000
 8001f58:	20000004 	.word	0x20000004

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <HAL_IncTick+0x1c>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <HAL_IncTick+0x20>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a03      	ldr	r2, [pc, #12]	@ (8001f78 <HAL_IncTick+0x1c>)
 8001f6c:	6013      	str	r3, [r2, #0]
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000328 	.word	0x20000328
 8001f7c:	20000008 	.word	0x20000008

08001f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return uwTick;
 8001f84:	4b02      	ldr	r3, [pc, #8]	@ (8001f90 <HAL_GetTick+0x10>)
 8001f86:	681b      	ldr	r3, [r3, #0]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	20000328 	.word	0x20000328

08001f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff fff0 	bl	8001f80 <HAL_GetTick>
 8001fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fac:	d004      	beq.n	8001fb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_Delay+0x40>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fb8:	bf00      	nop
 8001fba:	f7ff ffe1 	bl	8001f80 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d8f7      	bhi.n	8001fba <HAL_Delay+0x26>
  {
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	20000008 	.word	0x20000008

08001fd8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	@ 0x38
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e127      	b.n	8002248 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	2b00      	cmp	r3, #0
 8002004:	d115      	bne.n	8002032 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002014:	4b8e      	ldr	r3, [pc, #568]	@ (8002250 <HAL_ADC_Init+0x278>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a8d      	ldr	r2, [pc, #564]	@ (8002250 <HAL_ADC_Init+0x278>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6213      	str	r3, [r2, #32]
 8002020:	4b8b      	ldr	r3, [pc, #556]	@ (8002250 <HAL_ADC_Init+0x278>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fd25 	bl	8001a7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 80ff 	bne.w	800223e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002044:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002048:	f023 0302 	bic.w	r3, r3, #2
 800204c:	f043 0202 	orr.w	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002054:	4b7f      	ldr	r3, [pc, #508]	@ (8002254 <HAL_ADC_Init+0x27c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	497c      	ldr	r1, [pc, #496]	@ (8002254 <HAL_ADC_Init+0x27c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800206e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002076:	4619      	mov	r1, r3
 8002078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002092:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002098:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	2302      	movs	r3, #2
 80020a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a8:	fa93 f3a3 	rbit	r3, r3
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80020ba:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80020bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020be:	4313      	orrs	r3, r2
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c6:	2b10      	cmp	r3, #16
 80020c8:	d007      	beq.n	80020da <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020d6:	4313      	orrs	r3, r2
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e4:	2b40      	cmp	r3, #64	@ 0x40
 80020e6:	d04f      	beq.n	8002188 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020ee:	4313      	orrs	r3, r2
 80020f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80020fa:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6912      	ldr	r2, [r2, #16]
 8002100:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002104:	d003      	beq.n	800210e <HAL_ADC_Init+0x136>
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6912      	ldr	r2, [r2, #16]
 800210a:	2a01      	cmp	r2, #1
 800210c:	d102      	bne.n	8002114 <HAL_ADC_Init+0x13c>
 800210e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002112:	e000      	b.n	8002116 <HAL_ADC_Init+0x13e>
 8002114:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002116:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002118:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800211a:	4313      	orrs	r3, r2
 800211c:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d125      	bne.n	8002174 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800212e:	2b00      	cmp	r3, #0
 8002130:	d114      	bne.n	800215c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	3b01      	subs	r3, #1
 8002138:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 800213c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	fa92 f2a2 	rbit	r2, r2
 8002144:	617a      	str	r2, [r7, #20]
  return result;
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	fab2 f282 	clz	r2, r2
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4093      	lsls	r3, r2
 8002150:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002156:	4313      	orrs	r3, r2
 8002158:	633b      	str	r3, [r7, #48]	@ 0x30
 800215a:	e00b      	b.n	8002174 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216c:	f043 0201 	orr.w	r2, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4b37      	ldr	r3, [pc, #220]	@ (8002258 <HAL_ADC_Init+0x280>)
 800217c:	4013      	ands	r3, r2
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002184:	430b      	orrs	r3, r1
 8002186:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	4b33      	ldr	r3, [pc, #204]	@ (800225c <HAL_ADC_Init+0x284>)
 8002190:	4013      	ands	r3, r2
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	6812      	ldr	r2, [r2, #0]
 8002196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a4:	d003      	beq.n	80021ae <HAL_ADC_Init+0x1d6>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d119      	bne.n	80021e2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80021c2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	fa92 f2a2 	rbit	r2, r2
 80021ca:	60fa      	str	r2, [r7, #12]
  return result;
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	fab2 f282 	clz	r2, r2
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	fa03 f202 	lsl.w	r2, r3, r2
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30
 80021e0:	e007      	b.n	80021f2 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 80021f0:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	4b19      	ldr	r3, [pc, #100]	@ (8002260 <HAL_ADC_Init+0x288>)
 80021fa:	4013      	ands	r3, r2
 80021fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021fe:	429a      	cmp	r2, r3
 8002200:	d10b      	bne.n	800221a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800220c:	f023 0303 	bic.w	r3, r3, #3
 8002210:	f043 0201 	orr.w	r2, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002218:	e014      	b.n	8002244 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221e:	f023 0312 	bic.w	r3, r3, #18
 8002222:	f043 0210 	orr.w	r2, r3, #16
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800222e:	f043 0201 	orr.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800223c:	e002      	b.n	8002244 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002244:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8002248:	4618      	mov	r0, r3
 800224a:	3738      	adds	r7, #56	@ 0x38
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40023800 	.word	0x40023800
 8002254:	40012700 	.word	0x40012700
 8002258:	fcfc16ff 	.word	0xfcfc16ff
 800225c:	c0fff189 	.word	0xc0fff189
 8002260:	bf80fffe 	.word	0xbf80fffe

08002264 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800226c:	2300      	movs	r3, #0
 800226e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_ADC_Start+0x1a>
 800227a:	2302      	movs	r3, #2
 800227c:	e04e      	b.n	800231c <HAL_ADC_Start+0xb8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 fa80 	bl	800278c <ADC_Enable>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d141      	bne.n	800231a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800229e:	f023 0301 	bic.w	r3, r3, #1
 80022a2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d007      	beq.n	80022c8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80022c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d4:	d106      	bne.n	80022e4 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80022da:	f023 0206 	bic.w	r2, r3, #6
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	651a      	str	r2, [r3, #80]	@ 0x50
 80022e2:	e002      	b.n	80022ea <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80022fa:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d107      	bne.n	800231a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002318:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_ADC_Stop+0x1a>
 800233a:	2302      	movs	r3, #2
 800233c:	e01a      	b.n	8002374 <HAL_ADC_Stop+0x50>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f000 fa7c 	bl	8002844 <ADC_ConversionStop_Disable>
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	f043 0201 	orr.w	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	64da      	str	r2, [r3, #76]	@ 0x4c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002372:	7bfb      	ldrb	r3, [r7, #15]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002398:	d113      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80023a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023a8:	d10b      	bne.n	80023c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	f043 0220 	orr.w	r2, r3, #32
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e068      	b.n	8002494 <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80023c2:	f7ff fddd 	bl	8001f80 <HAL_GetTick>
 80023c6:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023c8:	e021      	b.n	800240e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d0:	d01d      	beq.n	800240e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d007      	beq.n	80023e8 <HAL_ADC_PollForConversion+0x6c>
 80023d8:	f7ff fdd2 	bl	8001f80 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d212      	bcs.n	800240e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10b      	bne.n	800240e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023fa:	f043 0204 	orr.w	r2, r3, #4
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e042      	b.n	8002494 <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0d6      	beq.n	80023ca <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0212 	mvn.w	r2, #18
 800242c:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d124      	bne.n	8002492 <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244e:	2b00      	cmp	r3, #0
 8002450:	d11f      	bne.n	8002492 <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002458:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d006      	beq.n	800246e <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800246a:	2b00      	cmp	r3, #0
 800246c:	d111      	bne.n	8002492 <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002472:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248a:	f043 0201 	orr.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d101      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x20>
 80024d0:	2302      	movs	r3, #2
 80024d2:	e14f      	b.n	8002774 <HAL_ADC_ConfigChannel+0x2c0>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d81c      	bhi.n	800251e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	4613      	mov	r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	3b05      	subs	r3, #5
 80024f6:	221f      	movs	r2, #31
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	3b05      	subs	r3, #5
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	641a      	str	r2, [r3, #64]	@ 0x40
 800251c:	e07e      	b.n	800261c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d81c      	bhi.n	8002560 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4613      	mov	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	3b23      	subs	r3, #35	@ 0x23
 8002538:	221f      	movs	r2, #31
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	4019      	ands	r1, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	6818      	ldr	r0, [r3, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	3b23      	subs	r3, #35	@ 0x23
 8002552:	fa00 f203 	lsl.w	r2, r0, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800255e:	e05d      	b.n	800261c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b12      	cmp	r3, #18
 8002566:	d81c      	bhi.n	80025a2 <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	3b41      	subs	r3, #65	@ 0x41
 800257a:	221f      	movs	r2, #31
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	4019      	ands	r1, r3
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	3b41      	subs	r3, #65	@ 0x41
 8002594:	fa00 f203 	lsl.w	r2, r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	639a      	str	r2, [r3, #56]	@ 0x38
 80025a0:	e03c      	b.n	800261c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b18      	cmp	r3, #24
 80025a8:	d81c      	bhi.n	80025e4 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	3b5f      	subs	r3, #95	@ 0x5f
 80025bc:	221f      	movs	r2, #31
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	4019      	ands	r1, r3
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4413      	add	r3, r2
 80025d4:	3b5f      	subs	r3, #95	@ 0x5f
 80025d6:	fa00 f203 	lsl.w	r2, r0, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	430a      	orrs	r2, r1
 80025e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80025e2:	e01b      	b.n	800261c <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	3b7d      	subs	r3, #125	@ 0x7d
 80025f6:	221f      	movs	r2, #31
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	43db      	mvns	r3, r3
 80025fe:	4019      	ands	r1, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	3b7d      	subs	r3, #125	@ 0x7d
 8002610:	fa00 f203 	lsl.w	r2, r0, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b09      	cmp	r3, #9
 8002622:	d81a      	bhi.n	800265a <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6959      	ldr	r1, [r3, #20]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	2207      	movs	r2, #7
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	4019      	ands	r1, r3
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	6898      	ldr	r0, [r3, #8]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	fa00 f203 	lsl.w	r2, r0, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	615a      	str	r2, [r3, #20]
 8002658:	e05d      	b.n	8002716 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b13      	cmp	r3, #19
 8002660:	d81c      	bhi.n	800269c <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	6919      	ldr	r1, [r3, #16]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	4413      	add	r3, r2
 8002672:	3b1e      	subs	r3, #30
 8002674:	2207      	movs	r2, #7
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	4019      	ands	r1, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6898      	ldr	r0, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	4613      	mov	r3, r2
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	4413      	add	r3, r2
 800268c:	3b1e      	subs	r3, #30
 800268e:	fa00 f203 	lsl.w	r2, r0, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	430a      	orrs	r2, r1
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	e03c      	b.n	8002716 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b1d      	cmp	r3, #29
 80026a2:	d81c      	bhi.n	80026de <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68d9      	ldr	r1, [r3, #12]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	3b3c      	subs	r3, #60	@ 0x3c
 80026b6:	2207      	movs	r2, #7
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	4019      	ands	r1, r3
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	6898      	ldr	r0, [r3, #8]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	3b3c      	subs	r3, #60	@ 0x3c
 80026d0:	fa00 f203 	lsl.w	r2, r0, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	60da      	str	r2, [r3, #12]
 80026dc:	e01b      	b.n	8002716 <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	3b5a      	subs	r3, #90	@ 0x5a
 80026f0:	2207      	movs	r2, #7
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4019      	ands	r1, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6898      	ldr	r0, [r3, #8]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	3b5a      	subs	r3, #90	@ 0x5a
 800270a:	fa00 f203 	lsl.w	r2, r0, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2b10      	cmp	r3, #16
 800271c:	d003      	beq.n	8002726 <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002722:	2b11      	cmp	r3, #17
 8002724:	d121      	bne.n	800276a <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <HAL_ADC_ConfigChannel+0x2cc>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d11b      	bne.n	800276a <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002732:	4b13      	ldr	r3, [pc, #76]	@ (8002780 <HAL_ADC_ConfigChannel+0x2cc>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	4a12      	ldr	r2, [pc, #72]	@ (8002780 <HAL_ADC_ConfigChannel+0x2cc>)
 8002738:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800273c:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b10      	cmp	r3, #16
 8002744:	d111      	bne.n	800276a <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002746:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <HAL_ADC_ConfigChannel+0x2d0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a0f      	ldr	r2, [pc, #60]	@ (8002788 <HAL_ADC_ConfigChannel+0x2d4>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	0c9a      	lsrs	r2, r3, #18
 8002752:	4613      	mov	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800275c:	e002      	b.n	8002764 <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3b01      	subs	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002772:	7bfb      	ldrb	r3, [r7, #15]
}
 8002774:	4618      	mov	r0, r3
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40012700 	.word	0x40012700
 8002784:	20000000 	.word	0x20000000
 8002788:	431bde83 	.word	0x431bde83

0800278c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a6:	2b40      	cmp	r3, #64	@ 0x40
 80027a8:	d043      	beq.n	8002832 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0201 	orr.w	r2, r2, #1
 80027b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80027ba:	4b20      	ldr	r3, [pc, #128]	@ (800283c <ADC_Enable+0xb0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <ADC_Enable+0xb4>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	0c9a      	lsrs	r2, r3, #18
 80027c6:	4613      	mov	r3, r2
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	4413      	add	r3, r2
 80027cc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80027ce:	e002      	b.n	80027d6 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1f9      	bne.n	80027d0 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 80027dc:	f7ff fbd0 	bl	8001f80 <HAL_GetTick>
 80027e0:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80027e2:	e01f      	b.n	8002824 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80027e4:	f7ff fbcc 	bl	8001f80 <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d918      	bls.n	8002824 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fc:	2b40      	cmp	r3, #64	@ 0x40
 80027fe:	d011      	beq.n	8002824 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002804:	f043 0210 	orr.w	r2, r3, #16
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002810:	f043 0201 	orr.w	r2, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e007      	b.n	8002834 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b40      	cmp	r3, #64	@ 0x40
 8002830:	d1d8      	bne.n	80027e4 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000000 	.word	0x20000000
 8002840:	431bde83 	.word	0x431bde83

08002844 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b40      	cmp	r3, #64	@ 0x40
 800285c:	d12e      	bne.n	80028bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f022 0201 	bic.w	r2, r2, #1
 800286c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800286e:	f7ff fb87 	bl	8001f80 <HAL_GetTick>
 8002872:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */    
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002874:	e01b      	b.n	80028ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8002876:	f7ff fb83 	bl	8001f80 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d914      	bls.n	80028ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288e:	2b40      	cmp	r3, #64	@ 0x40
 8002890:	d10d      	bne.n	80028ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002896:	f043 0210 	orr.w	r2, r3, #16
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	64da      	str	r2, [r3, #76]	@ 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a2:	f043 0201 	orr.w	r2, r3, #1
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	651a      	str	r2, [r3, #80]	@ 0x50

          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e007      	b.n	80028be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b8:	2b40      	cmp	r3, #64	@ 0x40
 80028ba:	d0dc      	beq.n	8002876 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	@ (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293a:	2b00      	cmp	r3, #0
 800293c:	db0b      	blt.n	8002956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	4906      	ldr	r1, [pc, #24]	@ (8002960 <__NVIC_EnableIRQ+0x34>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2001      	movs	r0, #1
 800294e:	fa00 f202 	lsl.w	r2, r0, r2
 8002952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e100 	.word	0xe000e100

08002964 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	6039      	str	r1, [r7, #0]
 800296e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db0a      	blt.n	800298e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	b2da      	uxtb	r2, r3
 800297c:	490c      	ldr	r1, [pc, #48]	@ (80029b0 <__NVIC_SetPriority+0x4c>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	0112      	lsls	r2, r2, #4
 8002984:	b2d2      	uxtb	r2, r2
 8002986:	440b      	add	r3, r1
 8002988:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800298c:	e00a      	b.n	80029a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4908      	ldr	r1, [pc, #32]	@ (80029b4 <__NVIC_SetPriority+0x50>)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	3b04      	subs	r3, #4
 800299c:	0112      	lsls	r2, r2, #4
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	440b      	add	r3, r1
 80029a2:	761a      	strb	r2, [r3, #24]
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f1c3 0307 	rsb	r3, r3, #7
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	bf28      	it	cs
 80029d6:	2304      	movcs	r3, #4
 80029d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3304      	adds	r3, #4
 80029de:	2b06      	cmp	r3, #6
 80029e0:	d902      	bls.n	80029e8 <NVIC_EncodePriority+0x30>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3b03      	subs	r3, #3
 80029e6:	e000      	b.n	80029ea <NVIC_EncodePriority+0x32>
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43da      	mvns	r2, r3
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0a:	43d9      	mvns	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	4313      	orrs	r3, r2
         );
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3724      	adds	r7, #36	@ 0x24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	@ (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a40:	f7ff ff90 	bl	8002964 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	@ (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff2d 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff42 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff90 	bl	80029b8 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5f 	bl	8002964 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff35 	bl	800292c <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002afa:	e160      	b.n	8002dbe <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	fa01 f303 	lsl.w	r3, r1, r3
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8152 	beq.w	8002db8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d005      	beq.n	8002b2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d130      	bne.n	8002b8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002b62:	2201      	movs	r2, #1
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43db      	mvns	r3, r3
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	091b      	lsrs	r3, r3, #4
 8002b78:	f003 0201 	and.w	r2, r3, #1
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d017      	beq.n	8002bca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d123      	bne.n	8002c1e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	08da      	lsrs	r2, r3, #3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3208      	adds	r2, #8
 8002bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	6939      	ldr	r1, [r7, #16]
 8002c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	2203      	movs	r2, #3
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0203 	and.w	r2, r3, #3
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 80ac 	beq.w	8002db8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c60:	4b5e      	ldr	r3, [pc, #376]	@ (8002ddc <HAL_GPIO_Init+0x2f8>)
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	4a5d      	ldr	r2, [pc, #372]	@ (8002ddc <HAL_GPIO_Init+0x2f8>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6213      	str	r3, [r2, #32]
 8002c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ddc <HAL_GPIO_Init+0x2f8>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	60bb      	str	r3, [r7, #8]
 8002c76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c78:	4a59      	ldr	r2, [pc, #356]	@ (8002de0 <HAL_GPIO_Init+0x2fc>)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	089b      	lsrs	r3, r3, #2
 8002c7e:	3302      	adds	r3, #2
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a51      	ldr	r2, [pc, #324]	@ (8002de4 <HAL_GPIO_Init+0x300>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d025      	beq.n	8002cf0 <HAL_GPIO_Init+0x20c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a50      	ldr	r2, [pc, #320]	@ (8002de8 <HAL_GPIO_Init+0x304>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d01f      	beq.n	8002cec <HAL_GPIO_Init+0x208>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a4f      	ldr	r2, [pc, #316]	@ (8002dec <HAL_GPIO_Init+0x308>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d019      	beq.n	8002ce8 <HAL_GPIO_Init+0x204>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a4e      	ldr	r2, [pc, #312]	@ (8002df0 <HAL_GPIO_Init+0x30c>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d013      	beq.n	8002ce4 <HAL_GPIO_Init+0x200>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_GPIO_Init+0x310>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <HAL_GPIO_Init+0x1fc>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_GPIO_Init+0x314>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <HAL_GPIO_Init+0x1f8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a4b      	ldr	r2, [pc, #300]	@ (8002dfc <HAL_GPIO_Init+0x318>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d101      	bne.n	8002cd8 <HAL_GPIO_Init+0x1f4>
 8002cd4:	2306      	movs	r3, #6
 8002cd6:	e00c      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002cd8:	2307      	movs	r3, #7
 8002cda:	e00a      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002cdc:	2305      	movs	r3, #5
 8002cde:	e008      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	e006      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e004      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e002      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_GPIO_Init+0x20e>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	f002 0203 	and.w	r2, r2, #3
 8002cf8:	0092      	lsls	r2, r2, #2
 8002cfa:	4093      	lsls	r3, r2
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002d02:	4937      	ldr	r1, [pc, #220]	@ (8002de0 <HAL_GPIO_Init+0x2fc>)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d10:	4b3b      	ldr	r3, [pc, #236]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d34:	4a32      	ldr	r2, [pc, #200]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d3a:	4b31      	ldr	r3, [pc, #196]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	43db      	mvns	r3, r3
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	4013      	ands	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d5e:	4a28      	ldr	r2, [pc, #160]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d64:	4b26      	ldr	r3, [pc, #152]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4013      	ands	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d88:	4a1d      	ldr	r2, [pc, #116]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002db2:	4a13      	ldr	r2, [pc, #76]	@ (8002e00 <HAL_GPIO_Init+0x31c>)
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f47f ae97 	bne.w	8002afc <HAL_GPIO_Init+0x18>
  }
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40020000 	.word	0x40020000
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40020800 	.word	0x40020800
 8002df0:	40020c00 	.word	0x40020c00
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40021400 	.word	0x40021400
 8002dfc:	40021800 	.word	0x40021800
 8002e00:	40010400 	.word	0x40010400

08002e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	807b      	strh	r3, [r7, #2]
 8002e10:	4613      	mov	r3, r2
 8002e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e14:	787b      	ldrb	r3, [r7, #1]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e1a:	887a      	ldrh	r2, [r7, #2]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002e20:	e003      	b.n	8002e2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002e22:	887b      	ldrh	r3, [r7, #2]
 8002e24:	041a      	lsls	r2, r3, #16
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e3e:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	88fb      	ldrh	r3, [r7, #6]
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d006      	beq.n	8002e58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e50:	88fb      	ldrh	r3, [r7, #6]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fdbc 	bl	80019d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e12b      	b.n	80030ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d106      	bne.n	8002e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7fe fe36 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2224      	movs	r2, #36	@ 0x24
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0201 	bic.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ec8:	f001 fe8c 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8002ecc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	4a81      	ldr	r2, [pc, #516]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d807      	bhi.n	8002ee8 <HAL_I2C_Init+0x84>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4a80      	ldr	r2, [pc, #512]	@ (80030dc <HAL_I2C_Init+0x278>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	bf94      	ite	ls
 8002ee0:	2301      	movls	r3, #1
 8002ee2:	2300      	movhi	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	e006      	b.n	8002ef6 <HAL_I2C_Init+0x92>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4a7d      	ldr	r2, [pc, #500]	@ (80030e0 <HAL_I2C_Init+0x27c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	bf94      	ite	ls
 8002ef0:	2301      	movls	r3, #1
 8002ef2:	2300      	movhi	r3, #0
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e0e7      	b.n	80030ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4a78      	ldr	r2, [pc, #480]	@ (80030e4 <HAL_I2C_Init+0x280>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0c9b      	lsrs	r3, r3, #18
 8002f08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a6a      	ldr	r2, [pc, #424]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d802      	bhi.n	8002f38 <HAL_I2C_Init+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	e009      	b.n	8002f4c <HAL_I2C_Init+0xe8>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a69      	ldr	r2, [pc, #420]	@ (80030e8 <HAL_I2C_Init+0x284>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	099b      	lsrs	r3, r3, #6
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	430b      	orrs	r3, r1
 8002f52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f5e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	495c      	ldr	r1, [pc, #368]	@ (80030d8 <HAL_I2C_Init+0x274>)
 8002f68:	428b      	cmp	r3, r1
 8002f6a:	d819      	bhi.n	8002fa0 <HAL_I2C_Init+0x13c>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1e59      	subs	r1, r3, #1
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f7a:	1c59      	adds	r1, r3, #1
 8002f7c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f80:	400b      	ands	r3, r1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_I2C_Init+0x138>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	1e59      	subs	r1, r3, #1
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9a:	e051      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	e04f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d111      	bne.n	8002fcc <HAL_I2C_Init+0x168>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	440b      	add	r3, r1
 8002fb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	e012      	b.n	8002ff2 <HAL_I2C_Init+0x18e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	1e58      	subs	r0, r3, #1
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6859      	ldr	r1, [r3, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	0099      	lsls	r1, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf0c      	ite	eq
 8002fec:	2301      	moveq	r3, #1
 8002fee:	2300      	movne	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_I2C_Init+0x196>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10e      	bne.n	8003020 <HAL_I2C_Init+0x1bc>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1e58      	subs	r0, r3, #1
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6859      	ldr	r1, [r3, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	440b      	add	r3, r1
 8003010:	fbb0 f3f3 	udiv	r3, r0, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800301a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800301e:	e00f      	b.n	8003040 <HAL_I2C_Init+0x1dc>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1e58      	subs	r0, r3, #1
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	0099      	lsls	r1, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	fbb0 f3f3 	udiv	r3, r0, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	6809      	ldr	r1, [r1, #0]
 8003044:	4313      	orrs	r3, r2
 8003046:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800306e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	6911      	ldr	r1, [r2, #16]
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	68d2      	ldr	r2, [r2, #12]
 800307a:	4311      	orrs	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	695a      	ldr	r2, [r3, #20]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699b      	ldr	r3, [r3, #24]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0201 	orr.w	r2, r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3710      	adds	r7, #16
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	000186a0 	.word	0x000186a0
 80030dc:	001e847f 	.word	0x001e847f
 80030e0:	003d08ff 	.word	0x003d08ff
 80030e4:	431bde83 	.word	0x431bde83
 80030e8:	10624dd3 	.word	0x10624dd3

080030ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	4608      	mov	r0, r1
 80030f6:	4611      	mov	r1, r2
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	817b      	strh	r3, [r7, #10]
 80030fe:	460b      	mov	r3, r1
 8003100:	813b      	strh	r3, [r7, #8]
 8003102:	4613      	mov	r3, r2
 8003104:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003106:	f7fe ff3b 	bl	8001f80 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b20      	cmp	r3, #32
 8003116:	f040 80d9 	bne.w	80032cc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2319      	movs	r3, #25
 8003120:	2201      	movs	r2, #1
 8003122:	496d      	ldr	r1, [pc, #436]	@ (80032d8 <HAL_I2C_Mem_Write+0x1ec>)
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f000 fdb9 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
 8003132:	e0cc      	b.n	80032ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800313a:	2b01      	cmp	r3, #1
 800313c:	d101      	bne.n	8003142 <HAL_I2C_Mem_Write+0x56>
 800313e:	2302      	movs	r3, #2
 8003140:	e0c5      	b.n	80032ce <HAL_I2C_Mem_Write+0x1e2>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d007      	beq.n	8003168 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003176:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2221      	movs	r2, #33	@ 0x21
 800317c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2240      	movs	r2, #64	@ 0x40
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a3a      	ldr	r2, [r7, #32]
 8003192:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003198:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4a4d      	ldr	r2, [pc, #308]	@ (80032dc <HAL_I2C_Mem_Write+0x1f0>)
 80031a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031aa:	88f8      	ldrh	r0, [r7, #6]
 80031ac:	893a      	ldrh	r2, [r7, #8]
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	9301      	str	r3, [sp, #4]
 80031b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4603      	mov	r3, r0
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fbf0 	bl	80039a0 <I2C_RequestMemoryWrite>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d052      	beq.n	800326c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e081      	b.n	80032ce <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fe7e 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00d      	beq.n	80031f6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031de:	2b04      	cmp	r3, #4
 80031e0:	d107      	bne.n	80031f2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e06b      	b.n	80032ce <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b04      	cmp	r3, #4
 8003232:	d11b      	bne.n	800326c <HAL_I2C_Mem_Write+0x180>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	2b00      	cmp	r3, #0
 800323a:	d017      	beq.n	800326c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003256:	3b01      	subs	r3, #1
 8003258:	b29a      	uxth	r2, r3
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1aa      	bne.n	80031ca <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fe71 	bl	8003f60 <I2C_WaitOnBTFFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00d      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	2b04      	cmp	r3, #4
 800328a:	d107      	bne.n	800329c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e016      	b.n	80032ce <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2220      	movs	r2, #32
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e000      	b.n	80032ce <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032cc:	2302      	movs	r3, #2
  }
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3718      	adds	r7, #24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	00100002 	.word	0x00100002
 80032dc:	ffff0000 	.word	0xffff0000

080032e0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08c      	sub	sp, #48	@ 0x30
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	4603      	mov	r3, r0
 80032f0:	817b      	strh	r3, [r7, #10]
 80032f2:	460b      	mov	r3, r1
 80032f4:	813b      	strh	r3, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032fa:	f7fe fe41 	bl	8001f80 <HAL_GetTick>
 80032fe:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b20      	cmp	r3, #32
 800330a:	f040 8214 	bne.w	8003736 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2319      	movs	r3, #25
 8003314:	2201      	movs	r2, #1
 8003316:	497b      	ldr	r1, [pc, #492]	@ (8003504 <HAL_I2C_Mem_Read+0x224>)
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fcbf 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
 8003326:	e207      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_I2C_Mem_Read+0x56>
 8003332:	2302      	movs	r3, #2
 8003334:	e200      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b01      	cmp	r3, #1
 800334a:	d007      	beq.n	800335c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800336a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2222      	movs	r2, #34	@ 0x22
 8003370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2240      	movs	r2, #64	@ 0x40
 8003378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003386:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800338c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_I2C_Mem_Read+0x228>)
 800339c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800339e:	88f8      	ldrh	r0, [r7, #6]
 80033a0:	893a      	ldrh	r2, [r7, #8]
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	9301      	str	r3, [sp, #4]
 80033a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4603      	mov	r3, r0
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 fb8c 	bl	8003acc <I2C_RequestMemoryRead>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e1bc      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d113      	bne.n	80033ee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	623b      	str	r3, [r7, #32]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e190      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d11b      	bne.n	800342e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	61fb      	str	r3, [r7, #28]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e170      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003432:	2b02      	cmp	r3, #2
 8003434:	d11b      	bne.n	800346e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003444:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003454:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003456:	2300      	movs	r3, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	e150      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003484:	e144      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	2b03      	cmp	r3, #3
 800348c:	f200 80f1 	bhi.w	8003672 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003494:	2b01      	cmp	r3, #1
 8003496:	d123      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800349a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fda7 	bl	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d001      	beq.n	80034ac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e145      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691a      	ldr	r2, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80034de:	e117      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d14e      	bne.n	8003586 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ee:	2200      	movs	r2, #0
 80034f0:	4906      	ldr	r1, [pc, #24]	@ (800350c <HAL_I2C_Mem_Read+0x22c>)
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fbd2 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e11a      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
 8003502:	bf00      	nop
 8003504:	00100002 	.word	0x00100002
 8003508:	ffff0000 	.word	0xffff0000
 800350c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	691a      	ldr	r2, [r3, #16]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003584:	e0c4      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800358c:	2200      	movs	r2, #0
 800358e:	496c      	ldr	r1, [pc, #432]	@ (8003740 <HAL_I2C_Mem_Read+0x460>)
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f000 fb83 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0cb      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035cc:	3b01      	subs	r3, #1
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035d8:	b29b      	uxth	r3, r3
 80035da:	3b01      	subs	r3, #1
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e8:	2200      	movs	r2, #0
 80035ea:	4955      	ldr	r1, [pc, #340]	@ (8003740 <HAL_I2C_Mem_Read+0x460>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 fb55 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e09d      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800360a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003616:	b2d2      	uxtb	r2, r2
 8003618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	691a      	ldr	r2, [r3, #16]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003650:	1c5a      	adds	r2, r3, #1
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800365a:	3b01      	subs	r3, #1
 800365c:	b29a      	uxth	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003670:	e04e      	b.n	8003710 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003674:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fcba 	bl	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e058      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	691a      	ldr	r2, [r3, #16]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a2:	3b01      	subs	r3, #1
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d124      	bne.n	8003710 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	b2d2      	uxtb	r2, r2
 80036ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003714:	2b00      	cmp	r3, #0
 8003716:	f47f aeb6 	bne.w	8003486 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	e000      	b.n	8003738 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003736:	2302      	movs	r3, #2
  }
}
 8003738:	4618      	mov	r0, r3
 800373a:	3728      	adds	r7, #40	@ 0x28
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	00010004 	.word	0x00010004

08003744 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08a      	sub	sp, #40	@ 0x28
 8003748:	af02      	add	r7, sp, #8
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	460b      	mov	r3, r1
 8003752:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7fe fc14 	bl	8001f80 <HAL_GetTick>
 8003758:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b20      	cmp	r3, #32
 8003768:	f040 8111 	bne.w	800398e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	9300      	str	r3, [sp, #0]
 8003770:	2319      	movs	r3, #25
 8003772:	2201      	movs	r2, #1
 8003774:	4988      	ldr	r1, [pc, #544]	@ (8003998 <HAL_I2C_IsDeviceReady+0x254>)
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 fa90 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
 8003784:	e104      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_I2C_IsDeviceReady+0x50>
 8003790:	2302      	movs	r3, #2
 8003792:	e0fd      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d007      	beq.n	80037ba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2224      	movs	r2, #36	@ 0x24
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a70      	ldr	r2, [pc, #448]	@ (800399c <HAL_I2C_IsDeviceReady+0x258>)
 80037dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa4e 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003814:	d103      	bne.n	800381e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800381c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0b6      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003830:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003832:	f7fe fba5 	bl	8001f80 <HAL_GetTick>
 8003836:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b02      	cmp	r3, #2
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003866:	e025      	b.n	80038b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003868:	f7fe fb8a 	bl	8001f80 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d302      	bcc.n	800387e <HAL_I2C_IsDeviceReady+0x13a>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d103      	bne.n	8003886 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	22a0      	movs	r2, #160	@ 0xa0
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80038be:	d005      	beq.n	80038cc <HAL_I2C_IsDeviceReady+0x188>
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_I2C_IsDeviceReady+0x188>
 80038c6:	7dbb      	ldrb	r3, [r7, #22]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0cd      	beq.n	8003868 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d129      	bne.n	8003936 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038f0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	613b      	str	r3, [r7, #16]
 8003906:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	2319      	movs	r3, #25
 800390e:	2201      	movs	r2, #1
 8003910:	4921      	ldr	r1, [pc, #132]	@ (8003998 <HAL_I2C_IsDeviceReady+0x254>)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f9c2 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e036      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e02c      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003944:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800394e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2319      	movs	r3, #25
 8003956:	2201      	movs	r2, #1
 8003958:	490f      	ldr	r1, [pc, #60]	@ (8003998 <HAL_I2C_IsDeviceReady+0x254>)
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f99e 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e012      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3301      	adds	r3, #1
 800396e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	429a      	cmp	r2, r3
 8003976:	f4ff af32 	bcc.w	80037de <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	00100002 	.word	0x00100002
 800399c:	ffff0000 	.word	0xffff0000

080039a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80039c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	6a3b      	ldr	r3, [r7, #32]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f960 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039f0:	d103      	bne.n	80039fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e05f      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039fe:	897b      	ldrh	r3, [r7, #10]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	461a      	mov	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003a0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	492d      	ldr	r1, [pc, #180]	@ (8003ac8 <I2C_RequestMemoryWrite+0x128>)
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f9bb 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d001      	beq.n	8003a24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e04c      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3c:	6a39      	ldr	r1, [r7, #32]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 fa46 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00d      	beq.n	8003a66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d107      	bne.n	8003a62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e02b      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a66:	88fb      	ldrh	r3, [r7, #6]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d105      	bne.n	8003a78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a6c:	893b      	ldrh	r3, [r7, #8]
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]
 8003a76:	e021      	b.n	8003abc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a78:	893b      	ldrh	r3, [r7, #8]
 8003a7a:	0a1b      	lsrs	r3, r3, #8
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a88:	6a39      	ldr	r1, [r7, #32]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fa20 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00d      	beq.n	8003ab2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d107      	bne.n	8003aae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e005      	b.n	8003abe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ab2:	893b      	ldrh	r3, [r7, #8]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	00010002 	.word	0x00010002

08003acc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	4608      	mov	r0, r1
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4603      	mov	r3, r0
 8003adc:	817b      	strh	r3, [r7, #10]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	813b      	strh	r3, [r7, #8]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003af4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 f8c2 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b2c:	d103      	bne.n	8003b36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b34:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e0aa      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b3a:	897b      	ldrh	r3, [r7, #10]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	4952      	ldr	r1, [pc, #328]	@ (8003c98 <I2C_RequestMemoryRead+0x1cc>)
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f91d 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e097      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	695b      	ldr	r3, [r3, #20]
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699b      	ldr	r3, [r3, #24]
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b78:	6a39      	ldr	r1, [r7, #32]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f9a8 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00d      	beq.n	8003ba2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d107      	bne.n	8003b9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e076      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ba8:	893b      	ldrh	r3, [r7, #8]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]
 8003bb2:	e021      	b.n	8003bf8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003bb4:	893b      	ldrh	r3, [r7, #8]
 8003bb6:	0a1b      	lsrs	r3, r3, #8
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc4:	6a39      	ldr	r1, [r7, #32]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 f982 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00d      	beq.n	8003bee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d107      	bne.n	8003bea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e050      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bee:	893b      	ldrh	r3, [r7, #8]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bfa:	6a39      	ldr	r1, [r7, #32]
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f967 	bl	8003ed0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00d      	beq.n	8003c24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d107      	bne.n	8003c20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e035      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f000 f82b 	bl	8003c9c <I2C_WaitOnFlagUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00d      	beq.n	8003c68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c5a:	d103      	bne.n	8003c64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c62:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e013      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c68:	897b      	ldrh	r3, [r7, #10]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	4906      	ldr	r1, [pc, #24]	@ (8003c98 <I2C_RequestMemoryRead+0x1cc>)
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f886 	bl	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	00010002 	.word	0x00010002

08003c9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	603b      	str	r3, [r7, #0]
 8003ca8:	4613      	mov	r3, r2
 8003caa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cac:	e048      	b.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cb4:	d044      	beq.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb6:	f7fe f963 	bl	8001f80 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d302      	bcc.n	8003ccc <I2C_WaitOnFlagUntilTimeout+0x30>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d139      	bne.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	0c1b      	lsrs	r3, r3, #16
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d10d      	bne.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	e00c      	b.n	8003d0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	43da      	mvns	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	bf0c      	ite	eq
 8003d04:	2301      	moveq	r3, #1
 8003d06:	2300      	movne	r3, #0
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	79fb      	ldrb	r3, [r7, #7]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d116      	bne.n	8003d40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	f043 0220 	orr.w	r2, r3, #32
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e023      	b.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	0c1b      	lsrs	r3, r3, #16
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10d      	bne.n	8003d66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	43da      	mvns	r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	4013      	ands	r3, r2
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	e00c      	b.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	4013      	ands	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	461a      	mov	r2, r3
 8003d80:	79fb      	ldrb	r3, [r7, #7]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d093      	beq.n	8003cae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d9e:	e071      	b.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dae:	d123      	bne.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	f043 0204 	orr.w	r2, r3, #4
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e067      	b.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dfe:	d041      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e00:	f7fe f8be 	bl	8001f80 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d302      	bcc.n	8003e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d136      	bne.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d10c      	bne.n	8003e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	43da      	mvns	r2, r3
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2301      	movne	r3, #1
 8003e34:	2300      	moveq	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e00b      	b.n	8003e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	43da      	mvns	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d016      	beq.n	8003e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e021      	b.n	8003ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	0c1b      	lsrs	r3, r3, #16
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d10c      	bne.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	43da      	mvns	r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	bf14      	ite	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	2300      	moveq	r3, #0
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	e00b      	b.n	8003ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	43da      	mvns	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	bf14      	ite	ne
 8003eba:	2301      	movne	r3, #1
 8003ebc:	2300      	moveq	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f af6d 	bne.w	8003da0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003edc:	e034      	b.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8e3 	bl	80040aa <I2C_IsAcknowledgeFailed>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e034      	b.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ef4:	d028      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef6:	f7fe f843 	bl	8001f80 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d302      	bcc.n	8003f0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d11d      	bne.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f16:	2b80      	cmp	r3, #128	@ 0x80
 8003f18:	d016      	beq.n	8003f48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2220      	movs	r2, #32
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	f043 0220 	orr.w	r2, r3, #32
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d1c3      	bne.n	8003ede <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f6c:	e034      	b.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f89b 	bl	80040aa <I2C_IsAcknowledgeFailed>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e034      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f84:	d028      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fd fffb 	bl	8001f80 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d11d      	bne.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d016      	beq.n	8003fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	f043 0220 	orr.w	r2, r3, #32
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e007      	b.n	8003fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d1c3      	bne.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ffc:	e049      	b.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 0310 	and.w	r3, r3, #16
 8004008:	2b10      	cmp	r3, #16
 800400a:	d119      	bne.n	8004040 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f06f 0210 	mvn.w	r2, #16
 8004014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e030      	b.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004040:	f7fd ff9e 	bl	8001f80 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	d302      	bcc.n	8004056 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d11d      	bne.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
 800405c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004060:	2b40      	cmp	r3, #64	@ 0x40
 8004062:	d016      	beq.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e007      	b.n	80040a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b40      	cmp	r3, #64	@ 0x40
 800409e:	d1ae      	bne.n	8003ffe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b083      	sub	sp, #12
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c0:	d11b      	bne.n	80040fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e6:	f043 0204 	orr.w	r2, r3, #4
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
	...

08004108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e31d      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411a:	4b94      	ldr	r3, [pc, #592]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004124:	4b91      	ldr	r3, [pc, #580]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800412c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d07b      	beq.n	8004232 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d006      	beq.n	800414e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	2b0c      	cmp	r3, #12
 8004144:	d10f      	bne.n	8004166 <HAL_RCC_OscConfig+0x5e>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800414c:	d10b      	bne.n	8004166 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414e:	4b87      	ldr	r3, [pc, #540]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d06a      	beq.n	8004230 <HAL_RCC_OscConfig+0x128>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d166      	bne.n	8004230 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e2f7      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d106      	bne.n	800417c <HAL_RCC_OscConfig+0x74>
 800416e:	4b7f      	ldr	r3, [pc, #508]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a7e      	ldr	r2, [pc, #504]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	e02d      	b.n	80041d8 <HAL_RCC_OscConfig+0xd0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10c      	bne.n	800419e <HAL_RCC_OscConfig+0x96>
 8004184:	4b79      	ldr	r3, [pc, #484]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a78      	ldr	r2, [pc, #480]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 800418a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800418e:	6013      	str	r3, [r2, #0]
 8004190:	4b76      	ldr	r3, [pc, #472]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a75      	ldr	r2, [pc, #468]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	e01c      	b.n	80041d8 <HAL_RCC_OscConfig+0xd0>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d10c      	bne.n	80041c0 <HAL_RCC_OscConfig+0xb8>
 80041a6:	4b71      	ldr	r3, [pc, #452]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a70      	ldr	r2, [pc, #448]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	4b6e      	ldr	r3, [pc, #440]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a6d      	ldr	r2, [pc, #436]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041bc:	6013      	str	r3, [r2, #0]
 80041be:	e00b      	b.n	80041d8 <HAL_RCC_OscConfig+0xd0>
 80041c0:	4b6a      	ldr	r3, [pc, #424]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a69      	ldr	r2, [pc, #420]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ca:	6013      	str	r3, [r2, #0]
 80041cc:	4b67      	ldr	r3, [pc, #412]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a66      	ldr	r2, [pc, #408]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d013      	beq.n	8004208 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fd fece 	bl	8001f80 <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fd feca 	bl	8001f80 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	@ 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e2ad      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041fa:	4b5c      	ldr	r3, [pc, #368]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d0f0      	beq.n	80041e8 <HAL_RCC_OscConfig+0xe0>
 8004206:	e014      	b.n	8004232 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd feba 	bl	8001f80 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd feb6 	bl	8001f80 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	@ 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e299      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004222:	4b52      	ldr	r3, [pc, #328]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x108>
 800422e:	e000      	b.n	8004232 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d05a      	beq.n	80042f4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d005      	beq.n	8004250 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b0c      	cmp	r3, #12
 8004248:	d119      	bne.n	800427e <HAL_RCC_OscConfig+0x176>
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d116      	bne.n	800427e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004250:	4b46      	ldr	r3, [pc, #280]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <HAL_RCC_OscConfig+0x160>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d001      	beq.n	8004268 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e276      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004268:	4b40      	ldr	r3, [pc, #256]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	493d      	ldr	r1, [pc, #244]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004278:	4313      	orrs	r3, r2
 800427a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427c:	e03a      	b.n	80042f4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d020      	beq.n	80042c8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004286:	4b3a      	ldr	r3, [pc, #232]	@ (8004370 <HAL_RCC_OscConfig+0x268>)
 8004288:	2201      	movs	r2, #1
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd fe78 	bl	8001f80 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004294:	f7fd fe74 	bl	8001f80 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e257      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042a6:	4b31      	ldr	r3, [pc, #196]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f0      	beq.n	8004294 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b2:	4b2e      	ldr	r3, [pc, #184]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	492a      	ldr	r1, [pc, #168]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
 80042c6:	e015      	b.n	80042f4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042c8:	4b29      	ldr	r3, [pc, #164]	@ (8004370 <HAL_RCC_OscConfig+0x268>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ce:	f7fd fe57 	bl	8001f80 <HAL_GetTick>
 80042d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042d4:	e008      	b.n	80042e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d6:	f7fd fe53 	bl	8001f80 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e236      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042e8:	4b20      	ldr	r3, [pc, #128]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1f0      	bne.n	80042d6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80b8 	beq.w	8004472 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d170      	bne.n	80043ea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004308:	4b18      	ldr	r3, [pc, #96]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <HAL_RCC_OscConfig+0x218>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e21a      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800432c:	429a      	cmp	r2, r3
 800432e:	d921      	bls.n	8004374 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fc7d 	bl	8004c34 <RCC_SetFlashLatencyFromMSIRange>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e208      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004344:	4b09      	ldr	r3, [pc, #36]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	4906      	ldr	r1, [pc, #24]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004356:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	061b      	lsls	r3, r3, #24
 8004364:	4901      	ldr	r1, [pc, #4]	@ (800436c <HAL_RCC_OscConfig+0x264>)
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
 800436a:	e020      	b.n	80043ae <HAL_RCC_OscConfig+0x2a6>
 800436c:	40023800 	.word	0x40023800
 8004370:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004374:	4b99      	ldr	r3, [pc, #612]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4996      	ldr	r1, [pc, #600]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004386:	4b95      	ldr	r3, [pc, #596]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	061b      	lsls	r3, r3, #24
 8004394:	4991      	ldr	r1, [pc, #580]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004396:	4313      	orrs	r3, r2
 8004398:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fc48 	bl	8004c34 <RCC_SetFlashLatencyFromMSIRange>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e1d3      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	3301      	adds	r3, #1
 80043b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043be:	4a87      	ldr	r2, [pc, #540]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80043c0:	6892      	ldr	r2, [r2, #8]
 80043c2:	0912      	lsrs	r2, r2, #4
 80043c4:	f002 020f 	and.w	r2, r2, #15
 80043c8:	4985      	ldr	r1, [pc, #532]	@ (80045e0 <HAL_RCC_OscConfig+0x4d8>)
 80043ca:	5c8a      	ldrb	r2, [r1, r2]
 80043cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043ce:	4a85      	ldr	r2, [pc, #532]	@ (80045e4 <HAL_RCC_OscConfig+0x4dc>)
 80043d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043d2:	4b85      	ldr	r3, [pc, #532]	@ (80045e8 <HAL_RCC_OscConfig+0x4e0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd fd86 	bl	8001ee8 <HAL_InitTick>
 80043dc:	4603      	mov	r3, r0
 80043de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d045      	beq.n	8004472 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	e1b5      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d029      	beq.n	8004446 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043f2:	4b7e      	ldr	r3, [pc, #504]	@ (80045ec <HAL_RCC_OscConfig+0x4e4>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f8:	f7fd fdc2 	bl	8001f80 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004400:	f7fd fdbe 	bl	8001f80 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e1a1      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004412:	4b72      	ldr	r3, [pc, #456]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800441e:	4b6f      	ldr	r3, [pc, #444]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	496c      	ldr	r1, [pc, #432]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 800442c:	4313      	orrs	r3, r2
 800442e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004430:	4b6a      	ldr	r3, [pc, #424]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	4967      	ldr	r1, [pc, #412]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	e015      	b.n	8004472 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004446:	4b69      	ldr	r3, [pc, #420]	@ (80045ec <HAL_RCC_OscConfig+0x4e4>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fd fd98 	bl	8001f80 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004454:	f7fd fd94 	bl	8001f80 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e177      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004466:	4b5d      	ldr	r3, [pc, #372]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f0      	bne.n	8004454 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d030      	beq.n	80044e0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	695b      	ldr	r3, [r3, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d016      	beq.n	80044b4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004486:	4b5a      	ldr	r3, [pc, #360]	@ (80045f0 <HAL_RCC_OscConfig+0x4e8>)
 8004488:	2201      	movs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448c:	f7fd fd78 	bl	8001f80 <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004494:	f7fd fd74 	bl	8001f80 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e157      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044a6:	4b4d      	ldr	r3, [pc, #308]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x38c>
 80044b2:	e015      	b.n	80044e0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044b4:	4b4e      	ldr	r3, [pc, #312]	@ (80045f0 <HAL_RCC_OscConfig+0x4e8>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ba:	f7fd fd61 	bl	8001f80 <HAL_GetTick>
 80044be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044c2:	f7fd fd5d 	bl	8001f80 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e140      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044d4:	4b41      	ldr	r3, [pc, #260]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80044d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	f000 80b5 	beq.w	8004658 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ee:	2300      	movs	r3, #0
 80044f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044f2:	4b3a      	ldr	r3, [pc, #232]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10d      	bne.n	800451a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044fe:	4b37      	ldr	r3, [pc, #220]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	4a36      	ldr	r2, [pc, #216]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004508:	6253      	str	r3, [r2, #36]	@ 0x24
 800450a:	4b34      	ldr	r3, [pc, #208]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 800450c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004516:	2301      	movs	r3, #1
 8004518:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451a:	4b36      	ldr	r3, [pc, #216]	@ (80045f4 <HAL_RCC_OscConfig+0x4ec>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d118      	bne.n	8004558 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004526:	4b33      	ldr	r3, [pc, #204]	@ (80045f4 <HAL_RCC_OscConfig+0x4ec>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a32      	ldr	r2, [pc, #200]	@ (80045f4 <HAL_RCC_OscConfig+0x4ec>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004532:	f7fd fd25 	bl	8001f80 <HAL_GetTick>
 8004536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004538:	e008      	b.n	800454c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fd fd21 	bl	8001f80 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b64      	cmp	r3, #100	@ 0x64
 8004546:	d901      	bls.n	800454c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e104      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <HAL_RCC_OscConfig+0x4ec>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <HAL_RCC_OscConfig+0x466>
 8004560:	4b1e      	ldr	r3, [pc, #120]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800456a:	6353      	str	r3, [r2, #52]	@ 0x34
 800456c:	e02d      	b.n	80045ca <HAL_RCC_OscConfig+0x4c2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10c      	bne.n	8004590 <HAL_RCC_OscConfig+0x488>
 8004576:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800457a:	4a18      	ldr	r2, [pc, #96]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 800457c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004580:	6353      	str	r3, [r2, #52]	@ 0x34
 8004582:	4b16      	ldr	r3, [pc, #88]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004586:	4a15      	ldr	r2, [pc, #84]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 8004588:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800458c:	6353      	str	r3, [r2, #52]	@ 0x34
 800458e:	e01c      	b.n	80045ca <HAL_RCC_OscConfig+0x4c2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b05      	cmp	r3, #5
 8004596:	d10c      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4aa>
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 800459a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459c:	4a0f      	ldr	r2, [pc, #60]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 800459e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80045a4:	4b0d      	ldr	r3, [pc, #52]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80045a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045a8:	4a0c      	ldr	r2, [pc, #48]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80045aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045ae:	6353      	str	r3, [r2, #52]	@ 0x34
 80045b0:	e00b      	b.n	80045ca <HAL_RCC_OscConfig+0x4c2>
 80045b2:	4b0a      	ldr	r3, [pc, #40]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80045b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045b6:	4a09      	ldr	r2, [pc, #36]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80045b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80045be:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80045c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045c2:	4a06      	ldr	r2, [pc, #24]	@ (80045dc <HAL_RCC_OscConfig+0x4d4>)
 80045c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045c8:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d024      	beq.n	800461c <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045d2:	f7fd fcd5 	bl	8001f80 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045d8:	e019      	b.n	800460e <HAL_RCC_OscConfig+0x506>
 80045da:	bf00      	nop
 80045dc:	40023800 	.word	0x40023800
 80045e0:	08008d44 	.word	0x08008d44
 80045e4:	20000000 	.word	0x20000000
 80045e8:	20000004 	.word	0x20000004
 80045ec:	42470020 	.word	0x42470020
 80045f0:	42470680 	.word	0x42470680
 80045f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045f8:	f7fd fcc2 	bl	8001f80 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004606:	4293      	cmp	r3, r2
 8004608:	d901      	bls.n	800460e <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e0a3      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800460e:	4b54      	ldr	r3, [pc, #336]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 8004610:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004612:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004616:	2b00      	cmp	r3, #0
 8004618:	d0ee      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4f0>
 800461a:	e014      	b.n	8004646 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461c:	f7fd fcb0 	bl	8001f80 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004622:	e00a      	b.n	800463a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004624:	f7fd fcac 	bl	8001f80 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e08d      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800463a:	4b49      	ldr	r3, [pc, #292]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800463e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1ee      	bne.n	8004624 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004646:	7ffb      	ldrb	r3, [r7, #31]
 8004648:	2b01      	cmp	r3, #1
 800464a:	d105      	bne.n	8004658 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464c:	4b44      	ldr	r3, [pc, #272]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	4a43      	ldr	r2, [pc, #268]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 8004652:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004656:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d079      	beq.n	8004754 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	2b0c      	cmp	r3, #12
 8004664:	d056      	beq.n	8004714 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466a:	2b02      	cmp	r3, #2
 800466c:	d13b      	bne.n	80046e6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466e:	4b3d      	ldr	r3, [pc, #244]	@ (8004764 <HAL_RCC_OscConfig+0x65c>)
 8004670:	2200      	movs	r2, #0
 8004672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004674:	f7fd fc84 	bl	8001f80 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467c:	f7fd fc80 	bl	8001f80 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e063      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800468e:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800469a:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046aa:	4319      	orrs	r1, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	430b      	orrs	r3, r1
 80046b2:	492b      	ldr	r1, [pc, #172]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b8:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <HAL_RCC_OscConfig+0x65c>)
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fd fc5f 	bl	8001f80 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fd fc5b 	bl	8001f80 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e03e      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80046d8:	4b21      	ldr	r3, [pc, #132]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0f0      	beq.n	80046c6 <HAL_RCC_OscConfig+0x5be>
 80046e4:	e036      	b.n	8004754 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004764 <HAL_RCC_OscConfig+0x65c>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd fc48 	bl	8001f80 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd fc44 	bl	8001f80 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e027      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004706:	4b16      	ldr	r3, [pc, #88]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x5ec>
 8004712:	e01f      	b.n	8004754 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e01a      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004720:	4b0f      	ldr	r3, [pc, #60]	@ (8004760 <HAL_RCC_OscConfig+0x658>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	429a      	cmp	r2, r3
 8004732:	d10d      	bne.n	8004750 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473e:	429a      	cmp	r2, r3
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	42470060 	.word	0x42470060

08004768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e11a      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b8f      	ldr	r3, [pc, #572]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d919      	bls.n	80047be <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d105      	bne.n	800479c <HAL_RCC_ClockConfig+0x34>
 8004790:	4b8a      	ldr	r3, [pc, #552]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a89      	ldr	r2, [pc, #548]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	4b87      	ldr	r3, [pc, #540]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 0201 	bic.w	r2, r3, #1
 80047a4:	4985      	ldr	r1, [pc, #532]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ac:	4b83      	ldr	r3, [pc, #524]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e0f9      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d008      	beq.n	80047dc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ca:	4b7d      	ldr	r3, [pc, #500]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	497a      	ldr	r1, [pc, #488]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 808e 	beq.w	8004906 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047f2:	4b73      	ldr	r3, [pc, #460]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d121      	bne.n	8004842 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e0d7      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d107      	bne.n	800481a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800480a:	4b6d      	ldr	r3, [pc, #436]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d115      	bne.n	8004842 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e0cb      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004822:	4b67      	ldr	r3, [pc, #412]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0bf      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004832:	4b63      	ldr	r3, [pc, #396]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0b7      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004842:	4b5f      	ldr	r3, [pc, #380]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	495c      	ldr	r1, [pc, #368]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004854:	f7fd fb94 	bl	8001f80 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d112      	bne.n	8004888 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004862:	e00a      	b.n	800487a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004864:	f7fd fb8c 	bl	8001f80 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e09b      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800487a:	4b51      	ldr	r3, [pc, #324]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b08      	cmp	r3, #8
 8004884:	d1ee      	bne.n	8004864 <HAL_RCC_ClockConfig+0xfc>
 8004886:	e03e      	b.n	8004906 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b03      	cmp	r3, #3
 800488e:	d112      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004892:	f7fd fb75 	bl	8001f80 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e084      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048a8:	4b45      	ldr	r3, [pc, #276]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d1ee      	bne.n	8004892 <HAL_RCC_ClockConfig+0x12a>
 80048b4:	e027      	b.n	8004906 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d11d      	bne.n	80048fa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c0:	f7fd fb5e 	bl	8001f80 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e06d      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80048d6:	4b3a      	ldr	r3, [pc, #232]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d1ee      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x158>
 80048e2:	e010      	b.n	8004906 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048e4:	f7fd fb4c 	bl	8001f80 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e05b      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80048fa:	4b31      	ldr	r3, [pc, #196]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ee      	bne.n	80048e4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004906:	4b2d      	ldr	r3, [pc, #180]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d219      	bcs.n	8004948 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b01      	cmp	r3, #1
 8004918:	d105      	bne.n	8004926 <HAL_RCC_ClockConfig+0x1be>
 800491a:	4b28      	ldr	r3, [pc, #160]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004920:	f043 0304 	orr.w	r3, r3, #4
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	4b25      	ldr	r3, [pc, #148]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f023 0201 	bic.w	r2, r3, #1
 800492e:	4923      	ldr	r1, [pc, #140]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	4313      	orrs	r3, r2
 8004934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b21      	ldr	r3, [pc, #132]	@ (80049bc <HAL_RCC_ClockConfig+0x254>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e034      	b.n	80049b2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004954:	4b1a      	ldr	r3, [pc, #104]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4917      	ldr	r1, [pc, #92]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004972:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	490f      	ldr	r1, [pc, #60]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004986:	f000 f823 	bl	80049d0 <HAL_RCC_GetSysClockFreq>
 800498a:	4602      	mov	r2, r0
 800498c:	4b0c      	ldr	r3, [pc, #48]	@ (80049c0 <HAL_RCC_ClockConfig+0x258>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	490b      	ldr	r1, [pc, #44]	@ (80049c4 <HAL_RCC_ClockConfig+0x25c>)
 8004998:	5ccb      	ldrb	r3, [r1, r3]
 800499a:	fa22 f303 	lsr.w	r3, r2, r3
 800499e:	4a0a      	ldr	r2, [pc, #40]	@ (80049c8 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049a2:	4b0a      	ldr	r3, [pc, #40]	@ (80049cc <HAL_RCC_ClockConfig+0x264>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd fa9e 	bl	8001ee8 <HAL_InitTick>
 80049ac:	4603      	mov	r3, r0
 80049ae:	72fb      	strb	r3, [r7, #11]

  return status;
 80049b0:	7afb      	ldrb	r3, [r7, #11]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	40023c00 	.word	0x40023c00
 80049c0:	40023800 	.word	0x40023800
 80049c4:	08008d44 	.word	0x08008d44
 80049c8:	20000000 	.word	0x20000000
 80049cc:	20000004 	.word	0x20000004

080049d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d4:	b092      	sub	sp, #72	@ 0x48
 80049d6:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80049d8:	4b79      	ldr	r3, [pc, #484]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b0c      	cmp	r3, #12
 80049e6:	d00d      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x34>
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f200 80d5 	bhi.w	8004b98 <HAL_RCC_GetSysClockFreq+0x1c8>
 80049ee:	2b04      	cmp	r3, #4
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x28>
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x2e>
 80049f6:	e0cf      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b72      	ldr	r3, [pc, #456]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 80049fa:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80049fc:	e0da      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049fe:	4b72      	ldr	r3, [pc, #456]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004a00:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004a02:	e0d7      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a06:	0c9b      	lsrs	r3, r3, #18
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004a0e:	5c9b      	ldrb	r3, [r3, r2]
 8004a10:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a14:	0d9b      	lsrs	r3, r3, #22
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a1e:	4b68      	ldr	r3, [pc, #416]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d05d      	beq.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	4611      	mov	r1, r2
 8004a32:	4604      	mov	r4, r0
 8004a34:	460d      	mov	r5, r1
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4621      	mov	r1, r4
 8004a50:	1a51      	subs	r1, r2, r1
 8004a52:	6139      	str	r1, [r7, #16]
 8004a54:	4629      	mov	r1, r5
 8004a56:	eb63 0301 	sbc.w	r3, r3, r1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a68:	4659      	mov	r1, fp
 8004a6a:	018b      	lsls	r3, r1, #6
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a72:	4651      	mov	r1, sl
 8004a74:	018a      	lsls	r2, r1, #6
 8004a76:	46d4      	mov	ip, sl
 8004a78:	ebb2 080c 	subs.w	r8, r2, ip
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a96:	4690      	mov	r8, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	eb18 0303 	adds.w	r3, r8, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	eb49 0303 	adc.w	r3, r9, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	024b      	lsls	r3, r1, #9
 8004aba:	4620      	mov	r0, r4
 8004abc:	4629      	mov	r1, r5
 8004abe:	4604      	mov	r4, r0
 8004ac0:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004ac4:	4601      	mov	r1, r0
 8004ac6:	024a      	lsls	r2, r1, #9
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ace:	2200      	movs	r2, #0
 8004ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ad8:	f7fc fad8 	bl	800108c <__aeabi_uldivmod>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ae4:	e055      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae8:	2200      	movs	r2, #0
 8004aea:	623b      	str	r3, [r7, #32]
 8004aec:	627a      	str	r2, [r7, #36]	@ 0x24
 8004aee:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004af2:	4642      	mov	r2, r8
 8004af4:	464b      	mov	r3, r9
 8004af6:	f04f 0000 	mov.w	r0, #0
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	0159      	lsls	r1, r3, #5
 8004b00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b04:	0150      	lsls	r0, r2, #5
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	46c4      	mov	ip, r8
 8004b0c:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004b10:	4640      	mov	r0, r8
 8004b12:	4649      	mov	r1, r9
 8004b14:	468c      	mov	ip, r1
 8004b16:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b26:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b2a:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b2e:	ebb2 040a 	subs.w	r4, r2, sl
 8004b32:	eb63 050b 	sbc.w	r5, r3, fp
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	00eb      	lsls	r3, r5, #3
 8004b40:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b44:	00e2      	lsls	r2, r4, #3
 8004b46:	4614      	mov	r4, r2
 8004b48:	461d      	mov	r5, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	18e3      	adds	r3, r4, r3
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	460b      	mov	r3, r1
 8004b52:	eb45 0303 	adc.w	r3, r5, r3
 8004b56:	607b      	str	r3, [r7, #4]
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b64:	4629      	mov	r1, r5
 8004b66:	028b      	lsls	r3, r1, #10
 8004b68:	4620      	mov	r0, r4
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004b72:	4601      	mov	r1, r0
 8004b74:	028a      	lsls	r2, r1, #10
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	61bb      	str	r3, [r7, #24]
 8004b80:	61fa      	str	r2, [r7, #28]
 8004b82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b86:	f7fc fa81 	bl	800108c <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4613      	mov	r3, r2
 8004b90:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004b92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b94:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004b96:	e00d      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b98:	4b09      	ldr	r3, [pc, #36]	@ (8004bc0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	0b5b      	lsrs	r3, r3, #13
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004bac:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3748      	adds	r7, #72	@ 0x48
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	00f42400 	.word	0x00f42400
 8004bc8:	007a1200 	.word	0x007a1200
 8004bcc:	08008d38 	.word	0x08008d38

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b02      	ldr	r3, [pc, #8]	@ (8004be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bc80      	pop	{r7}
 8004bde:	4770      	bx	lr
 8004be0:	20000000 	.word	0x20000000

08004be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004be8:	f7ff fff2 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bec:	4602      	mov	r2, r0
 8004bee:	4b05      	ldr	r3, [pc, #20]	@ (8004c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	4903      	ldr	r1, [pc, #12]	@ (8004c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfa:	5ccb      	ldrb	r3, [r1, r3]
 8004bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40023800 	.word	0x40023800
 8004c08:	08008d54 	.word	0x08008d54

08004c0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c10:	f7ff ffde 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c14:	4602      	mov	r2, r0
 8004c16:	4b05      	ldr	r3, [pc, #20]	@ (8004c2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0adb      	lsrs	r3, r3, #11
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4903      	ldr	r1, [pc, #12]	@ (8004c30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c22:	5ccb      	ldrb	r3, [r1, r3]
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	08008d54 	.word	0x08008d54

08004c34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004c40:	4b29      	ldr	r3, [pc, #164]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d12c      	bne.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c4c:	4b26      	ldr	r3, [pc, #152]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004c58:	4b24      	ldr	r3, [pc, #144]	@ (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e016      	b.n	8004c92 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	4b20      	ldr	r3, [pc, #128]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	6253      	str	r3, [r2, #36]	@ 0x24
 8004c70:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004c84:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c86:	4b18      	ldr	r3, [pc, #96]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	4a17      	ldr	r2, [pc, #92]	@ (8004ce8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004c8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004c98:	d105      	bne.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004ca0:	d101      	bne.n	8004ca6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d105      	bne.n	8004cb8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004cac:	4b10      	ldr	r3, [pc, #64]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cb2:	f043 0304 	orr.w	r3, r3, #4
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f023 0201 	bic.w	r2, r3, #1
 8004cc0:	490b      	ldr	r1, [pc, #44]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	693a      	ldr	r2, [r7, #16]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d001      	beq.n	8004cda <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40023800 	.word	0x40023800
 8004cec:	40007000 	.word	0x40007000
 8004cf0:	40023c00 	.word	0x40023c00

08004cf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e031      	b.n	8004d6a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc ff32 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3304      	adds	r3, #4
 8004d30:	4619      	mov	r1, r3
 8004d32:	4610      	mov	r0, r2
 8004d34:	f000 fa28 	bl	8005188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
	...

08004d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d001      	beq.n	8004d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e03a      	b.n	8004e02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68da      	ldr	r2, [r3, #12]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dac:	d00e      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x58>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a16      	ldr	r2, [pc, #88]	@ (8004e0c <HAL_TIM_Base_Start_IT+0x98>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d009      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x58>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a14      	ldr	r2, [pc, #80]	@ (8004e10 <HAL_TIM_Base_Start_IT+0x9c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_TIM_Base_Start_IT+0x58>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a13      	ldr	r2, [pc, #76]	@ (8004e14 <HAL_TIM_Base_Start_IT+0xa0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d111      	bne.n	8004df0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2b06      	cmp	r3, #6
 8004ddc:	d010      	beq.n	8004e00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f042 0201 	orr.w	r2, r2, #1
 8004dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dee:	e007      	b.n	8004e00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr
 8004e0c:	40000400 	.word	0x40000400
 8004e10:	40000800 	.word	0x40000800
 8004e14:	40010800 	.word	0x40010800

08004e18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d020      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d01b      	beq.n	8004e7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f06f 0202 	mvn.w	r2, #2
 8004e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f003 0303 	and.w	r3, r3, #3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d003      	beq.n	8004e6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f974 	bl	8005150 <HAL_TIM_IC_CaptureCallback>
 8004e68:	e005      	b.n	8004e76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f967 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f976 	bl	8005162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0304 	and.w	r3, r3, #4
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d020      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01b      	beq.n	8004ec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0204 	mvn.w	r2, #4
 8004e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f94e 	bl	8005150 <HAL_TIM_IC_CaptureCallback>
 8004eb4:	e005      	b.n	8004ec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f941 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f950 	bl	8005162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	f003 0308 	and.w	r3, r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f003 0308 	and.w	r3, r3, #8
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01b      	beq.n	8004f14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f06f 0208 	mvn.w	r2, #8
 8004ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2204      	movs	r2, #4
 8004eea:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f003 0303 	and.w	r3, r3, #3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d003      	beq.n	8004f02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f928 	bl	8005150 <HAL_TIM_IC_CaptureCallback>
 8004f00:	e005      	b.n	8004f0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f91b 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f92a 	bl	8005162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 0310 	and.w	r3, r3, #16
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d020      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01b      	beq.n	8004f60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f06f 0210 	mvn.w	r2, #16
 8004f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2208      	movs	r2, #8
 8004f36:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f902 	bl	8005150 <HAL_TIM_IC_CaptureCallback>
 8004f4c:	e005      	b.n	8004f5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f8f5 	bl	800513e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f000 f904 	bl	8005162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f06f 0201 	mvn.w	r2, #1
 8004f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc fcc4 	bl	800190c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d007      	beq.n	8004fa8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f8e6 	bl	8005174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fa8:	bf00      	nop
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d101      	bne.n	8004fcc <HAL_TIM_ConfigClockSource+0x1c>
 8004fc8:	2302      	movs	r3, #2
 8004fca:	e0b4      	b.n	8005136 <HAL_TIM_ConfigClockSource+0x186>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005004:	d03e      	beq.n	8005084 <HAL_TIM_ConfigClockSource+0xd4>
 8005006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800500a:	f200 8087 	bhi.w	800511c <HAL_TIM_ConfigClockSource+0x16c>
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005012:	f000 8086 	beq.w	8005122 <HAL_TIM_ConfigClockSource+0x172>
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800501a:	d87f      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	2b70      	cmp	r3, #112	@ 0x70
 800501e:	d01a      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0xa6>
 8005020:	2b70      	cmp	r3, #112	@ 0x70
 8005022:	d87b      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 8005024:	2b60      	cmp	r3, #96	@ 0x60
 8005026:	d050      	beq.n	80050ca <HAL_TIM_ConfigClockSource+0x11a>
 8005028:	2b60      	cmp	r3, #96	@ 0x60
 800502a:	d877      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 800502c:	2b50      	cmp	r3, #80	@ 0x50
 800502e:	d03c      	beq.n	80050aa <HAL_TIM_ConfigClockSource+0xfa>
 8005030:	2b50      	cmp	r3, #80	@ 0x50
 8005032:	d873      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 8005034:	2b40      	cmp	r3, #64	@ 0x40
 8005036:	d058      	beq.n	80050ea <HAL_TIM_ConfigClockSource+0x13a>
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d86f      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 800503c:	2b30      	cmp	r3, #48	@ 0x30
 800503e:	d064      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	2b30      	cmp	r3, #48	@ 0x30
 8005042:	d86b      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 8005044:	2b20      	cmp	r3, #32
 8005046:	d060      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15a>
 8005048:	2b20      	cmp	r3, #32
 800504a:	d867      	bhi.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05c      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15a>
 8005050:	2b10      	cmp	r3, #16
 8005052:	d05a      	beq.n	800510a <HAL_TIM_ConfigClockSource+0x15a>
 8005054:	e062      	b.n	800511c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	f000 f97c 	bl	8005362 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	609a      	str	r2, [r3, #8]
      break;
 8005082:	e04f      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005094:	f000 f965 	bl	8005362 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689a      	ldr	r2, [r3, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050a6:	609a      	str	r2, [r3, #8]
      break;
 80050a8:	e03c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	461a      	mov	r2, r3
 80050b8:	f000 f8dc 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2150      	movs	r1, #80	@ 0x50
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 f933 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 80050c8:	e02c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	461a      	mov	r2, r3
 80050d8:	f000 f8fa 	bl	80052d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2160      	movs	r1, #96	@ 0x60
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f923 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 80050e8:	e01c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	461a      	mov	r2, r3
 80050f8:	f000 f8bc 	bl	8005274 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2140      	movs	r1, #64	@ 0x40
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f913 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 8005108:	e00c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f000 f90a 	bl	800532e <TIM_ITRx_SetConfig>
      break;
 800511a:	e003      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      break;
 8005120:	e000      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800516a:	bf00      	nop
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
	...

08005188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800519e:	d00f      	beq.n	80051c0 <TIM_Base_SetConfig+0x38>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a2e      	ldr	r2, [pc, #184]	@ (800525c <TIM_Base_SetConfig+0xd4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00b      	beq.n	80051c0 <TIM_Base_SetConfig+0x38>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <TIM_Base_SetConfig+0xd8>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d007      	beq.n	80051c0 <TIM_Base_SetConfig+0x38>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2c      	ldr	r2, [pc, #176]	@ (8005264 <TIM_Base_SetConfig+0xdc>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d003      	beq.n	80051c0 <TIM_Base_SetConfig+0x38>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <TIM_Base_SetConfig+0xe0>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d108      	bne.n	80051d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d8:	d017      	beq.n	800520a <TIM_Base_SetConfig+0x82>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	@ (800525c <TIM_Base_SetConfig+0xd4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d013      	beq.n	800520a <TIM_Base_SetConfig+0x82>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <TIM_Base_SetConfig+0xd8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00f      	beq.n	800520a <TIM_Base_SetConfig+0x82>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005264 <TIM_Base_SetConfig+0xdc>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d00b      	beq.n	800520a <TIM_Base_SetConfig+0x82>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005268 <TIM_Base_SetConfig+0xe0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d007      	beq.n	800520a <TIM_Base_SetConfig+0x82>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1b      	ldr	r2, [pc, #108]	@ (800526c <TIM_Base_SetConfig+0xe4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d003      	beq.n	800520a <TIM_Base_SetConfig+0x82>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a1a      	ldr	r2, [pc, #104]	@ (8005270 <TIM_Base_SetConfig+0xe8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d108      	bne.n	800521c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f043 0204 	orr.w	r2, r3, #4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	601a      	str	r2, [r3, #0]
}
 8005252:	bf00      	nop
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010800 	.word	0x40010800
 800526c:	40010c00 	.word	0x40010c00
 8005270:	40011000 	.word	0x40011000

08005274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800529e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f023 030a 	bic.w	r3, r3, #10
 80052b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	621a      	str	r2, [r3, #32]
}
 80052c6:	bf00      	nop
 80052c8:	371c      	adds	r7, #28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr

080052d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b087      	sub	sp, #28
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a1b      	ldr	r3, [r3, #32]
 80052e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	f023 0210 	bic.w	r2, r3, #16
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	031b      	lsls	r3, r3, #12
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800530c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	621a      	str	r2, [r3, #32]
}
 8005324:	bf00      	nop
 8005326:	371c      	adds	r7, #28
 8005328:	46bd      	mov	sp, r7
 800532a:	bc80      	pop	{r7}
 800532c:	4770      	bx	lr

0800532e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800532e:	b480      	push	{r7}
 8005330:	b085      	sub	sp, #20
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
 8005336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	f043 0307 	orr.w	r3, r3, #7
 8005350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005362:	b480      	push	{r7}
 8005364:	b087      	sub	sp, #28
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800537c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	021a      	lsls	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	431a      	orrs	r2, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4313      	orrs	r3, r2
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	4313      	orrs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	697a      	ldr	r2, [r7, #20]
 8005394:	609a      	str	r2, [r3, #8]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e046      	b.n	8005446 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fa:	d00e      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a13      	ldr	r2, [pc, #76]	@ (8005450 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d009      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a12      	ldr	r2, [pc, #72]	@ (8005454 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d004      	beq.n	800541a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a10      	ldr	r2, [pc, #64]	@ (8005458 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d10c      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	bc80      	pop	{r7}
 800544e:	4770      	bx	lr
 8005450:	40000400 	.word	0x40000400
 8005454:	40000800 	.word	0x40000800
 8005458:	40010800 	.word	0x40010800

0800545c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e042      	b.n	80054f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fc fba4 	bl	8001bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2224      	movs	r2, #36	@ 0x24
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800549e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f971 	bl	8005788 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2220      	movs	r2, #32
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b08a      	sub	sp, #40	@ 0x28
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	4613      	mov	r3, r2
 800550a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b20      	cmp	r3, #32
 800551a:	d175      	bne.n	8005608 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <HAL_UART_Transmit+0x2c>
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e06e      	b.n	800560a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2221      	movs	r2, #33	@ 0x21
 8005536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800553a:	f7fc fd21 	bl	8001f80 <HAL_GetTick>
 800553e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005554:	d108      	bne.n	8005568 <HAL_UART_Transmit+0x6c>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800555e:	2300      	movs	r3, #0
 8005560:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	e003      	b.n	8005570 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005570:	e02e      	b.n	80055d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	9300      	str	r3, [sp, #0]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	2180      	movs	r1, #128	@ 0x80
 800557c:	68f8      	ldr	r0, [r7, #12]
 800557e:	f000 f848 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d005      	beq.n	8005594 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e03a      	b.n	800560a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	881b      	ldrh	r3, [r3, #0]
 800559e:	461a      	mov	r2, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3302      	adds	r3, #2
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e007      	b.n	80055c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	781a      	ldrb	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	3301      	adds	r3, #1
 80055c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055c6:	b29b      	uxth	r3, r3
 80055c8:	3b01      	subs	r3, #1
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1cb      	bne.n	8005572 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	2140      	movs	r1, #64	@ 0x40
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 f814 	bl	8005612 <UART_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e006      	b.n	800560a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e000      	b.n	800560a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005608:	2302      	movs	r3, #2
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	60f8      	str	r0, [r7, #12]
 800561a:	60b9      	str	r1, [r7, #8]
 800561c:	603b      	str	r3, [r7, #0]
 800561e:	4613      	mov	r3, r2
 8005620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005622:	e03b      	b.n	800569c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800562a:	d037      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800562c:	f7fc fca8 	bl	8001f80 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	6a3a      	ldr	r2, [r7, #32]
 8005638:	429a      	cmp	r2, r3
 800563a:	d302      	bcc.n	8005642 <UART_WaitOnFlagUntilTimeout+0x30>
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e03a      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d023      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b80      	cmp	r3, #128	@ 0x80
 8005658:	d020      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0x8a>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	d01d      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b08      	cmp	r3, #8
 800566c:	d116      	bne.n	800569c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f81d 	bl	80056c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2208      	movs	r2, #8
 800568e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e00f      	b.n	80056bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	4013      	ands	r3, r2
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	bf0c      	ite	eq
 80056ac:	2301      	moveq	r3, #1
 80056ae:	2300      	movne	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	79fb      	ldrb	r3, [r7, #7]
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d0b4      	beq.n	8005624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b095      	sub	sp, #84	@ 0x54
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	330c      	adds	r3, #12
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d6:	e853 3f00 	ldrex	r3, [r3]
 80056da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80056ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056f4:	e841 2300 	strex	r3, r2, [r1]
 80056f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e5      	bne.n	80056cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3314      	adds	r3, #20
 8005706:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	f023 0301 	bic.w	r3, r3, #1
 8005716:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3314      	adds	r3, #20
 800571e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005720:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e5      	bne.n	8005700 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	2b01      	cmp	r3, #1
 800573a:	d119      	bne.n	8005770 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	330c      	adds	r3, #12
 8005742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	e853 3f00 	ldrex	r3, [r3]
 800574a:	60bb      	str	r3, [r7, #8]
   return(result);
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	647b      	str	r3, [r7, #68]	@ 0x44
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800575c:	61ba      	str	r2, [r7, #24]
 800575e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6979      	ldr	r1, [r7, #20]
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	e841 2300 	strex	r3, r2, [r1]
 8005768:	613b      	str	r3, [r7, #16]
   return(result);
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d1e5      	bne.n	800573c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800577e:	bf00      	nop
 8005780:	3754      	adds	r7, #84	@ 0x54
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr

08005788 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68da      	ldr	r2, [r3, #12]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80057c8:	f023 030c 	bic.w	r3, r3, #12
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	6812      	ldr	r2, [r2, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	430b      	orrs	r3, r1
 80057d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695b      	ldr	r3, [r3, #20]
 80057dc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699a      	ldr	r2, [r3, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a55      	ldr	r2, [pc, #340]	@ (8005948 <UART_SetConfig+0x1c0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d103      	bne.n	80057fe <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057f6:	f7ff fa09 	bl	8004c0c <HAL_RCC_GetPCLK2Freq>
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	e002      	b.n	8005804 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057fe:	f7ff f9f1 	bl	8004be4 <HAL_RCC_GetPCLK1Freq>
 8005802:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	69db      	ldr	r3, [r3, #28]
 8005808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800580c:	d14c      	bne.n	80058a8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800580e:	68fa      	ldr	r2, [r7, #12]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	009a      	lsls	r2, r3, #2
 8005818:	441a      	add	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	005b      	lsls	r3, r3, #1
 8005820:	fbb2 f3f3 	udiv	r3, r2, r3
 8005824:	4a49      	ldr	r2, [pc, #292]	@ (800594c <UART_SetConfig+0x1c4>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	0119      	lsls	r1, r3, #4
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	009a      	lsls	r2, r3, #2
 8005838:	441a      	add	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	fbb2 f2f3 	udiv	r2, r2, r3
 8005844:	4b41      	ldr	r3, [pc, #260]	@ (800594c <UART_SetConfig+0x1c4>)
 8005846:	fba3 0302 	umull	r0, r3, r3, r2
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2064      	movs	r0, #100	@ 0x64
 800584e:	fb00 f303 	mul.w	r3, r0, r3
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	3332      	adds	r3, #50	@ 0x32
 8005858:	4a3c      	ldr	r2, [pc, #240]	@ (800594c <UART_SetConfig+0x1c4>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	095b      	lsrs	r3, r3, #5
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005866:	4419      	add	r1, r3
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009a      	lsls	r2, r3, #2
 8005872:	441a      	add	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	fbb2 f2f3 	udiv	r2, r2, r3
 800587e:	4b33      	ldr	r3, [pc, #204]	@ (800594c <UART_SetConfig+0x1c4>)
 8005880:	fba3 0302 	umull	r0, r3, r3, r2
 8005884:	095b      	lsrs	r3, r3, #5
 8005886:	2064      	movs	r0, #100	@ 0x64
 8005888:	fb00 f303 	mul.w	r3, r0, r3
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	3332      	adds	r3, #50	@ 0x32
 8005892:	4a2e      	ldr	r2, [pc, #184]	@ (800594c <UART_SetConfig+0x1c4>)
 8005894:	fba2 2303 	umull	r2, r3, r2, r3
 8005898:	095b      	lsrs	r3, r3, #5
 800589a:	f003 0207 	and.w	r2, r3, #7
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	440a      	add	r2, r1
 80058a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058a6:	e04a      	b.n	800593e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009a      	lsls	r2, r3, #2
 80058b2:	441a      	add	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80058be:	4a23      	ldr	r2, [pc, #140]	@ (800594c <UART_SetConfig+0x1c4>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	095b      	lsrs	r3, r3, #5
 80058c6:	0119      	lsls	r1, r3, #4
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	009a      	lsls	r2, r3, #2
 80058d2:	441a      	add	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	fbb2 f2f3 	udiv	r2, r2, r3
 80058de:	4b1b      	ldr	r3, [pc, #108]	@ (800594c <UART_SetConfig+0x1c4>)
 80058e0:	fba3 0302 	umull	r0, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2064      	movs	r0, #100	@ 0x64
 80058e8:	fb00 f303 	mul.w	r3, r0, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3332      	adds	r3, #50	@ 0x32
 80058f2:	4a16      	ldr	r2, [pc, #88]	@ (800594c <UART_SetConfig+0x1c4>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058fe:	4419      	add	r1, r3
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009a      	lsls	r2, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	fbb2 f2f3 	udiv	r2, r2, r3
 8005916:	4b0d      	ldr	r3, [pc, #52]	@ (800594c <UART_SetConfig+0x1c4>)
 8005918:	fba3 0302 	umull	r0, r3, r3, r2
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	2064      	movs	r0, #100	@ 0x64
 8005920:	fb00 f303 	mul.w	r3, r0, r3
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	3332      	adds	r3, #50	@ 0x32
 800592a:	4a08      	ldr	r2, [pc, #32]	@ (800594c <UART_SetConfig+0x1c4>)
 800592c:	fba2 2303 	umull	r2, r3, r2, r3
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	f003 020f 	and.w	r2, r3, #15
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	440a      	add	r2, r1
 800593c:	609a      	str	r2, [r3, #8]
}
 800593e:	bf00      	nop
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	40013800 	.word	0x40013800
 800594c:	51eb851f 	.word	0x51eb851f

08005950 <__cvt>:
 8005950:	2b00      	cmp	r3, #0
 8005952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005956:	461d      	mov	r5, r3
 8005958:	bfbb      	ittet	lt
 800595a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800595e:	461d      	movlt	r5, r3
 8005960:	2300      	movge	r3, #0
 8005962:	232d      	movlt	r3, #45	@ 0x2d
 8005964:	b088      	sub	sp, #32
 8005966:	4614      	mov	r4, r2
 8005968:	bfb8      	it	lt
 800596a:	4614      	movlt	r4, r2
 800596c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800596e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005970:	7013      	strb	r3, [r2, #0]
 8005972:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005974:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005978:	f023 0820 	bic.w	r8, r3, #32
 800597c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005980:	d005      	beq.n	800598e <__cvt+0x3e>
 8005982:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005986:	d100      	bne.n	800598a <__cvt+0x3a>
 8005988:	3601      	adds	r6, #1
 800598a:	2302      	movs	r3, #2
 800598c:	e000      	b.n	8005990 <__cvt+0x40>
 800598e:	2303      	movs	r3, #3
 8005990:	aa07      	add	r2, sp, #28
 8005992:	9204      	str	r2, [sp, #16]
 8005994:	aa06      	add	r2, sp, #24
 8005996:	e9cd a202 	strd	sl, r2, [sp, #8]
 800599a:	e9cd 3600 	strd	r3, r6, [sp]
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	f000 fe31 	bl	8006608 <_dtoa_r>
 80059a6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80059aa:	4607      	mov	r7, r0
 80059ac:	d119      	bne.n	80059e2 <__cvt+0x92>
 80059ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80059b0:	07db      	lsls	r3, r3, #31
 80059b2:	d50e      	bpl.n	80059d2 <__cvt+0x82>
 80059b4:	eb00 0906 	add.w	r9, r0, r6
 80059b8:	2200      	movs	r2, #0
 80059ba:	2300      	movs	r3, #0
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fb f80a 	bl	80009d8 <__aeabi_dcmpeq>
 80059c4:	b108      	cbz	r0, 80059ca <__cvt+0x7a>
 80059c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80059ca:	2230      	movs	r2, #48	@ 0x30
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	454b      	cmp	r3, r9
 80059d0:	d31e      	bcc.n	8005a10 <__cvt+0xc0>
 80059d2:	4638      	mov	r0, r7
 80059d4:	9b07      	ldr	r3, [sp, #28]
 80059d6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80059d8:	1bdb      	subs	r3, r3, r7
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	b008      	add	sp, #32
 80059de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059e6:	eb00 0906 	add.w	r9, r0, r6
 80059ea:	d1e5      	bne.n	80059b8 <__cvt+0x68>
 80059ec:	7803      	ldrb	r3, [r0, #0]
 80059ee:	2b30      	cmp	r3, #48	@ 0x30
 80059f0:	d10a      	bne.n	8005a08 <__cvt+0xb8>
 80059f2:	2200      	movs	r2, #0
 80059f4:	2300      	movs	r3, #0
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f7fa ffed 	bl	80009d8 <__aeabi_dcmpeq>
 80059fe:	b918      	cbnz	r0, 8005a08 <__cvt+0xb8>
 8005a00:	f1c6 0601 	rsb	r6, r6, #1
 8005a04:	f8ca 6000 	str.w	r6, [sl]
 8005a08:	f8da 3000 	ldr.w	r3, [sl]
 8005a0c:	4499      	add	r9, r3
 8005a0e:	e7d3      	b.n	80059b8 <__cvt+0x68>
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	9107      	str	r1, [sp, #28]
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	e7d9      	b.n	80059cc <__cvt+0x7c>

08005a18 <__exponent>:
 8005a18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a1a:	2900      	cmp	r1, #0
 8005a1c:	bfb6      	itet	lt
 8005a1e:	232d      	movlt	r3, #45	@ 0x2d
 8005a20:	232b      	movge	r3, #43	@ 0x2b
 8005a22:	4249      	neglt	r1, r1
 8005a24:	2909      	cmp	r1, #9
 8005a26:	7002      	strb	r2, [r0, #0]
 8005a28:	7043      	strb	r3, [r0, #1]
 8005a2a:	dd29      	ble.n	8005a80 <__exponent+0x68>
 8005a2c:	f10d 0307 	add.w	r3, sp, #7
 8005a30:	461d      	mov	r5, r3
 8005a32:	270a      	movs	r7, #10
 8005a34:	fbb1 f6f7 	udiv	r6, r1, r7
 8005a38:	461a      	mov	r2, r3
 8005a3a:	fb07 1416 	mls	r4, r7, r6, r1
 8005a3e:	3430      	adds	r4, #48	@ 0x30
 8005a40:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a44:	460c      	mov	r4, r1
 8005a46:	2c63      	cmp	r4, #99	@ 0x63
 8005a48:	4631      	mov	r1, r6
 8005a4a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005a4e:	dcf1      	bgt.n	8005a34 <__exponent+0x1c>
 8005a50:	3130      	adds	r1, #48	@ 0x30
 8005a52:	1e94      	subs	r4, r2, #2
 8005a54:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a58:	4623      	mov	r3, r4
 8005a5a:	1c41      	adds	r1, r0, #1
 8005a5c:	42ab      	cmp	r3, r5
 8005a5e:	d30a      	bcc.n	8005a76 <__exponent+0x5e>
 8005a60:	f10d 0309 	add.w	r3, sp, #9
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	42ac      	cmp	r4, r5
 8005a68:	bf88      	it	hi
 8005a6a:	2300      	movhi	r3, #0
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	4403      	add	r3, r0
 8005a70:	1a18      	subs	r0, r3, r0
 8005a72:	b003      	add	sp, #12
 8005a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a76:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a7a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a7e:	e7ed      	b.n	8005a5c <__exponent+0x44>
 8005a80:	2330      	movs	r3, #48	@ 0x30
 8005a82:	3130      	adds	r1, #48	@ 0x30
 8005a84:	7083      	strb	r3, [r0, #2]
 8005a86:	70c1      	strb	r1, [r0, #3]
 8005a88:	1d03      	adds	r3, r0, #4
 8005a8a:	e7f1      	b.n	8005a70 <__exponent+0x58>

08005a8c <_printf_float>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	b091      	sub	sp, #68	@ 0x44
 8005a92:	460c      	mov	r4, r1
 8005a94:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005a98:	4616      	mov	r6, r2
 8005a9a:	461f      	mov	r7, r3
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	f000 fd19 	bl	80064d4 <_localeconv_r>
 8005aa2:	6803      	ldr	r3, [r0, #0]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	9308      	str	r3, [sp, #32]
 8005aa8:	f7fa fb6a 	bl	8000180 <strlen>
 8005aac:	2300      	movs	r3, #0
 8005aae:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ab4:	9009      	str	r0, [sp, #36]	@ 0x24
 8005ab6:	3307      	adds	r3, #7
 8005ab8:	f023 0307 	bic.w	r3, r3, #7
 8005abc:	f103 0208 	add.w	r2, r3, #8
 8005ac0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005ac4:	f8d4 b000 	ldr.w	fp, [r4]
 8005ac8:	f8c8 2000 	str.w	r2, [r8]
 8005acc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ad0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ad4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ad6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005ada:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ade:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005ae2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ae6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d58 <_printf_float+0x2cc>)
 8005ae8:	f7fa ffa8 	bl	8000a3c <__aeabi_dcmpun>
 8005aec:	bb70      	cbnz	r0, 8005b4c <_printf_float+0xc0>
 8005aee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005af6:	4b98      	ldr	r3, [pc, #608]	@ (8005d58 <_printf_float+0x2cc>)
 8005af8:	f7fa ff82 	bl	8000a00 <__aeabi_dcmple>
 8005afc:	bb30      	cbnz	r0, 8005b4c <_printf_float+0xc0>
 8005afe:	2200      	movs	r2, #0
 8005b00:	2300      	movs	r3, #0
 8005b02:	4640      	mov	r0, r8
 8005b04:	4649      	mov	r1, r9
 8005b06:	f7fa ff71 	bl	80009ec <__aeabi_dcmplt>
 8005b0a:	b110      	cbz	r0, 8005b12 <_printf_float+0x86>
 8005b0c:	232d      	movs	r3, #45	@ 0x2d
 8005b0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b12:	4a92      	ldr	r2, [pc, #584]	@ (8005d5c <_printf_float+0x2d0>)
 8005b14:	4b92      	ldr	r3, [pc, #584]	@ (8005d60 <_printf_float+0x2d4>)
 8005b16:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005b1a:	bf8c      	ite	hi
 8005b1c:	4690      	movhi	r8, r2
 8005b1e:	4698      	movls	r8, r3
 8005b20:	2303      	movs	r3, #3
 8005b22:	f04f 0900 	mov.w	r9, #0
 8005b26:	6123      	str	r3, [r4, #16]
 8005b28:	f02b 0304 	bic.w	r3, fp, #4
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	4633      	mov	r3, r6
 8005b30:	4621      	mov	r1, r4
 8005b32:	4628      	mov	r0, r5
 8005b34:	9700      	str	r7, [sp, #0]
 8005b36:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005b38:	f000 f9d4 	bl	8005ee4 <_printf_common>
 8005b3c:	3001      	adds	r0, #1
 8005b3e:	f040 8090 	bne.w	8005c62 <_printf_float+0x1d6>
 8005b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b46:	b011      	add	sp, #68	@ 0x44
 8005b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b4c:	4642      	mov	r2, r8
 8005b4e:	464b      	mov	r3, r9
 8005b50:	4640      	mov	r0, r8
 8005b52:	4649      	mov	r1, r9
 8005b54:	f7fa ff72 	bl	8000a3c <__aeabi_dcmpun>
 8005b58:	b148      	cbz	r0, 8005b6e <_printf_float+0xe2>
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bfb8      	it	lt
 8005b60:	232d      	movlt	r3, #45	@ 0x2d
 8005b62:	4a80      	ldr	r2, [pc, #512]	@ (8005d64 <_printf_float+0x2d8>)
 8005b64:	bfb8      	it	lt
 8005b66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d68 <_printf_float+0x2dc>)
 8005b6c:	e7d3      	b.n	8005b16 <_printf_float+0x8a>
 8005b6e:	6863      	ldr	r3, [r4, #4]
 8005b70:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	d13f      	bne.n	8005bf8 <_printf_float+0x16c>
 8005b78:	2306      	movs	r3, #6
 8005b7a:	6063      	str	r3, [r4, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005b82:	6023      	str	r3, [r4, #0]
 8005b84:	9206      	str	r2, [sp, #24]
 8005b86:	aa0e      	add	r2, sp, #56	@ 0x38
 8005b88:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005b8c:	aa0d      	add	r2, sp, #52	@ 0x34
 8005b8e:	9203      	str	r2, [sp, #12]
 8005b90:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005b94:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005b98:	6863      	ldr	r3, [r4, #4]
 8005b9a:	4642      	mov	r2, r8
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	910a      	str	r1, [sp, #40]	@ 0x28
 8005ba4:	f7ff fed4 	bl	8005950 <__cvt>
 8005ba8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005baa:	4680      	mov	r8, r0
 8005bac:	2947      	cmp	r1, #71	@ 0x47
 8005bae:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005bb0:	d128      	bne.n	8005c04 <_printf_float+0x178>
 8005bb2:	1cc8      	adds	r0, r1, #3
 8005bb4:	db02      	blt.n	8005bbc <_printf_float+0x130>
 8005bb6:	6863      	ldr	r3, [r4, #4]
 8005bb8:	4299      	cmp	r1, r3
 8005bba:	dd40      	ble.n	8005c3e <_printf_float+0x1b2>
 8005bbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005bc0:	fa5f fa8a 	uxtb.w	sl, sl
 8005bc4:	4652      	mov	r2, sl
 8005bc6:	3901      	subs	r1, #1
 8005bc8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005bcc:	910d      	str	r1, [sp, #52]	@ 0x34
 8005bce:	f7ff ff23 	bl	8005a18 <__exponent>
 8005bd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bd4:	4681      	mov	r9, r0
 8005bd6:	1813      	adds	r3, r2, r0
 8005bd8:	2a01      	cmp	r2, #1
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	dc02      	bgt.n	8005be4 <_printf_float+0x158>
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	07d2      	lsls	r2, r2, #31
 8005be2:	d501      	bpl.n	8005be8 <_printf_float+0x15c>
 8005be4:	3301      	adds	r3, #1
 8005be6:	6123      	str	r3, [r4, #16]
 8005be8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d09e      	beq.n	8005b2e <_printf_float+0xa2>
 8005bf0:	232d      	movs	r3, #45	@ 0x2d
 8005bf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bf6:	e79a      	b.n	8005b2e <_printf_float+0xa2>
 8005bf8:	2947      	cmp	r1, #71	@ 0x47
 8005bfa:	d1bf      	bne.n	8005b7c <_printf_float+0xf0>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1bd      	bne.n	8005b7c <_printf_float+0xf0>
 8005c00:	2301      	movs	r3, #1
 8005c02:	e7ba      	b.n	8005b7a <_printf_float+0xee>
 8005c04:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c08:	d9dc      	bls.n	8005bc4 <_printf_float+0x138>
 8005c0a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005c0e:	d118      	bne.n	8005c42 <_printf_float+0x1b6>
 8005c10:	2900      	cmp	r1, #0
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	dd0b      	ble.n	8005c2e <_printf_float+0x1a2>
 8005c16:	6121      	str	r1, [r4, #16]
 8005c18:	b913      	cbnz	r3, 8005c20 <_printf_float+0x194>
 8005c1a:	6822      	ldr	r2, [r4, #0]
 8005c1c:	07d0      	lsls	r0, r2, #31
 8005c1e:	d502      	bpl.n	8005c26 <_printf_float+0x19a>
 8005c20:	3301      	adds	r3, #1
 8005c22:	440b      	add	r3, r1
 8005c24:	6123      	str	r3, [r4, #16]
 8005c26:	f04f 0900 	mov.w	r9, #0
 8005c2a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005c2c:	e7dc      	b.n	8005be8 <_printf_float+0x15c>
 8005c2e:	b913      	cbnz	r3, 8005c36 <_printf_float+0x1aa>
 8005c30:	6822      	ldr	r2, [r4, #0]
 8005c32:	07d2      	lsls	r2, r2, #31
 8005c34:	d501      	bpl.n	8005c3a <_printf_float+0x1ae>
 8005c36:	3302      	adds	r3, #2
 8005c38:	e7f4      	b.n	8005c24 <_printf_float+0x198>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e7f2      	b.n	8005c24 <_printf_float+0x198>
 8005c3e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c44:	4299      	cmp	r1, r3
 8005c46:	db05      	blt.n	8005c54 <_printf_float+0x1c8>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	6121      	str	r1, [r4, #16]
 8005c4c:	07d8      	lsls	r0, r3, #31
 8005c4e:	d5ea      	bpl.n	8005c26 <_printf_float+0x19a>
 8005c50:	1c4b      	adds	r3, r1, #1
 8005c52:	e7e7      	b.n	8005c24 <_printf_float+0x198>
 8005c54:	2900      	cmp	r1, #0
 8005c56:	bfcc      	ite	gt
 8005c58:	2201      	movgt	r2, #1
 8005c5a:	f1c1 0202 	rsble	r2, r1, #2
 8005c5e:	4413      	add	r3, r2
 8005c60:	e7e0      	b.n	8005c24 <_printf_float+0x198>
 8005c62:	6823      	ldr	r3, [r4, #0]
 8005c64:	055a      	lsls	r2, r3, #21
 8005c66:	d407      	bmi.n	8005c78 <_printf_float+0x1ec>
 8005c68:	6923      	ldr	r3, [r4, #16]
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	d12b      	bne.n	8005cce <_printf_float+0x242>
 8005c76:	e764      	b.n	8005b42 <_printf_float+0xb6>
 8005c78:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c7c:	f240 80dc 	bls.w	8005e38 <_printf_float+0x3ac>
 8005c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c84:	2200      	movs	r2, #0
 8005c86:	2300      	movs	r3, #0
 8005c88:	f7fa fea6 	bl	80009d8 <__aeabi_dcmpeq>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d033      	beq.n	8005cf8 <_printf_float+0x26c>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4631      	mov	r1, r6
 8005c94:	4628      	mov	r0, r5
 8005c96:	4a35      	ldr	r2, [pc, #212]	@ (8005d6c <_printf_float+0x2e0>)
 8005c98:	47b8      	blx	r7
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	f43f af51 	beq.w	8005b42 <_printf_float+0xb6>
 8005ca0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005ca4:	4543      	cmp	r3, r8
 8005ca6:	db02      	blt.n	8005cae <_printf_float+0x222>
 8005ca8:	6823      	ldr	r3, [r4, #0]
 8005caa:	07d8      	lsls	r0, r3, #31
 8005cac:	d50f      	bpl.n	8005cce <_printf_float+0x242>
 8005cae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005cb2:	4631      	mov	r1, r6
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	47b8      	blx	r7
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f43f af42 	beq.w	8005b42 <_printf_float+0xb6>
 8005cbe:	f04f 0900 	mov.w	r9, #0
 8005cc2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005cc6:	f104 0a1a 	add.w	sl, r4, #26
 8005cca:	45c8      	cmp	r8, r9
 8005ccc:	dc09      	bgt.n	8005ce2 <_printf_float+0x256>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	079b      	lsls	r3, r3, #30
 8005cd2:	f100 8102 	bmi.w	8005eda <_printf_float+0x44e>
 8005cd6:	68e0      	ldr	r0, [r4, #12]
 8005cd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005cda:	4298      	cmp	r0, r3
 8005cdc:	bfb8      	it	lt
 8005cde:	4618      	movlt	r0, r3
 8005ce0:	e731      	b.n	8005b46 <_printf_float+0xba>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f af28 	beq.w	8005b42 <_printf_float+0xb6>
 8005cf2:	f109 0901 	add.w	r9, r9, #1
 8005cf6:	e7e8      	b.n	8005cca <_printf_float+0x23e>
 8005cf8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	dc38      	bgt.n	8005d70 <_printf_float+0x2e4>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4631      	mov	r1, r6
 8005d02:	4628      	mov	r0, r5
 8005d04:	4a19      	ldr	r2, [pc, #100]	@ (8005d6c <_printf_float+0x2e0>)
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	f43f af1a 	beq.w	8005b42 <_printf_float+0xb6>
 8005d0e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005d12:	ea59 0303 	orrs.w	r3, r9, r3
 8005d16:	d102      	bne.n	8005d1e <_printf_float+0x292>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	07d9      	lsls	r1, r3, #31
 8005d1c:	d5d7      	bpl.n	8005cce <_printf_float+0x242>
 8005d1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	f43f af0a 	beq.w	8005b42 <_printf_float+0xb6>
 8005d2e:	f04f 0a00 	mov.w	sl, #0
 8005d32:	f104 0b1a 	add.w	fp, r4, #26
 8005d36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d38:	425b      	negs	r3, r3
 8005d3a:	4553      	cmp	r3, sl
 8005d3c:	dc01      	bgt.n	8005d42 <_printf_float+0x2b6>
 8005d3e:	464b      	mov	r3, r9
 8005d40:	e793      	b.n	8005c6a <_printf_float+0x1de>
 8005d42:	2301      	movs	r3, #1
 8005d44:	465a      	mov	r2, fp
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	47b8      	blx	r7
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	f43f aef8 	beq.w	8005b42 <_printf_float+0xb6>
 8005d52:	f10a 0a01 	add.w	sl, sl, #1
 8005d56:	e7ee      	b.n	8005d36 <_printf_float+0x2aa>
 8005d58:	7fefffff 	.word	0x7fefffff
 8005d5c:	08008d60 	.word	0x08008d60
 8005d60:	08008d5c 	.word	0x08008d5c
 8005d64:	08008d68 	.word	0x08008d68
 8005d68:	08008d64 	.word	0x08008d64
 8005d6c:	08008d6c 	.word	0x08008d6c
 8005d70:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d72:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005d76:	4553      	cmp	r3, sl
 8005d78:	bfa8      	it	ge
 8005d7a:	4653      	movge	r3, sl
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	4699      	mov	r9, r3
 8005d80:	dc36      	bgt.n	8005df0 <_printf_float+0x364>
 8005d82:	f04f 0b00 	mov.w	fp, #0
 8005d86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8a:	f104 021a 	add.w	r2, r4, #26
 8005d8e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d90:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d92:	eba3 0309 	sub.w	r3, r3, r9
 8005d96:	455b      	cmp	r3, fp
 8005d98:	dc31      	bgt.n	8005dfe <_printf_float+0x372>
 8005d9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d9c:	459a      	cmp	sl, r3
 8005d9e:	dc3a      	bgt.n	8005e16 <_printf_float+0x38a>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	07da      	lsls	r2, r3, #31
 8005da4:	d437      	bmi.n	8005e16 <_printf_float+0x38a>
 8005da6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005da8:	ebaa 0903 	sub.w	r9, sl, r3
 8005dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dae:	ebaa 0303 	sub.w	r3, sl, r3
 8005db2:	4599      	cmp	r9, r3
 8005db4:	bfa8      	it	ge
 8005db6:	4699      	movge	r9, r3
 8005db8:	f1b9 0f00 	cmp.w	r9, #0
 8005dbc:	dc33      	bgt.n	8005e26 <_printf_float+0x39a>
 8005dbe:	f04f 0800 	mov.w	r8, #0
 8005dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005dc6:	f104 0b1a 	add.w	fp, r4, #26
 8005dca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dcc:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd0:	eba3 0309 	sub.w	r3, r3, r9
 8005dd4:	4543      	cmp	r3, r8
 8005dd6:	f77f af7a 	ble.w	8005cce <_printf_float+0x242>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	465a      	mov	r2, fp
 8005dde:	4631      	mov	r1, r6
 8005de0:	4628      	mov	r0, r5
 8005de2:	47b8      	blx	r7
 8005de4:	3001      	adds	r0, #1
 8005de6:	f43f aeac 	beq.w	8005b42 <_printf_float+0xb6>
 8005dea:	f108 0801 	add.w	r8, r8, #1
 8005dee:	e7ec      	b.n	8005dca <_printf_float+0x33e>
 8005df0:	4642      	mov	r2, r8
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	d1c2      	bne.n	8005d82 <_printf_float+0x2f6>
 8005dfc:	e6a1      	b.n	8005b42 <_printf_float+0xb6>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e06:	47b8      	blx	r7
 8005e08:	3001      	adds	r0, #1
 8005e0a:	f43f ae9a 	beq.w	8005b42 <_printf_float+0xb6>
 8005e0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e10:	f10b 0b01 	add.w	fp, fp, #1
 8005e14:	e7bb      	b.n	8005d8e <_printf_float+0x302>
 8005e16:	4631      	mov	r1, r6
 8005e18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	d1c0      	bne.n	8005da6 <_printf_float+0x31a>
 8005e24:	e68d      	b.n	8005b42 <_printf_float+0xb6>
 8005e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e28:	464b      	mov	r3, r9
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	4442      	add	r2, r8
 8005e30:	47b8      	blx	r7
 8005e32:	3001      	adds	r0, #1
 8005e34:	d1c3      	bne.n	8005dbe <_printf_float+0x332>
 8005e36:	e684      	b.n	8005b42 <_printf_float+0xb6>
 8005e38:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005e3c:	f1ba 0f01 	cmp.w	sl, #1
 8005e40:	dc01      	bgt.n	8005e46 <_printf_float+0x3ba>
 8005e42:	07db      	lsls	r3, r3, #31
 8005e44:	d536      	bpl.n	8005eb4 <_printf_float+0x428>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4642      	mov	r2, r8
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	47b8      	blx	r7
 8005e50:	3001      	adds	r0, #1
 8005e52:	f43f ae76 	beq.w	8005b42 <_printf_float+0xb6>
 8005e56:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005e5a:	4631      	mov	r1, r6
 8005e5c:	4628      	mov	r0, r5
 8005e5e:	47b8      	blx	r7
 8005e60:	3001      	adds	r0, #1
 8005e62:	f43f ae6e 	beq.w	8005b42 <_printf_float+0xb6>
 8005e66:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005e72:	f7fa fdb1 	bl	80009d8 <__aeabi_dcmpeq>
 8005e76:	b9c0      	cbnz	r0, 8005eaa <_printf_float+0x41e>
 8005e78:	4653      	mov	r3, sl
 8005e7a:	f108 0201 	add.w	r2, r8, #1
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	d10c      	bne.n	8005ea2 <_printf_float+0x416>
 8005e88:	e65b      	b.n	8005b42 <_printf_float+0xb6>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	465a      	mov	r2, fp
 8005e8e:	4631      	mov	r1, r6
 8005e90:	4628      	mov	r0, r5
 8005e92:	47b8      	blx	r7
 8005e94:	3001      	adds	r0, #1
 8005e96:	f43f ae54 	beq.w	8005b42 <_printf_float+0xb6>
 8005e9a:	f108 0801 	add.w	r8, r8, #1
 8005e9e:	45d0      	cmp	r8, sl
 8005ea0:	dbf3      	blt.n	8005e8a <_printf_float+0x3fe>
 8005ea2:	464b      	mov	r3, r9
 8005ea4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ea8:	e6e0      	b.n	8005c6c <_printf_float+0x1e0>
 8005eaa:	f04f 0800 	mov.w	r8, #0
 8005eae:	f104 0b1a 	add.w	fp, r4, #26
 8005eb2:	e7f4      	b.n	8005e9e <_printf_float+0x412>
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	e7e1      	b.n	8005e7e <_printf_float+0x3f2>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	464a      	mov	r2, r9
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f ae3c 	beq.w	8005b42 <_printf_float+0xb6>
 8005eca:	f108 0801 	add.w	r8, r8, #1
 8005ece:	68e3      	ldr	r3, [r4, #12]
 8005ed0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005ed2:	1a5b      	subs	r3, r3, r1
 8005ed4:	4543      	cmp	r3, r8
 8005ed6:	dcf0      	bgt.n	8005eba <_printf_float+0x42e>
 8005ed8:	e6fd      	b.n	8005cd6 <_printf_float+0x24a>
 8005eda:	f04f 0800 	mov.w	r8, #0
 8005ede:	f104 0919 	add.w	r9, r4, #25
 8005ee2:	e7f4      	b.n	8005ece <_printf_float+0x442>

08005ee4 <_printf_common>:
 8005ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ee8:	4616      	mov	r6, r2
 8005eea:	4698      	mov	r8, r3
 8005eec:	688a      	ldr	r2, [r1, #8]
 8005eee:	690b      	ldr	r3, [r1, #16]
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	bfb8      	it	lt
 8005ef6:	4613      	movlt	r3, r2
 8005ef8:	6033      	str	r3, [r6, #0]
 8005efa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005efe:	460c      	mov	r4, r1
 8005f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f04:	b10a      	cbz	r2, 8005f0a <_printf_common+0x26>
 8005f06:	3301      	adds	r3, #1
 8005f08:	6033      	str	r3, [r6, #0]
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	0699      	lsls	r1, r3, #26
 8005f0e:	bf42      	ittt	mi
 8005f10:	6833      	ldrmi	r3, [r6, #0]
 8005f12:	3302      	addmi	r3, #2
 8005f14:	6033      	strmi	r3, [r6, #0]
 8005f16:	6825      	ldr	r5, [r4, #0]
 8005f18:	f015 0506 	ands.w	r5, r5, #6
 8005f1c:	d106      	bne.n	8005f2c <_printf_common+0x48>
 8005f1e:	f104 0a19 	add.w	sl, r4, #25
 8005f22:	68e3      	ldr	r3, [r4, #12]
 8005f24:	6832      	ldr	r2, [r6, #0]
 8005f26:	1a9b      	subs	r3, r3, r2
 8005f28:	42ab      	cmp	r3, r5
 8005f2a:	dc2b      	bgt.n	8005f84 <_printf_common+0xa0>
 8005f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f30:	6822      	ldr	r2, [r4, #0]
 8005f32:	3b00      	subs	r3, #0
 8005f34:	bf18      	it	ne
 8005f36:	2301      	movne	r3, #1
 8005f38:	0692      	lsls	r2, r2, #26
 8005f3a:	d430      	bmi.n	8005f9e <_printf_common+0xba>
 8005f3c:	4641      	mov	r1, r8
 8005f3e:	4638      	mov	r0, r7
 8005f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f44:	47c8      	blx	r9
 8005f46:	3001      	adds	r0, #1
 8005f48:	d023      	beq.n	8005f92 <_printf_common+0xae>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	6922      	ldr	r2, [r4, #16]
 8005f4e:	f003 0306 	and.w	r3, r3, #6
 8005f52:	2b04      	cmp	r3, #4
 8005f54:	bf14      	ite	ne
 8005f56:	2500      	movne	r5, #0
 8005f58:	6833      	ldreq	r3, [r6, #0]
 8005f5a:	f04f 0600 	mov.w	r6, #0
 8005f5e:	bf08      	it	eq
 8005f60:	68e5      	ldreq	r5, [r4, #12]
 8005f62:	f104 041a 	add.w	r4, r4, #26
 8005f66:	bf08      	it	eq
 8005f68:	1aed      	subeq	r5, r5, r3
 8005f6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f6e:	bf08      	it	eq
 8005f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f74:	4293      	cmp	r3, r2
 8005f76:	bfc4      	itt	gt
 8005f78:	1a9b      	subgt	r3, r3, r2
 8005f7a:	18ed      	addgt	r5, r5, r3
 8005f7c:	42b5      	cmp	r5, r6
 8005f7e:	d11a      	bne.n	8005fb6 <_printf_common+0xd2>
 8005f80:	2000      	movs	r0, #0
 8005f82:	e008      	b.n	8005f96 <_printf_common+0xb2>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4652      	mov	r2, sl
 8005f88:	4641      	mov	r1, r8
 8005f8a:	4638      	mov	r0, r7
 8005f8c:	47c8      	blx	r9
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d103      	bne.n	8005f9a <_printf_common+0xb6>
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9a:	3501      	adds	r5, #1
 8005f9c:	e7c1      	b.n	8005f22 <_printf_common+0x3e>
 8005f9e:	2030      	movs	r0, #48	@ 0x30
 8005fa0:	18e1      	adds	r1, r4, r3
 8005fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fac:	4422      	add	r2, r4
 8005fae:	3302      	adds	r3, #2
 8005fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fb4:	e7c2      	b.n	8005f3c <_printf_common+0x58>
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	4622      	mov	r2, r4
 8005fba:	4641      	mov	r1, r8
 8005fbc:	4638      	mov	r0, r7
 8005fbe:	47c8      	blx	r9
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d0e6      	beq.n	8005f92 <_printf_common+0xae>
 8005fc4:	3601      	adds	r6, #1
 8005fc6:	e7d9      	b.n	8005f7c <_printf_common+0x98>

08005fc8 <_printf_i>:
 8005fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	7e0f      	ldrb	r7, [r1, #24]
 8005fce:	4691      	mov	r9, r2
 8005fd0:	2f78      	cmp	r7, #120	@ 0x78
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	469a      	mov	sl, r3
 8005fd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fde:	d807      	bhi.n	8005ff0 <_printf_i+0x28>
 8005fe0:	2f62      	cmp	r7, #98	@ 0x62
 8005fe2:	d80a      	bhi.n	8005ffa <_printf_i+0x32>
 8005fe4:	2f00      	cmp	r7, #0
 8005fe6:	f000 80d1 	beq.w	800618c <_printf_i+0x1c4>
 8005fea:	2f58      	cmp	r7, #88	@ 0x58
 8005fec:	f000 80b8 	beq.w	8006160 <_printf_i+0x198>
 8005ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ff8:	e03a      	b.n	8006070 <_printf_i+0xa8>
 8005ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ffe:	2b15      	cmp	r3, #21
 8006000:	d8f6      	bhi.n	8005ff0 <_printf_i+0x28>
 8006002:	a101      	add	r1, pc, #4	@ (adr r1, 8006008 <_printf_i+0x40>)
 8006004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006008:	08006061 	.word	0x08006061
 800600c:	08006075 	.word	0x08006075
 8006010:	08005ff1 	.word	0x08005ff1
 8006014:	08005ff1 	.word	0x08005ff1
 8006018:	08005ff1 	.word	0x08005ff1
 800601c:	08005ff1 	.word	0x08005ff1
 8006020:	08006075 	.word	0x08006075
 8006024:	08005ff1 	.word	0x08005ff1
 8006028:	08005ff1 	.word	0x08005ff1
 800602c:	08005ff1 	.word	0x08005ff1
 8006030:	08005ff1 	.word	0x08005ff1
 8006034:	08006173 	.word	0x08006173
 8006038:	0800609f 	.word	0x0800609f
 800603c:	0800612d 	.word	0x0800612d
 8006040:	08005ff1 	.word	0x08005ff1
 8006044:	08005ff1 	.word	0x08005ff1
 8006048:	08006195 	.word	0x08006195
 800604c:	08005ff1 	.word	0x08005ff1
 8006050:	0800609f 	.word	0x0800609f
 8006054:	08005ff1 	.word	0x08005ff1
 8006058:	08005ff1 	.word	0x08005ff1
 800605c:	08006135 	.word	0x08006135
 8006060:	6833      	ldr	r3, [r6, #0]
 8006062:	1d1a      	adds	r2, r3, #4
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6032      	str	r2, [r6, #0]
 8006068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800606c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006070:	2301      	movs	r3, #1
 8006072:	e09c      	b.n	80061ae <_printf_i+0x1e6>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	6820      	ldr	r0, [r4, #0]
 8006078:	1d19      	adds	r1, r3, #4
 800607a:	6031      	str	r1, [r6, #0]
 800607c:	0606      	lsls	r6, r0, #24
 800607e:	d501      	bpl.n	8006084 <_printf_i+0xbc>
 8006080:	681d      	ldr	r5, [r3, #0]
 8006082:	e003      	b.n	800608c <_printf_i+0xc4>
 8006084:	0645      	lsls	r5, r0, #25
 8006086:	d5fb      	bpl.n	8006080 <_printf_i+0xb8>
 8006088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800608c:	2d00      	cmp	r5, #0
 800608e:	da03      	bge.n	8006098 <_printf_i+0xd0>
 8006090:	232d      	movs	r3, #45	@ 0x2d
 8006092:	426d      	negs	r5, r5
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006098:	230a      	movs	r3, #10
 800609a:	4858      	ldr	r0, [pc, #352]	@ (80061fc <_printf_i+0x234>)
 800609c:	e011      	b.n	80060c2 <_printf_i+0xfa>
 800609e:	6821      	ldr	r1, [r4, #0]
 80060a0:	6833      	ldr	r3, [r6, #0]
 80060a2:	0608      	lsls	r0, r1, #24
 80060a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80060a8:	d402      	bmi.n	80060b0 <_printf_i+0xe8>
 80060aa:	0649      	lsls	r1, r1, #25
 80060ac:	bf48      	it	mi
 80060ae:	b2ad      	uxthmi	r5, r5
 80060b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80060b2:	6033      	str	r3, [r6, #0]
 80060b4:	bf14      	ite	ne
 80060b6:	230a      	movne	r3, #10
 80060b8:	2308      	moveq	r3, #8
 80060ba:	4850      	ldr	r0, [pc, #320]	@ (80061fc <_printf_i+0x234>)
 80060bc:	2100      	movs	r1, #0
 80060be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060c2:	6866      	ldr	r6, [r4, #4]
 80060c4:	2e00      	cmp	r6, #0
 80060c6:	60a6      	str	r6, [r4, #8]
 80060c8:	db05      	blt.n	80060d6 <_printf_i+0x10e>
 80060ca:	6821      	ldr	r1, [r4, #0]
 80060cc:	432e      	orrs	r6, r5
 80060ce:	f021 0104 	bic.w	r1, r1, #4
 80060d2:	6021      	str	r1, [r4, #0]
 80060d4:	d04b      	beq.n	800616e <_printf_i+0x1a6>
 80060d6:	4616      	mov	r6, r2
 80060d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80060dc:	fb03 5711 	mls	r7, r3, r1, r5
 80060e0:	5dc7      	ldrb	r7, [r0, r7]
 80060e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060e6:	462f      	mov	r7, r5
 80060e8:	42bb      	cmp	r3, r7
 80060ea:	460d      	mov	r5, r1
 80060ec:	d9f4      	bls.n	80060d8 <_printf_i+0x110>
 80060ee:	2b08      	cmp	r3, #8
 80060f0:	d10b      	bne.n	800610a <_printf_i+0x142>
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	07df      	lsls	r7, r3, #31
 80060f6:	d508      	bpl.n	800610a <_printf_i+0x142>
 80060f8:	6923      	ldr	r3, [r4, #16]
 80060fa:	6861      	ldr	r1, [r4, #4]
 80060fc:	4299      	cmp	r1, r3
 80060fe:	bfde      	ittt	le
 8006100:	2330      	movle	r3, #48	@ 0x30
 8006102:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006106:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800610a:	1b92      	subs	r2, r2, r6
 800610c:	6122      	str	r2, [r4, #16]
 800610e:	464b      	mov	r3, r9
 8006110:	4621      	mov	r1, r4
 8006112:	4640      	mov	r0, r8
 8006114:	f8cd a000 	str.w	sl, [sp]
 8006118:	aa03      	add	r2, sp, #12
 800611a:	f7ff fee3 	bl	8005ee4 <_printf_common>
 800611e:	3001      	adds	r0, #1
 8006120:	d14a      	bne.n	80061b8 <_printf_i+0x1f0>
 8006122:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006126:	b004      	add	sp, #16
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	6823      	ldr	r3, [r4, #0]
 800612e:	f043 0320 	orr.w	r3, r3, #32
 8006132:	6023      	str	r3, [r4, #0]
 8006134:	2778      	movs	r7, #120	@ 0x78
 8006136:	4832      	ldr	r0, [pc, #200]	@ (8006200 <_printf_i+0x238>)
 8006138:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	6831      	ldr	r1, [r6, #0]
 8006140:	061f      	lsls	r7, r3, #24
 8006142:	f851 5b04 	ldr.w	r5, [r1], #4
 8006146:	d402      	bmi.n	800614e <_printf_i+0x186>
 8006148:	065f      	lsls	r7, r3, #25
 800614a:	bf48      	it	mi
 800614c:	b2ad      	uxthmi	r5, r5
 800614e:	6031      	str	r1, [r6, #0]
 8006150:	07d9      	lsls	r1, r3, #31
 8006152:	bf44      	itt	mi
 8006154:	f043 0320 	orrmi.w	r3, r3, #32
 8006158:	6023      	strmi	r3, [r4, #0]
 800615a:	b11d      	cbz	r5, 8006164 <_printf_i+0x19c>
 800615c:	2310      	movs	r3, #16
 800615e:	e7ad      	b.n	80060bc <_printf_i+0xf4>
 8006160:	4826      	ldr	r0, [pc, #152]	@ (80061fc <_printf_i+0x234>)
 8006162:	e7e9      	b.n	8006138 <_printf_i+0x170>
 8006164:	6823      	ldr	r3, [r4, #0]
 8006166:	f023 0320 	bic.w	r3, r3, #32
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	e7f6      	b.n	800615c <_printf_i+0x194>
 800616e:	4616      	mov	r6, r2
 8006170:	e7bd      	b.n	80060ee <_printf_i+0x126>
 8006172:	6833      	ldr	r3, [r6, #0]
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1d18      	adds	r0, r3, #4
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	6030      	str	r0, [r6, #0]
 800617c:	062e      	lsls	r6, r5, #24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	d501      	bpl.n	8006186 <_printf_i+0x1be>
 8006182:	6019      	str	r1, [r3, #0]
 8006184:	e002      	b.n	800618c <_printf_i+0x1c4>
 8006186:	0668      	lsls	r0, r5, #25
 8006188:	d5fb      	bpl.n	8006182 <_printf_i+0x1ba>
 800618a:	8019      	strh	r1, [r3, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	4616      	mov	r6, r2
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	e7bc      	b.n	800610e <_printf_i+0x146>
 8006194:	6833      	ldr	r3, [r6, #0]
 8006196:	2100      	movs	r1, #0
 8006198:	1d1a      	adds	r2, r3, #4
 800619a:	6032      	str	r2, [r6, #0]
 800619c:	681e      	ldr	r6, [r3, #0]
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	4630      	mov	r0, r6
 80061a2:	f000 f99b 	bl	80064dc <memchr>
 80061a6:	b108      	cbz	r0, 80061ac <_printf_i+0x1e4>
 80061a8:	1b80      	subs	r0, r0, r6
 80061aa:	6060      	str	r0, [r4, #4]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	2300      	movs	r3, #0
 80061b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b6:	e7aa      	b.n	800610e <_printf_i+0x146>
 80061b8:	4632      	mov	r2, r6
 80061ba:	4649      	mov	r1, r9
 80061bc:	4640      	mov	r0, r8
 80061be:	6923      	ldr	r3, [r4, #16]
 80061c0:	47d0      	blx	sl
 80061c2:	3001      	adds	r0, #1
 80061c4:	d0ad      	beq.n	8006122 <_printf_i+0x15a>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	079b      	lsls	r3, r3, #30
 80061ca:	d413      	bmi.n	80061f4 <_printf_i+0x22c>
 80061cc:	68e0      	ldr	r0, [r4, #12]
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	4298      	cmp	r0, r3
 80061d2:	bfb8      	it	lt
 80061d4:	4618      	movlt	r0, r3
 80061d6:	e7a6      	b.n	8006126 <_printf_i+0x15e>
 80061d8:	2301      	movs	r3, #1
 80061da:	4632      	mov	r2, r6
 80061dc:	4649      	mov	r1, r9
 80061de:	4640      	mov	r0, r8
 80061e0:	47d0      	blx	sl
 80061e2:	3001      	adds	r0, #1
 80061e4:	d09d      	beq.n	8006122 <_printf_i+0x15a>
 80061e6:	3501      	adds	r5, #1
 80061e8:	68e3      	ldr	r3, [r4, #12]
 80061ea:	9903      	ldr	r1, [sp, #12]
 80061ec:	1a5b      	subs	r3, r3, r1
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	dcf2      	bgt.n	80061d8 <_printf_i+0x210>
 80061f2:	e7eb      	b.n	80061cc <_printf_i+0x204>
 80061f4:	2500      	movs	r5, #0
 80061f6:	f104 0619 	add.w	r6, r4, #25
 80061fa:	e7f5      	b.n	80061e8 <_printf_i+0x220>
 80061fc:	08008d6e 	.word	0x08008d6e
 8006200:	08008d7f 	.word	0x08008d7f

08006204 <std>:
 8006204:	2300      	movs	r3, #0
 8006206:	b510      	push	{r4, lr}
 8006208:	4604      	mov	r4, r0
 800620a:	e9c0 3300 	strd	r3, r3, [r0]
 800620e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006212:	6083      	str	r3, [r0, #8]
 8006214:	8181      	strh	r1, [r0, #12]
 8006216:	6643      	str	r3, [r0, #100]	@ 0x64
 8006218:	81c2      	strh	r2, [r0, #14]
 800621a:	6183      	str	r3, [r0, #24]
 800621c:	4619      	mov	r1, r3
 800621e:	2208      	movs	r2, #8
 8006220:	305c      	adds	r0, #92	@ 0x5c
 8006222:	f000 f921 	bl	8006468 <memset>
 8006226:	4b0d      	ldr	r3, [pc, #52]	@ (800625c <std+0x58>)
 8006228:	6224      	str	r4, [r4, #32]
 800622a:	6263      	str	r3, [r4, #36]	@ 0x24
 800622c:	4b0c      	ldr	r3, [pc, #48]	@ (8006260 <std+0x5c>)
 800622e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006230:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <std+0x60>)
 8006232:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006234:	4b0c      	ldr	r3, [pc, #48]	@ (8006268 <std+0x64>)
 8006236:	6323      	str	r3, [r4, #48]	@ 0x30
 8006238:	4b0c      	ldr	r3, [pc, #48]	@ (800626c <std+0x68>)
 800623a:	429c      	cmp	r4, r3
 800623c:	d006      	beq.n	800624c <std+0x48>
 800623e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006242:	4294      	cmp	r4, r2
 8006244:	d002      	beq.n	800624c <std+0x48>
 8006246:	33d0      	adds	r3, #208	@ 0xd0
 8006248:	429c      	cmp	r4, r3
 800624a:	d105      	bne.n	8006258 <std+0x54>
 800624c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006254:	f000 b93a 	b.w	80064cc <__retarget_lock_init_recursive>
 8006258:	bd10      	pop	{r4, pc}
 800625a:	bf00      	nop
 800625c:	08007de1 	.word	0x08007de1
 8006260:	08007e03 	.word	0x08007e03
 8006264:	08007e3b 	.word	0x08007e3b
 8006268:	08007e5f 	.word	0x08007e5f
 800626c:	2000032c 	.word	0x2000032c

08006270 <stdio_exit_handler>:
 8006270:	4a02      	ldr	r2, [pc, #8]	@ (800627c <stdio_exit_handler+0xc>)
 8006272:	4903      	ldr	r1, [pc, #12]	@ (8006280 <stdio_exit_handler+0x10>)
 8006274:	4803      	ldr	r0, [pc, #12]	@ (8006284 <stdio_exit_handler+0x14>)
 8006276:	f000 b869 	b.w	800634c <_fwalk_sglue>
 800627a:	bf00      	nop
 800627c:	2000000c 	.word	0x2000000c
 8006280:	08007685 	.word	0x08007685
 8006284:	2000001c 	.word	0x2000001c

08006288 <cleanup_stdio>:
 8006288:	6841      	ldr	r1, [r0, #4]
 800628a:	4b0c      	ldr	r3, [pc, #48]	@ (80062bc <cleanup_stdio+0x34>)
 800628c:	b510      	push	{r4, lr}
 800628e:	4299      	cmp	r1, r3
 8006290:	4604      	mov	r4, r0
 8006292:	d001      	beq.n	8006298 <cleanup_stdio+0x10>
 8006294:	f001 f9f6 	bl	8007684 <_fflush_r>
 8006298:	68a1      	ldr	r1, [r4, #8]
 800629a:	4b09      	ldr	r3, [pc, #36]	@ (80062c0 <cleanup_stdio+0x38>)
 800629c:	4299      	cmp	r1, r3
 800629e:	d002      	beq.n	80062a6 <cleanup_stdio+0x1e>
 80062a0:	4620      	mov	r0, r4
 80062a2:	f001 f9ef 	bl	8007684 <_fflush_r>
 80062a6:	68e1      	ldr	r1, [r4, #12]
 80062a8:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <cleanup_stdio+0x3c>)
 80062aa:	4299      	cmp	r1, r3
 80062ac:	d004      	beq.n	80062b8 <cleanup_stdio+0x30>
 80062ae:	4620      	mov	r0, r4
 80062b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b4:	f001 b9e6 	b.w	8007684 <_fflush_r>
 80062b8:	bd10      	pop	{r4, pc}
 80062ba:	bf00      	nop
 80062bc:	2000032c 	.word	0x2000032c
 80062c0:	20000394 	.word	0x20000394
 80062c4:	200003fc 	.word	0x200003fc

080062c8 <global_stdio_init.part.0>:
 80062c8:	b510      	push	{r4, lr}
 80062ca:	4b0b      	ldr	r3, [pc, #44]	@ (80062f8 <global_stdio_init.part.0+0x30>)
 80062cc:	4c0b      	ldr	r4, [pc, #44]	@ (80062fc <global_stdio_init.part.0+0x34>)
 80062ce:	4a0c      	ldr	r2, [pc, #48]	@ (8006300 <global_stdio_init.part.0+0x38>)
 80062d0:	4620      	mov	r0, r4
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	2104      	movs	r1, #4
 80062d6:	2200      	movs	r2, #0
 80062d8:	f7ff ff94 	bl	8006204 <std>
 80062dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062e0:	2201      	movs	r2, #1
 80062e2:	2109      	movs	r1, #9
 80062e4:	f7ff ff8e 	bl	8006204 <std>
 80062e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062ec:	2202      	movs	r2, #2
 80062ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f2:	2112      	movs	r1, #18
 80062f4:	f7ff bf86 	b.w	8006204 <std>
 80062f8:	20000464 	.word	0x20000464
 80062fc:	2000032c 	.word	0x2000032c
 8006300:	08006271 	.word	0x08006271

08006304 <__sfp_lock_acquire>:
 8006304:	4801      	ldr	r0, [pc, #4]	@ (800630c <__sfp_lock_acquire+0x8>)
 8006306:	f000 b8e2 	b.w	80064ce <__retarget_lock_acquire_recursive>
 800630a:	bf00      	nop
 800630c:	20000469 	.word	0x20000469

08006310 <__sfp_lock_release>:
 8006310:	4801      	ldr	r0, [pc, #4]	@ (8006318 <__sfp_lock_release+0x8>)
 8006312:	f000 b8dd 	b.w	80064d0 <__retarget_lock_release_recursive>
 8006316:	bf00      	nop
 8006318:	20000469 	.word	0x20000469

0800631c <__sinit>:
 800631c:	b510      	push	{r4, lr}
 800631e:	4604      	mov	r4, r0
 8006320:	f7ff fff0 	bl	8006304 <__sfp_lock_acquire>
 8006324:	6a23      	ldr	r3, [r4, #32]
 8006326:	b11b      	cbz	r3, 8006330 <__sinit+0x14>
 8006328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800632c:	f7ff bff0 	b.w	8006310 <__sfp_lock_release>
 8006330:	4b04      	ldr	r3, [pc, #16]	@ (8006344 <__sinit+0x28>)
 8006332:	6223      	str	r3, [r4, #32]
 8006334:	4b04      	ldr	r3, [pc, #16]	@ (8006348 <__sinit+0x2c>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1f5      	bne.n	8006328 <__sinit+0xc>
 800633c:	f7ff ffc4 	bl	80062c8 <global_stdio_init.part.0>
 8006340:	e7f2      	b.n	8006328 <__sinit+0xc>
 8006342:	bf00      	nop
 8006344:	08006289 	.word	0x08006289
 8006348:	20000464 	.word	0x20000464

0800634c <_fwalk_sglue>:
 800634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006350:	4607      	mov	r7, r0
 8006352:	4688      	mov	r8, r1
 8006354:	4614      	mov	r4, r2
 8006356:	2600      	movs	r6, #0
 8006358:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800635c:	f1b9 0901 	subs.w	r9, r9, #1
 8006360:	d505      	bpl.n	800636e <_fwalk_sglue+0x22>
 8006362:	6824      	ldr	r4, [r4, #0]
 8006364:	2c00      	cmp	r4, #0
 8006366:	d1f7      	bne.n	8006358 <_fwalk_sglue+0xc>
 8006368:	4630      	mov	r0, r6
 800636a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800636e:	89ab      	ldrh	r3, [r5, #12]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d907      	bls.n	8006384 <_fwalk_sglue+0x38>
 8006374:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006378:	3301      	adds	r3, #1
 800637a:	d003      	beq.n	8006384 <_fwalk_sglue+0x38>
 800637c:	4629      	mov	r1, r5
 800637e:	4638      	mov	r0, r7
 8006380:	47c0      	blx	r8
 8006382:	4306      	orrs	r6, r0
 8006384:	3568      	adds	r5, #104	@ 0x68
 8006386:	e7e9      	b.n	800635c <_fwalk_sglue+0x10>

08006388 <iprintf>:
 8006388:	b40f      	push	{r0, r1, r2, r3}
 800638a:	b507      	push	{r0, r1, r2, lr}
 800638c:	4906      	ldr	r1, [pc, #24]	@ (80063a8 <iprintf+0x20>)
 800638e:	ab04      	add	r3, sp, #16
 8006390:	6808      	ldr	r0, [r1, #0]
 8006392:	f853 2b04 	ldr.w	r2, [r3], #4
 8006396:	6881      	ldr	r1, [r0, #8]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	f000 ff31 	bl	8007200 <_vfiprintf_r>
 800639e:	b003      	add	sp, #12
 80063a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a4:	b004      	add	sp, #16
 80063a6:	4770      	bx	lr
 80063a8:	20000018 	.word	0x20000018

080063ac <_puts_r>:
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b570      	push	{r4, r5, r6, lr}
 80063b0:	4605      	mov	r5, r0
 80063b2:	460e      	mov	r6, r1
 80063b4:	6884      	ldr	r4, [r0, #8]
 80063b6:	b90b      	cbnz	r3, 80063bc <_puts_r+0x10>
 80063b8:	f7ff ffb0 	bl	800631c <__sinit>
 80063bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063be:	07db      	lsls	r3, r3, #31
 80063c0:	d405      	bmi.n	80063ce <_puts_r+0x22>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	0598      	lsls	r0, r3, #22
 80063c6:	d402      	bmi.n	80063ce <_puts_r+0x22>
 80063c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063ca:	f000 f880 	bl	80064ce <__retarget_lock_acquire_recursive>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	0719      	lsls	r1, r3, #28
 80063d2:	d502      	bpl.n	80063da <_puts_r+0x2e>
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d135      	bne.n	8006446 <_puts_r+0x9a>
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	f001 fd81 	bl	8007ee4 <__swsetup_r>
 80063e2:	b380      	cbz	r0, 8006446 <_puts_r+0x9a>
 80063e4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80063e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063ea:	07da      	lsls	r2, r3, #31
 80063ec:	d405      	bmi.n	80063fa <_puts_r+0x4e>
 80063ee:	89a3      	ldrh	r3, [r4, #12]
 80063f0:	059b      	lsls	r3, r3, #22
 80063f2:	d402      	bmi.n	80063fa <_puts_r+0x4e>
 80063f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063f6:	f000 f86b 	bl	80064d0 <__retarget_lock_release_recursive>
 80063fa:	4628      	mov	r0, r5
 80063fc:	bd70      	pop	{r4, r5, r6, pc}
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da04      	bge.n	800640c <_puts_r+0x60>
 8006402:	69a2      	ldr	r2, [r4, #24]
 8006404:	429a      	cmp	r2, r3
 8006406:	dc17      	bgt.n	8006438 <_puts_r+0x8c>
 8006408:	290a      	cmp	r1, #10
 800640a:	d015      	beq.n	8006438 <_puts_r+0x8c>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	6022      	str	r2, [r4, #0]
 8006412:	7019      	strb	r1, [r3, #0]
 8006414:	68a3      	ldr	r3, [r4, #8]
 8006416:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800641a:	3b01      	subs	r3, #1
 800641c:	60a3      	str	r3, [r4, #8]
 800641e:	2900      	cmp	r1, #0
 8006420:	d1ed      	bne.n	80063fe <_puts_r+0x52>
 8006422:	2b00      	cmp	r3, #0
 8006424:	da11      	bge.n	800644a <_puts_r+0x9e>
 8006426:	4622      	mov	r2, r4
 8006428:	210a      	movs	r1, #10
 800642a:	4628      	mov	r0, r5
 800642c:	f001 fd1b 	bl	8007e66 <__swbuf_r>
 8006430:	3001      	adds	r0, #1
 8006432:	d0d7      	beq.n	80063e4 <_puts_r+0x38>
 8006434:	250a      	movs	r5, #10
 8006436:	e7d7      	b.n	80063e8 <_puts_r+0x3c>
 8006438:	4622      	mov	r2, r4
 800643a:	4628      	mov	r0, r5
 800643c:	f001 fd13 	bl	8007e66 <__swbuf_r>
 8006440:	3001      	adds	r0, #1
 8006442:	d1e7      	bne.n	8006414 <_puts_r+0x68>
 8006444:	e7ce      	b.n	80063e4 <_puts_r+0x38>
 8006446:	3e01      	subs	r6, #1
 8006448:	e7e4      	b.n	8006414 <_puts_r+0x68>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	6022      	str	r2, [r4, #0]
 8006450:	220a      	movs	r2, #10
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	e7ee      	b.n	8006434 <_puts_r+0x88>
	...

08006458 <puts>:
 8006458:	4b02      	ldr	r3, [pc, #8]	@ (8006464 <puts+0xc>)
 800645a:	4601      	mov	r1, r0
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	f7ff bfa5 	b.w	80063ac <_puts_r>
 8006462:	bf00      	nop
 8006464:	20000018 	.word	0x20000018

08006468 <memset>:
 8006468:	4603      	mov	r3, r0
 800646a:	4402      	add	r2, r0
 800646c:	4293      	cmp	r3, r2
 800646e:	d100      	bne.n	8006472 <memset+0xa>
 8006470:	4770      	bx	lr
 8006472:	f803 1b01 	strb.w	r1, [r3], #1
 8006476:	e7f9      	b.n	800646c <memset+0x4>

08006478 <__errno>:
 8006478:	4b01      	ldr	r3, [pc, #4]	@ (8006480 <__errno+0x8>)
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	20000018 	.word	0x20000018

08006484 <__libc_init_array>:
 8006484:	b570      	push	{r4, r5, r6, lr}
 8006486:	2600      	movs	r6, #0
 8006488:	4d0c      	ldr	r5, [pc, #48]	@ (80064bc <__libc_init_array+0x38>)
 800648a:	4c0d      	ldr	r4, [pc, #52]	@ (80064c0 <__libc_init_array+0x3c>)
 800648c:	1b64      	subs	r4, r4, r5
 800648e:	10a4      	asrs	r4, r4, #2
 8006490:	42a6      	cmp	r6, r4
 8006492:	d109      	bne.n	80064a8 <__libc_init_array+0x24>
 8006494:	f002 fbee 	bl	8008c74 <_init>
 8006498:	2600      	movs	r6, #0
 800649a:	4d0a      	ldr	r5, [pc, #40]	@ (80064c4 <__libc_init_array+0x40>)
 800649c:	4c0a      	ldr	r4, [pc, #40]	@ (80064c8 <__libc_init_array+0x44>)
 800649e:	1b64      	subs	r4, r4, r5
 80064a0:	10a4      	asrs	r4, r4, #2
 80064a2:	42a6      	cmp	r6, r4
 80064a4:	d105      	bne.n	80064b2 <__libc_init_array+0x2e>
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ac:	4798      	blx	r3
 80064ae:	3601      	adds	r6, #1
 80064b0:	e7ee      	b.n	8006490 <__libc_init_array+0xc>
 80064b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064b6:	4798      	blx	r3
 80064b8:	3601      	adds	r6, #1
 80064ba:	e7f2      	b.n	80064a2 <__libc_init_array+0x1e>
 80064bc:	080090fc 	.word	0x080090fc
 80064c0:	080090fc 	.word	0x080090fc
 80064c4:	080090fc 	.word	0x080090fc
 80064c8:	08009100 	.word	0x08009100

080064cc <__retarget_lock_init_recursive>:
 80064cc:	4770      	bx	lr

080064ce <__retarget_lock_acquire_recursive>:
 80064ce:	4770      	bx	lr

080064d0 <__retarget_lock_release_recursive>:
 80064d0:	4770      	bx	lr
	...

080064d4 <_localeconv_r>:
 80064d4:	4800      	ldr	r0, [pc, #0]	@ (80064d8 <_localeconv_r+0x4>)
 80064d6:	4770      	bx	lr
 80064d8:	20000158 	.word	0x20000158

080064dc <memchr>:
 80064dc:	4603      	mov	r3, r0
 80064de:	b510      	push	{r4, lr}
 80064e0:	b2c9      	uxtb	r1, r1
 80064e2:	4402      	add	r2, r0
 80064e4:	4293      	cmp	r3, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	d101      	bne.n	80064ee <memchr+0x12>
 80064ea:	2000      	movs	r0, #0
 80064ec:	e003      	b.n	80064f6 <memchr+0x1a>
 80064ee:	7804      	ldrb	r4, [r0, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	428c      	cmp	r4, r1
 80064f4:	d1f6      	bne.n	80064e4 <memchr+0x8>
 80064f6:	bd10      	pop	{r4, pc}

080064f8 <quorem>:
 80064f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064fc:	6903      	ldr	r3, [r0, #16]
 80064fe:	690c      	ldr	r4, [r1, #16]
 8006500:	4607      	mov	r7, r0
 8006502:	42a3      	cmp	r3, r4
 8006504:	db7e      	blt.n	8006604 <quorem+0x10c>
 8006506:	3c01      	subs	r4, #1
 8006508:	00a3      	lsls	r3, r4, #2
 800650a:	f100 0514 	add.w	r5, r0, #20
 800650e:	f101 0814 	add.w	r8, r1, #20
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800651e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006522:	3301      	adds	r3, #1
 8006524:	429a      	cmp	r2, r3
 8006526:	fbb2 f6f3 	udiv	r6, r2, r3
 800652a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800652e:	d32e      	bcc.n	800658e <quorem+0x96>
 8006530:	f04f 0a00 	mov.w	sl, #0
 8006534:	46c4      	mov	ip, r8
 8006536:	46ae      	mov	lr, r5
 8006538:	46d3      	mov	fp, sl
 800653a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800653e:	b298      	uxth	r0, r3
 8006540:	fb06 a000 	mla	r0, r6, r0, sl
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	0c02      	lsrs	r2, r0, #16
 8006548:	fb06 2303 	mla	r3, r6, r3, r2
 800654c:	f8de 2000 	ldr.w	r2, [lr]
 8006550:	b280      	uxth	r0, r0
 8006552:	b292      	uxth	r2, r2
 8006554:	1a12      	subs	r2, r2, r0
 8006556:	445a      	add	r2, fp
 8006558:	f8de 0000 	ldr.w	r0, [lr]
 800655c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006560:	b29b      	uxth	r3, r3
 8006562:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006566:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800656a:	b292      	uxth	r2, r2
 800656c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006570:	45e1      	cmp	r9, ip
 8006572:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006576:	f84e 2b04 	str.w	r2, [lr], #4
 800657a:	d2de      	bcs.n	800653a <quorem+0x42>
 800657c:	9b00      	ldr	r3, [sp, #0]
 800657e:	58eb      	ldr	r3, [r5, r3]
 8006580:	b92b      	cbnz	r3, 800658e <quorem+0x96>
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	3b04      	subs	r3, #4
 8006586:	429d      	cmp	r5, r3
 8006588:	461a      	mov	r2, r3
 800658a:	d32f      	bcc.n	80065ec <quorem+0xf4>
 800658c:	613c      	str	r4, [r7, #16]
 800658e:	4638      	mov	r0, r7
 8006590:	f001 fb1e 	bl	8007bd0 <__mcmp>
 8006594:	2800      	cmp	r0, #0
 8006596:	db25      	blt.n	80065e4 <quorem+0xec>
 8006598:	4629      	mov	r1, r5
 800659a:	2000      	movs	r0, #0
 800659c:	f858 2b04 	ldr.w	r2, [r8], #4
 80065a0:	f8d1 c000 	ldr.w	ip, [r1]
 80065a4:	fa1f fe82 	uxth.w	lr, r2
 80065a8:	fa1f f38c 	uxth.w	r3, ip
 80065ac:	eba3 030e 	sub.w	r3, r3, lr
 80065b0:	4403      	add	r3, r0
 80065b2:	0c12      	lsrs	r2, r2, #16
 80065b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065bc:	b29b      	uxth	r3, r3
 80065be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065c2:	45c1      	cmp	r9, r8
 80065c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80065c8:	f841 3b04 	str.w	r3, [r1], #4
 80065cc:	d2e6      	bcs.n	800659c <quorem+0xa4>
 80065ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80065d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80065d6:	b922      	cbnz	r2, 80065e2 <quorem+0xea>
 80065d8:	3b04      	subs	r3, #4
 80065da:	429d      	cmp	r5, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	d30b      	bcc.n	80065f8 <quorem+0x100>
 80065e0:	613c      	str	r4, [r7, #16]
 80065e2:	3601      	adds	r6, #1
 80065e4:	4630      	mov	r0, r6
 80065e6:	b003      	add	sp, #12
 80065e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ec:	6812      	ldr	r2, [r2, #0]
 80065ee:	3b04      	subs	r3, #4
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	d1cb      	bne.n	800658c <quorem+0x94>
 80065f4:	3c01      	subs	r4, #1
 80065f6:	e7c6      	b.n	8006586 <quorem+0x8e>
 80065f8:	6812      	ldr	r2, [r2, #0]
 80065fa:	3b04      	subs	r3, #4
 80065fc:	2a00      	cmp	r2, #0
 80065fe:	d1ef      	bne.n	80065e0 <quorem+0xe8>
 8006600:	3c01      	subs	r4, #1
 8006602:	e7ea      	b.n	80065da <quorem+0xe2>
 8006604:	2000      	movs	r0, #0
 8006606:	e7ee      	b.n	80065e6 <quorem+0xee>

08006608 <_dtoa_r>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4614      	mov	r4, r2
 800660e:	461d      	mov	r5, r3
 8006610:	69c7      	ldr	r7, [r0, #28]
 8006612:	b097      	sub	sp, #92	@ 0x5c
 8006614:	4681      	mov	r9, r0
 8006616:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800661a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800661c:	b97f      	cbnz	r7, 800663e <_dtoa_r+0x36>
 800661e:	2010      	movs	r0, #16
 8006620:	f000 ff06 	bl	8007430 <malloc>
 8006624:	4602      	mov	r2, r0
 8006626:	f8c9 001c 	str.w	r0, [r9, #28]
 800662a:	b920      	cbnz	r0, 8006636 <_dtoa_r+0x2e>
 800662c:	21ef      	movs	r1, #239	@ 0xef
 800662e:	4bac      	ldr	r3, [pc, #688]	@ (80068e0 <_dtoa_r+0x2d8>)
 8006630:	48ac      	ldr	r0, [pc, #688]	@ (80068e4 <_dtoa_r+0x2dc>)
 8006632:	f001 fd95 	bl	8008160 <__assert_func>
 8006636:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800663a:	6007      	str	r7, [r0, #0]
 800663c:	60c7      	str	r7, [r0, #12]
 800663e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006642:	6819      	ldr	r1, [r3, #0]
 8006644:	b159      	cbz	r1, 800665e <_dtoa_r+0x56>
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	2301      	movs	r3, #1
 800664a:	4093      	lsls	r3, r2
 800664c:	604a      	str	r2, [r1, #4]
 800664e:	608b      	str	r3, [r1, #8]
 8006650:	4648      	mov	r0, r9
 8006652:	f001 f88b 	bl	800776c <_Bfree>
 8006656:	2200      	movs	r2, #0
 8006658:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	1e2b      	subs	r3, r5, #0
 8006660:	bfaf      	iteee	ge
 8006662:	2300      	movge	r3, #0
 8006664:	2201      	movlt	r2, #1
 8006666:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800666a:	9307      	strlt	r3, [sp, #28]
 800666c:	bfa8      	it	ge
 800666e:	6033      	strge	r3, [r6, #0]
 8006670:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006674:	4b9c      	ldr	r3, [pc, #624]	@ (80068e8 <_dtoa_r+0x2e0>)
 8006676:	bfb8      	it	lt
 8006678:	6032      	strlt	r2, [r6, #0]
 800667a:	ea33 0308 	bics.w	r3, r3, r8
 800667e:	d112      	bne.n	80066a6 <_dtoa_r+0x9e>
 8006680:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006684:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800668c:	4323      	orrs	r3, r4
 800668e:	f000 855e 	beq.w	800714e <_dtoa_r+0xb46>
 8006692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006694:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80068ec <_dtoa_r+0x2e4>
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 8560 	beq.w	800715e <_dtoa_r+0xb56>
 800669e:	f10a 0303 	add.w	r3, sl, #3
 80066a2:	f000 bd5a 	b.w	800715a <_dtoa_r+0xb52>
 80066a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80066aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80066ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066b2:	2200      	movs	r2, #0
 80066b4:	2300      	movs	r3, #0
 80066b6:	f7fa f98f 	bl	80009d8 <__aeabi_dcmpeq>
 80066ba:	4607      	mov	r7, r0
 80066bc:	b158      	cbz	r0, 80066d6 <_dtoa_r+0xce>
 80066be:	2301      	movs	r3, #1
 80066c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80066c2:	6013      	str	r3, [r2, #0]
 80066c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80066c6:	b113      	cbz	r3, 80066ce <_dtoa_r+0xc6>
 80066c8:	4b89      	ldr	r3, [pc, #548]	@ (80068f0 <_dtoa_r+0x2e8>)
 80066ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80068f4 <_dtoa_r+0x2ec>
 80066d2:	f000 bd44 	b.w	800715e <_dtoa_r+0xb56>
 80066d6:	ab14      	add	r3, sp, #80	@ 0x50
 80066d8:	9301      	str	r3, [sp, #4]
 80066da:	ab15      	add	r3, sp, #84	@ 0x54
 80066dc:	9300      	str	r3, [sp, #0]
 80066de:	4648      	mov	r0, r9
 80066e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80066e4:	f001 fb24 	bl	8007d30 <__d2b>
 80066e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80066ec:	9003      	str	r0, [sp, #12]
 80066ee:	2e00      	cmp	r6, #0
 80066f0:	d078      	beq.n	80067e4 <_dtoa_r+0x1dc>
 80066f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80066fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006700:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006704:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006708:	9712      	str	r7, [sp, #72]	@ 0x48
 800670a:	4619      	mov	r1, r3
 800670c:	2200      	movs	r2, #0
 800670e:	4b7a      	ldr	r3, [pc, #488]	@ (80068f8 <_dtoa_r+0x2f0>)
 8006710:	f7f9 fd42 	bl	8000198 <__aeabi_dsub>
 8006714:	a36c      	add	r3, pc, #432	@ (adr r3, 80068c8 <_dtoa_r+0x2c0>)
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f7f9 fef5 	bl	8000508 <__aeabi_dmul>
 800671e:	a36c      	add	r3, pc, #432	@ (adr r3, 80068d0 <_dtoa_r+0x2c8>)
 8006720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006724:	f7f9 fd3a 	bl	800019c <__adddf3>
 8006728:	4604      	mov	r4, r0
 800672a:	4630      	mov	r0, r6
 800672c:	460d      	mov	r5, r1
 800672e:	f7f9 fe81 	bl	8000434 <__aeabi_i2d>
 8006732:	a369      	add	r3, pc, #420	@ (adr r3, 80068d8 <_dtoa_r+0x2d0>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 fee6 	bl	8000508 <__aeabi_dmul>
 800673c:	4602      	mov	r2, r0
 800673e:	460b      	mov	r3, r1
 8006740:	4620      	mov	r0, r4
 8006742:	4629      	mov	r1, r5
 8006744:	f7f9 fd2a 	bl	800019c <__adddf3>
 8006748:	4604      	mov	r4, r0
 800674a:	460d      	mov	r5, r1
 800674c:	f7fa f98c 	bl	8000a68 <__aeabi_d2iz>
 8006750:	2200      	movs	r2, #0
 8006752:	4607      	mov	r7, r0
 8006754:	2300      	movs	r3, #0
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7fa f947 	bl	80009ec <__aeabi_dcmplt>
 800675e:	b140      	cbz	r0, 8006772 <_dtoa_r+0x16a>
 8006760:	4638      	mov	r0, r7
 8006762:	f7f9 fe67 	bl	8000434 <__aeabi_i2d>
 8006766:	4622      	mov	r2, r4
 8006768:	462b      	mov	r3, r5
 800676a:	f7fa f935 	bl	80009d8 <__aeabi_dcmpeq>
 800676e:	b900      	cbnz	r0, 8006772 <_dtoa_r+0x16a>
 8006770:	3f01      	subs	r7, #1
 8006772:	2f16      	cmp	r7, #22
 8006774:	d854      	bhi.n	8006820 <_dtoa_r+0x218>
 8006776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800677a:	4b60      	ldr	r3, [pc, #384]	@ (80068fc <_dtoa_r+0x2f4>)
 800677c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7fa f932 	bl	80009ec <__aeabi_dcmplt>
 8006788:	2800      	cmp	r0, #0
 800678a:	d04b      	beq.n	8006824 <_dtoa_r+0x21c>
 800678c:	2300      	movs	r3, #0
 800678e:	3f01      	subs	r7, #1
 8006790:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006794:	1b9b      	subs	r3, r3, r6
 8006796:	1e5a      	subs	r2, r3, #1
 8006798:	bf49      	itett	mi
 800679a:	f1c3 0301 	rsbmi	r3, r3, #1
 800679e:	2300      	movpl	r3, #0
 80067a0:	9304      	strmi	r3, [sp, #16]
 80067a2:	2300      	movmi	r3, #0
 80067a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067a6:	bf54      	ite	pl
 80067a8:	9304      	strpl	r3, [sp, #16]
 80067aa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80067ac:	2f00      	cmp	r7, #0
 80067ae:	db3b      	blt.n	8006828 <_dtoa_r+0x220>
 80067b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b2:	970e      	str	r7, [sp, #56]	@ 0x38
 80067b4:	443b      	add	r3, r7
 80067b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b8:	2300      	movs	r3, #0
 80067ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80067bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067be:	2b09      	cmp	r3, #9
 80067c0:	d865      	bhi.n	800688e <_dtoa_r+0x286>
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	bfc4      	itt	gt
 80067c6:	3b04      	subgt	r3, #4
 80067c8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80067ca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067cc:	bfc8      	it	gt
 80067ce:	2400      	movgt	r4, #0
 80067d0:	f1a3 0302 	sub.w	r3, r3, #2
 80067d4:	bfd8      	it	le
 80067d6:	2401      	movle	r4, #1
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d864      	bhi.n	80068a6 <_dtoa_r+0x29e>
 80067dc:	e8df f003 	tbb	[pc, r3]
 80067e0:	2c385553 	.word	0x2c385553
 80067e4:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80067e8:	441e      	add	r6, r3
 80067ea:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80067ee:	2b20      	cmp	r3, #32
 80067f0:	bfc1      	itttt	gt
 80067f2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80067f6:	fa08 f803 	lslgt.w	r8, r8, r3
 80067fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80067fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006802:	bfd6      	itet	le
 8006804:	f1c3 0320 	rsble	r3, r3, #32
 8006808:	ea48 0003 	orrgt.w	r0, r8, r3
 800680c:	fa04 f003 	lslle.w	r0, r4, r3
 8006810:	f7f9 fe00 	bl	8000414 <__aeabi_ui2d>
 8006814:	2201      	movs	r2, #1
 8006816:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800681a:	3e01      	subs	r6, #1
 800681c:	9212      	str	r2, [sp, #72]	@ 0x48
 800681e:	e774      	b.n	800670a <_dtoa_r+0x102>
 8006820:	2301      	movs	r3, #1
 8006822:	e7b5      	b.n	8006790 <_dtoa_r+0x188>
 8006824:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006826:	e7b4      	b.n	8006792 <_dtoa_r+0x18a>
 8006828:	9b04      	ldr	r3, [sp, #16]
 800682a:	1bdb      	subs	r3, r3, r7
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	427b      	negs	r3, r7
 8006830:	930a      	str	r3, [sp, #40]	@ 0x28
 8006832:	2300      	movs	r3, #0
 8006834:	930e      	str	r3, [sp, #56]	@ 0x38
 8006836:	e7c1      	b.n	80067bc <_dtoa_r+0x1b4>
 8006838:	2301      	movs	r3, #1
 800683a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800683c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800683e:	eb07 0b03 	add.w	fp, r7, r3
 8006842:	f10b 0301 	add.w	r3, fp, #1
 8006846:	2b01      	cmp	r3, #1
 8006848:	9308      	str	r3, [sp, #32]
 800684a:	bfb8      	it	lt
 800684c:	2301      	movlt	r3, #1
 800684e:	e006      	b.n	800685e <_dtoa_r+0x256>
 8006850:	2301      	movs	r3, #1
 8006852:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006854:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006856:	2b00      	cmp	r3, #0
 8006858:	dd28      	ble.n	80068ac <_dtoa_r+0x2a4>
 800685a:	469b      	mov	fp, r3
 800685c:	9308      	str	r3, [sp, #32]
 800685e:	2100      	movs	r1, #0
 8006860:	2204      	movs	r2, #4
 8006862:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006866:	f102 0514 	add.w	r5, r2, #20
 800686a:	429d      	cmp	r5, r3
 800686c:	d926      	bls.n	80068bc <_dtoa_r+0x2b4>
 800686e:	6041      	str	r1, [r0, #4]
 8006870:	4648      	mov	r0, r9
 8006872:	f000 ff3b 	bl	80076ec <_Balloc>
 8006876:	4682      	mov	sl, r0
 8006878:	2800      	cmp	r0, #0
 800687a:	d143      	bne.n	8006904 <_dtoa_r+0x2fc>
 800687c:	4602      	mov	r2, r0
 800687e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006882:	4b1f      	ldr	r3, [pc, #124]	@ (8006900 <_dtoa_r+0x2f8>)
 8006884:	e6d4      	b.n	8006630 <_dtoa_r+0x28>
 8006886:	2300      	movs	r3, #0
 8006888:	e7e3      	b.n	8006852 <_dtoa_r+0x24a>
 800688a:	2300      	movs	r3, #0
 800688c:	e7d5      	b.n	800683a <_dtoa_r+0x232>
 800688e:	2401      	movs	r4, #1
 8006890:	2300      	movs	r3, #0
 8006892:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006894:	9320      	str	r3, [sp, #128]	@ 0x80
 8006896:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800689a:	2200      	movs	r2, #0
 800689c:	2312      	movs	r3, #18
 800689e:	f8cd b020 	str.w	fp, [sp, #32]
 80068a2:	9221      	str	r2, [sp, #132]	@ 0x84
 80068a4:	e7db      	b.n	800685e <_dtoa_r+0x256>
 80068a6:	2301      	movs	r3, #1
 80068a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068aa:	e7f4      	b.n	8006896 <_dtoa_r+0x28e>
 80068ac:	f04f 0b01 	mov.w	fp, #1
 80068b0:	465b      	mov	r3, fp
 80068b2:	f8cd b020 	str.w	fp, [sp, #32]
 80068b6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80068ba:	e7d0      	b.n	800685e <_dtoa_r+0x256>
 80068bc:	3101      	adds	r1, #1
 80068be:	0052      	lsls	r2, r2, #1
 80068c0:	e7d1      	b.n	8006866 <_dtoa_r+0x25e>
 80068c2:	bf00      	nop
 80068c4:	f3af 8000 	nop.w
 80068c8:	636f4361 	.word	0x636f4361
 80068cc:	3fd287a7 	.word	0x3fd287a7
 80068d0:	8b60c8b3 	.word	0x8b60c8b3
 80068d4:	3fc68a28 	.word	0x3fc68a28
 80068d8:	509f79fb 	.word	0x509f79fb
 80068dc:	3fd34413 	.word	0x3fd34413
 80068e0:	08008d9d 	.word	0x08008d9d
 80068e4:	08008db4 	.word	0x08008db4
 80068e8:	7ff00000 	.word	0x7ff00000
 80068ec:	08008d99 	.word	0x08008d99
 80068f0:	08008d6d 	.word	0x08008d6d
 80068f4:	08008d6c 	.word	0x08008d6c
 80068f8:	3ff80000 	.word	0x3ff80000
 80068fc:	08008f08 	.word	0x08008f08
 8006900:	08008e0c 	.word	0x08008e0c
 8006904:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006908:	6018      	str	r0, [r3, #0]
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	2b0e      	cmp	r3, #14
 800690e:	f200 80a1 	bhi.w	8006a54 <_dtoa_r+0x44c>
 8006912:	2c00      	cmp	r4, #0
 8006914:	f000 809e 	beq.w	8006a54 <_dtoa_r+0x44c>
 8006918:	2f00      	cmp	r7, #0
 800691a:	dd33      	ble.n	8006984 <_dtoa_r+0x37c>
 800691c:	4b9c      	ldr	r3, [pc, #624]	@ (8006b90 <_dtoa_r+0x588>)
 800691e:	f007 020f 	and.w	r2, r7, #15
 8006922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006926:	05f8      	lsls	r0, r7, #23
 8006928:	e9d3 3400 	ldrd	r3, r4, [r3]
 800692c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8006930:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006934:	d516      	bpl.n	8006964 <_dtoa_r+0x35c>
 8006936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800693a:	4b96      	ldr	r3, [pc, #600]	@ (8006b94 <_dtoa_r+0x58c>)
 800693c:	2603      	movs	r6, #3
 800693e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006942:	f7f9 ff0b 	bl	800075c <__aeabi_ddiv>
 8006946:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800694a:	f004 040f 	and.w	r4, r4, #15
 800694e:	4d91      	ldr	r5, [pc, #580]	@ (8006b94 <_dtoa_r+0x58c>)
 8006950:	b954      	cbnz	r4, 8006968 <_dtoa_r+0x360>
 8006952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006956:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800695a:	f7f9 feff 	bl	800075c <__aeabi_ddiv>
 800695e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006962:	e028      	b.n	80069b6 <_dtoa_r+0x3ae>
 8006964:	2602      	movs	r6, #2
 8006966:	e7f2      	b.n	800694e <_dtoa_r+0x346>
 8006968:	07e1      	lsls	r1, r4, #31
 800696a:	d508      	bpl.n	800697e <_dtoa_r+0x376>
 800696c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006970:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006974:	f7f9 fdc8 	bl	8000508 <__aeabi_dmul>
 8006978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800697c:	3601      	adds	r6, #1
 800697e:	1064      	asrs	r4, r4, #1
 8006980:	3508      	adds	r5, #8
 8006982:	e7e5      	b.n	8006950 <_dtoa_r+0x348>
 8006984:	f000 80af 	beq.w	8006ae6 <_dtoa_r+0x4de>
 8006988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800698c:	427c      	negs	r4, r7
 800698e:	4b80      	ldr	r3, [pc, #512]	@ (8006b90 <_dtoa_r+0x588>)
 8006990:	f004 020f 	and.w	r2, r4, #15
 8006994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699c:	f7f9 fdb4 	bl	8000508 <__aeabi_dmul>
 80069a0:	2602      	movs	r6, #2
 80069a2:	2300      	movs	r3, #0
 80069a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069a8:	4d7a      	ldr	r5, [pc, #488]	@ (8006b94 <_dtoa_r+0x58c>)
 80069aa:	1124      	asrs	r4, r4, #4
 80069ac:	2c00      	cmp	r4, #0
 80069ae:	f040 808f 	bne.w	8006ad0 <_dtoa_r+0x4c8>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1d3      	bne.n	800695e <_dtoa_r+0x356>
 80069b6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80069ba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 8094 	beq.w	8006aea <_dtoa_r+0x4e2>
 80069c2:	2200      	movs	r2, #0
 80069c4:	4620      	mov	r0, r4
 80069c6:	4629      	mov	r1, r5
 80069c8:	4b73      	ldr	r3, [pc, #460]	@ (8006b98 <_dtoa_r+0x590>)
 80069ca:	f7fa f80f 	bl	80009ec <__aeabi_dcmplt>
 80069ce:	2800      	cmp	r0, #0
 80069d0:	f000 808b 	beq.w	8006aea <_dtoa_r+0x4e2>
 80069d4:	9b08      	ldr	r3, [sp, #32]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 8087 	beq.w	8006aea <_dtoa_r+0x4e2>
 80069dc:	f1bb 0f00 	cmp.w	fp, #0
 80069e0:	dd34      	ble.n	8006a4c <_dtoa_r+0x444>
 80069e2:	4620      	mov	r0, r4
 80069e4:	2200      	movs	r2, #0
 80069e6:	4629      	mov	r1, r5
 80069e8:	4b6c      	ldr	r3, [pc, #432]	@ (8006b9c <_dtoa_r+0x594>)
 80069ea:	f7f9 fd8d 	bl	8000508 <__aeabi_dmul>
 80069ee:	465c      	mov	r4, fp
 80069f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069f4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80069f8:	3601      	adds	r6, #1
 80069fa:	4630      	mov	r0, r6
 80069fc:	f7f9 fd1a 	bl	8000434 <__aeabi_i2d>
 8006a00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a04:	f7f9 fd80 	bl	8000508 <__aeabi_dmul>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	4b65      	ldr	r3, [pc, #404]	@ (8006ba0 <_dtoa_r+0x598>)
 8006a0c:	f7f9 fbc6 	bl	800019c <__adddf3>
 8006a10:	4605      	mov	r5, r0
 8006a12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a16:	2c00      	cmp	r4, #0
 8006a18:	d16a      	bne.n	8006af0 <_dtoa_r+0x4e8>
 8006a1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4b60      	ldr	r3, [pc, #384]	@ (8006ba4 <_dtoa_r+0x59c>)
 8006a22:	f7f9 fbb9 	bl	8000198 <__aeabi_dsub>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a2e:	462a      	mov	r2, r5
 8006a30:	4633      	mov	r3, r6
 8006a32:	f7f9 fff9 	bl	8000a28 <__aeabi_dcmpgt>
 8006a36:	2800      	cmp	r0, #0
 8006a38:	f040 8298 	bne.w	8006f6c <_dtoa_r+0x964>
 8006a3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006a40:	462a      	mov	r2, r5
 8006a42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a46:	f7f9 ffd1 	bl	80009ec <__aeabi_dcmplt>
 8006a4a:	bb38      	cbnz	r0, 8006a9c <_dtoa_r+0x494>
 8006a4c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006a50:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006a54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f2c0 8157 	blt.w	8006d0a <_dtoa_r+0x702>
 8006a5c:	2f0e      	cmp	r7, #14
 8006a5e:	f300 8154 	bgt.w	8006d0a <_dtoa_r+0x702>
 8006a62:	4b4b      	ldr	r3, [pc, #300]	@ (8006b90 <_dtoa_r+0x588>)
 8006a64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006a6c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006a70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f280 80e5 	bge.w	8006c42 <_dtoa_r+0x63a>
 8006a78:	9b08      	ldr	r3, [sp, #32]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f300 80e1 	bgt.w	8006c42 <_dtoa_r+0x63a>
 8006a80:	d10c      	bne.n	8006a9c <_dtoa_r+0x494>
 8006a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a86:	2200      	movs	r2, #0
 8006a88:	4b46      	ldr	r3, [pc, #280]	@ (8006ba4 <_dtoa_r+0x59c>)
 8006a8a:	f7f9 fd3d 	bl	8000508 <__aeabi_dmul>
 8006a8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006a92:	f7f9 ffbf 	bl	8000a14 <__aeabi_dcmpge>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f000 8266 	beq.w	8006f68 <_dtoa_r+0x960>
 8006a9c:	2400      	movs	r4, #0
 8006a9e:	4625      	mov	r5, r4
 8006aa0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006aa2:	4656      	mov	r6, sl
 8006aa4:	ea6f 0803 	mvn.w	r8, r3
 8006aa8:	2700      	movs	r7, #0
 8006aaa:	4621      	mov	r1, r4
 8006aac:	4648      	mov	r0, r9
 8006aae:	f000 fe5d 	bl	800776c <_Bfree>
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	f000 80bd 	beq.w	8006c32 <_dtoa_r+0x62a>
 8006ab8:	b12f      	cbz	r7, 8006ac6 <_dtoa_r+0x4be>
 8006aba:	42af      	cmp	r7, r5
 8006abc:	d003      	beq.n	8006ac6 <_dtoa_r+0x4be>
 8006abe:	4639      	mov	r1, r7
 8006ac0:	4648      	mov	r0, r9
 8006ac2:	f000 fe53 	bl	800776c <_Bfree>
 8006ac6:	4629      	mov	r1, r5
 8006ac8:	4648      	mov	r0, r9
 8006aca:	f000 fe4f 	bl	800776c <_Bfree>
 8006ace:	e0b0      	b.n	8006c32 <_dtoa_r+0x62a>
 8006ad0:	07e2      	lsls	r2, r4, #31
 8006ad2:	d505      	bpl.n	8006ae0 <_dtoa_r+0x4d8>
 8006ad4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006ad8:	f7f9 fd16 	bl	8000508 <__aeabi_dmul>
 8006adc:	2301      	movs	r3, #1
 8006ade:	3601      	adds	r6, #1
 8006ae0:	1064      	asrs	r4, r4, #1
 8006ae2:	3508      	adds	r5, #8
 8006ae4:	e762      	b.n	80069ac <_dtoa_r+0x3a4>
 8006ae6:	2602      	movs	r6, #2
 8006ae8:	e765      	b.n	80069b6 <_dtoa_r+0x3ae>
 8006aea:	46b8      	mov	r8, r7
 8006aec:	9c08      	ldr	r4, [sp, #32]
 8006aee:	e784      	b.n	80069fa <_dtoa_r+0x3f2>
 8006af0:	4b27      	ldr	r3, [pc, #156]	@ (8006b90 <_dtoa_r+0x588>)
 8006af2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006af4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006afc:	4454      	add	r4, sl
 8006afe:	2900      	cmp	r1, #0
 8006b00:	d054      	beq.n	8006bac <_dtoa_r+0x5a4>
 8006b02:	2000      	movs	r0, #0
 8006b04:	4928      	ldr	r1, [pc, #160]	@ (8006ba8 <_dtoa_r+0x5a0>)
 8006b06:	f7f9 fe29 	bl	800075c <__aeabi_ddiv>
 8006b0a:	4633      	mov	r3, r6
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	f7f9 fb43 	bl	8000198 <__aeabi_dsub>
 8006b12:	4656      	mov	r6, sl
 8006b14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b1c:	f7f9 ffa4 	bl	8000a68 <__aeabi_d2iz>
 8006b20:	4605      	mov	r5, r0
 8006b22:	f7f9 fc87 	bl	8000434 <__aeabi_i2d>
 8006b26:	4602      	mov	r2, r0
 8006b28:	460b      	mov	r3, r1
 8006b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b2e:	f7f9 fb33 	bl	8000198 <__aeabi_dsub>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	3530      	adds	r5, #48	@ 0x30
 8006b38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b40:	f806 5b01 	strb.w	r5, [r6], #1
 8006b44:	f7f9 ff52 	bl	80009ec <__aeabi_dcmplt>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d172      	bne.n	8006c32 <_dtoa_r+0x62a>
 8006b4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b50:	2000      	movs	r0, #0
 8006b52:	4911      	ldr	r1, [pc, #68]	@ (8006b98 <_dtoa_r+0x590>)
 8006b54:	f7f9 fb20 	bl	8000198 <__aeabi_dsub>
 8006b58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b5c:	f7f9 ff46 	bl	80009ec <__aeabi_dcmplt>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f040 80b4 	bne.w	8006cce <_dtoa_r+0x6c6>
 8006b66:	42a6      	cmp	r6, r4
 8006b68:	f43f af70 	beq.w	8006a4c <_dtoa_r+0x444>
 8006b6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b70:	2200      	movs	r2, #0
 8006b72:	4b0a      	ldr	r3, [pc, #40]	@ (8006b9c <_dtoa_r+0x594>)
 8006b74:	f7f9 fcc8 	bl	8000508 <__aeabi_dmul>
 8006b78:	2200      	movs	r2, #0
 8006b7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b82:	4b06      	ldr	r3, [pc, #24]	@ (8006b9c <_dtoa_r+0x594>)
 8006b84:	f7f9 fcc0 	bl	8000508 <__aeabi_dmul>
 8006b88:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006b8c:	e7c4      	b.n	8006b18 <_dtoa_r+0x510>
 8006b8e:	bf00      	nop
 8006b90:	08008f08 	.word	0x08008f08
 8006b94:	08008ee0 	.word	0x08008ee0
 8006b98:	3ff00000 	.word	0x3ff00000
 8006b9c:	40240000 	.word	0x40240000
 8006ba0:	401c0000 	.word	0x401c0000
 8006ba4:	40140000 	.word	0x40140000
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f7f9 fcaa 	bl	8000508 <__aeabi_dmul>
 8006bb4:	4656      	mov	r6, sl
 8006bb6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bba:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006bbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bc0:	f7f9 ff52 	bl	8000a68 <__aeabi_d2iz>
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	f7f9 fc35 	bl	8000434 <__aeabi_i2d>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bd2:	f7f9 fae1 	bl	8000198 <__aeabi_dsub>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	460b      	mov	r3, r1
 8006bda:	3530      	adds	r5, #48	@ 0x30
 8006bdc:	f806 5b01 	strb.w	r5, [r6], #1
 8006be0:	42a6      	cmp	r6, r4
 8006be2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006be6:	f04f 0200 	mov.w	r2, #0
 8006bea:	d124      	bne.n	8006c36 <_dtoa_r+0x62e>
 8006bec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006bf0:	4bae      	ldr	r3, [pc, #696]	@ (8006eac <_dtoa_r+0x8a4>)
 8006bf2:	f7f9 fad3 	bl	800019c <__adddf3>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	460b      	mov	r3, r1
 8006bfa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bfe:	f7f9 ff13 	bl	8000a28 <__aeabi_dcmpgt>
 8006c02:	2800      	cmp	r0, #0
 8006c04:	d163      	bne.n	8006cce <_dtoa_r+0x6c6>
 8006c06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c0a:	2000      	movs	r0, #0
 8006c0c:	49a7      	ldr	r1, [pc, #668]	@ (8006eac <_dtoa_r+0x8a4>)
 8006c0e:	f7f9 fac3 	bl	8000198 <__aeabi_dsub>
 8006c12:	4602      	mov	r2, r0
 8006c14:	460b      	mov	r3, r1
 8006c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c1a:	f7f9 fee7 	bl	80009ec <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f43f af14 	beq.w	8006a4c <_dtoa_r+0x444>
 8006c24:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006c26:	1e73      	subs	r3, r6, #1
 8006c28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c2a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c2e:	2b30      	cmp	r3, #48	@ 0x30
 8006c30:	d0f8      	beq.n	8006c24 <_dtoa_r+0x61c>
 8006c32:	4647      	mov	r7, r8
 8006c34:	e03b      	b.n	8006cae <_dtoa_r+0x6a6>
 8006c36:	4b9e      	ldr	r3, [pc, #632]	@ (8006eb0 <_dtoa_r+0x8a8>)
 8006c38:	f7f9 fc66 	bl	8000508 <__aeabi_dmul>
 8006c3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c40:	e7bc      	b.n	8006bbc <_dtoa_r+0x5b4>
 8006c42:	4656      	mov	r6, sl
 8006c44:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8006c48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	4629      	mov	r1, r5
 8006c50:	f7f9 fd84 	bl	800075c <__aeabi_ddiv>
 8006c54:	f7f9 ff08 	bl	8000a68 <__aeabi_d2iz>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	f7f9 fbeb 	bl	8000434 <__aeabi_i2d>
 8006c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c62:	f7f9 fc51 	bl	8000508 <__aeabi_dmul>
 8006c66:	4602      	mov	r2, r0
 8006c68:	460b      	mov	r3, r1
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	f7f9 fa93 	bl	8000198 <__aeabi_dsub>
 8006c72:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c76:	9d08      	ldr	r5, [sp, #32]
 8006c78:	f806 4b01 	strb.w	r4, [r6], #1
 8006c7c:	eba6 040a 	sub.w	r4, r6, sl
 8006c80:	42a5      	cmp	r5, r4
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	d133      	bne.n	8006cf0 <_dtoa_r+0x6e8>
 8006c88:	f7f9 fa88 	bl	800019c <__adddf3>
 8006c8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	f7f9 fec8 	bl	8000a28 <__aeabi_dcmpgt>
 8006c98:	b9c0      	cbnz	r0, 8006ccc <_dtoa_r+0x6c4>
 8006c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 fe99 	bl	80009d8 <__aeabi_dcmpeq>
 8006ca6:	b110      	cbz	r0, 8006cae <_dtoa_r+0x6a6>
 8006ca8:	f018 0f01 	tst.w	r8, #1
 8006cac:	d10e      	bne.n	8006ccc <_dtoa_r+0x6c4>
 8006cae:	4648      	mov	r0, r9
 8006cb0:	9903      	ldr	r1, [sp, #12]
 8006cb2:	f000 fd5b 	bl	800776c <_Bfree>
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	7033      	strb	r3, [r6, #0]
 8006cba:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006cbc:	3701      	adds	r7, #1
 8006cbe:	601f      	str	r7, [r3, #0]
 8006cc0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 824b 	beq.w	800715e <_dtoa_r+0xb56>
 8006cc8:	601e      	str	r6, [r3, #0]
 8006cca:	e248      	b.n	800715e <_dtoa_r+0xb56>
 8006ccc:	46b8      	mov	r8, r7
 8006cce:	4633      	mov	r3, r6
 8006cd0:	461e      	mov	r6, r3
 8006cd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cd6:	2a39      	cmp	r2, #57	@ 0x39
 8006cd8:	d106      	bne.n	8006ce8 <_dtoa_r+0x6e0>
 8006cda:	459a      	cmp	sl, r3
 8006cdc:	d1f8      	bne.n	8006cd0 <_dtoa_r+0x6c8>
 8006cde:	2230      	movs	r2, #48	@ 0x30
 8006ce0:	f108 0801 	add.w	r8, r8, #1
 8006ce4:	f88a 2000 	strb.w	r2, [sl]
 8006ce8:	781a      	ldrb	r2, [r3, #0]
 8006cea:	3201      	adds	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e7a0      	b.n	8006c32 <_dtoa_r+0x62a>
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	4b6f      	ldr	r3, [pc, #444]	@ (8006eb0 <_dtoa_r+0x8a8>)
 8006cf4:	f7f9 fc08 	bl	8000508 <__aeabi_dmul>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	460d      	mov	r5, r1
 8006d00:	f7f9 fe6a 	bl	80009d8 <__aeabi_dcmpeq>
 8006d04:	2800      	cmp	r0, #0
 8006d06:	d09f      	beq.n	8006c48 <_dtoa_r+0x640>
 8006d08:	e7d1      	b.n	8006cae <_dtoa_r+0x6a6>
 8006d0a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d0c:	2a00      	cmp	r2, #0
 8006d0e:	f000 80ea 	beq.w	8006ee6 <_dtoa_r+0x8de>
 8006d12:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d14:	2a01      	cmp	r2, #1
 8006d16:	f300 80cd 	bgt.w	8006eb4 <_dtoa_r+0x8ac>
 8006d1a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006d1c:	2a00      	cmp	r2, #0
 8006d1e:	f000 80c1 	beq.w	8006ea4 <_dtoa_r+0x89c>
 8006d22:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d26:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d28:	9e04      	ldr	r6, [sp, #16]
 8006d2a:	9a04      	ldr	r2, [sp, #16]
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	441a      	add	r2, r3
 8006d30:	9204      	str	r2, [sp, #16]
 8006d32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d34:	4648      	mov	r0, r9
 8006d36:	441a      	add	r2, r3
 8006d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d3a:	f000 fdcb 	bl	80078d4 <__i2b>
 8006d3e:	4605      	mov	r5, r0
 8006d40:	b166      	cbz	r6, 8006d5c <_dtoa_r+0x754>
 8006d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dd09      	ble.n	8006d5c <_dtoa_r+0x754>
 8006d48:	42b3      	cmp	r3, r6
 8006d4a:	bfa8      	it	ge
 8006d4c:	4633      	movge	r3, r6
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	1af6      	subs	r6, r6, r3
 8006d52:	1ad2      	subs	r2, r2, r3
 8006d54:	9204      	str	r2, [sp, #16]
 8006d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d5e:	b30b      	cbz	r3, 8006da4 <_dtoa_r+0x79c>
 8006d60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80c6 	beq.w	8006ef4 <_dtoa_r+0x8ec>
 8006d68:	2c00      	cmp	r4, #0
 8006d6a:	f000 80c0 	beq.w	8006eee <_dtoa_r+0x8e6>
 8006d6e:	4629      	mov	r1, r5
 8006d70:	4622      	mov	r2, r4
 8006d72:	4648      	mov	r0, r9
 8006d74:	f000 fe66 	bl	8007a44 <__pow5mult>
 8006d78:	9a03      	ldr	r2, [sp, #12]
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	4605      	mov	r5, r0
 8006d7e:	4648      	mov	r0, r9
 8006d80:	f000 fdbe 	bl	8007900 <__multiply>
 8006d84:	9903      	ldr	r1, [sp, #12]
 8006d86:	4680      	mov	r8, r0
 8006d88:	4648      	mov	r0, r9
 8006d8a:	f000 fcef 	bl	800776c <_Bfree>
 8006d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d90:	1b1b      	subs	r3, r3, r4
 8006d92:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d94:	f000 80b1 	beq.w	8006efa <_dtoa_r+0x8f2>
 8006d98:	4641      	mov	r1, r8
 8006d9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f000 fe51 	bl	8007a44 <__pow5mult>
 8006da2:	9003      	str	r0, [sp, #12]
 8006da4:	2101      	movs	r1, #1
 8006da6:	4648      	mov	r0, r9
 8006da8:	f000 fd94 	bl	80078d4 <__i2b>
 8006dac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dae:	4604      	mov	r4, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f000 81d8 	beq.w	8007166 <_dtoa_r+0xb5e>
 8006db6:	461a      	mov	r2, r3
 8006db8:	4601      	mov	r1, r0
 8006dba:	4648      	mov	r0, r9
 8006dbc:	f000 fe42 	bl	8007a44 <__pow5mult>
 8006dc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	f300 809f 	bgt.w	8006f08 <_dtoa_r+0x900>
 8006dca:	9b06      	ldr	r3, [sp, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	f040 8097 	bne.w	8006f00 <_dtoa_r+0x8f8>
 8006dd2:	9b07      	ldr	r3, [sp, #28]
 8006dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f040 8093 	bne.w	8006f04 <_dtoa_r+0x8fc>
 8006dde:	9b07      	ldr	r3, [sp, #28]
 8006de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006de4:	0d1b      	lsrs	r3, r3, #20
 8006de6:	051b      	lsls	r3, r3, #20
 8006de8:	b133      	cbz	r3, 8006df8 <_dtoa_r+0x7f0>
 8006dea:	9b04      	ldr	r3, [sp, #16]
 8006dec:	3301      	adds	r3, #1
 8006dee:	9304      	str	r3, [sp, #16]
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	3301      	adds	r3, #1
 8006df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006df6:	2301      	movs	r3, #1
 8006df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f000 81b8 	beq.w	8007172 <_dtoa_r+0xb6a>
 8006e02:	6923      	ldr	r3, [r4, #16]
 8006e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e08:	6918      	ldr	r0, [r3, #16]
 8006e0a:	f000 fd17 	bl	800783c <__hi0bits>
 8006e0e:	f1c0 0020 	rsb	r0, r0, #32
 8006e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e14:	4418      	add	r0, r3
 8006e16:	f010 001f 	ands.w	r0, r0, #31
 8006e1a:	f000 8082 	beq.w	8006f22 <_dtoa_r+0x91a>
 8006e1e:	f1c0 0320 	rsb	r3, r0, #32
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	dd73      	ble.n	8006f0e <_dtoa_r+0x906>
 8006e26:	9b04      	ldr	r3, [sp, #16]
 8006e28:	f1c0 001c 	rsb	r0, r0, #28
 8006e2c:	4403      	add	r3, r0
 8006e2e:	9304      	str	r3, [sp, #16]
 8006e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e32:	4406      	add	r6, r0
 8006e34:	4403      	add	r3, r0
 8006e36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e38:	9b04      	ldr	r3, [sp, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	dd05      	ble.n	8006e4a <_dtoa_r+0x842>
 8006e3e:	461a      	mov	r2, r3
 8006e40:	4648      	mov	r0, r9
 8006e42:	9903      	ldr	r1, [sp, #12]
 8006e44:	f000 fe58 	bl	8007af8 <__lshift>
 8006e48:	9003      	str	r0, [sp, #12]
 8006e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	dd05      	ble.n	8006e5c <_dtoa_r+0x854>
 8006e50:	4621      	mov	r1, r4
 8006e52:	461a      	mov	r2, r3
 8006e54:	4648      	mov	r0, r9
 8006e56:	f000 fe4f 	bl	8007af8 <__lshift>
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d061      	beq.n	8006f26 <_dtoa_r+0x91e>
 8006e62:	4621      	mov	r1, r4
 8006e64:	9803      	ldr	r0, [sp, #12]
 8006e66:	f000 feb3 	bl	8007bd0 <__mcmp>
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	da5b      	bge.n	8006f26 <_dtoa_r+0x91e>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	220a      	movs	r2, #10
 8006e72:	4648      	mov	r0, r9
 8006e74:	9903      	ldr	r1, [sp, #12]
 8006e76:	f000 fc9b 	bl	80077b0 <__multadd>
 8006e7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e7c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8006e80:	9003      	str	r0, [sp, #12]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 8177 	beq.w	8007176 <_dtoa_r+0xb6e>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	220a      	movs	r2, #10
 8006e8e:	4648      	mov	r0, r9
 8006e90:	f000 fc8e 	bl	80077b0 <__multadd>
 8006e94:	f1bb 0f00 	cmp.w	fp, #0
 8006e98:	4605      	mov	r5, r0
 8006e9a:	dc6f      	bgt.n	8006f7c <_dtoa_r+0x974>
 8006e9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	dc49      	bgt.n	8006f36 <_dtoa_r+0x92e>
 8006ea2:	e06b      	b.n	8006f7c <_dtoa_r+0x974>
 8006ea4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ea6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006eaa:	e73c      	b.n	8006d26 <_dtoa_r+0x71e>
 8006eac:	3fe00000 	.word	0x3fe00000
 8006eb0:	40240000 	.word	0x40240000
 8006eb4:	9b08      	ldr	r3, [sp, #32]
 8006eb6:	1e5c      	subs	r4, r3, #1
 8006eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eba:	42a3      	cmp	r3, r4
 8006ebc:	db09      	blt.n	8006ed2 <_dtoa_r+0x8ca>
 8006ebe:	1b1c      	subs	r4, r3, r4
 8006ec0:	9b08      	ldr	r3, [sp, #32]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f6bf af30 	bge.w	8006d28 <_dtoa_r+0x720>
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	9a08      	ldr	r2, [sp, #32]
 8006ecc:	1a9e      	subs	r6, r3, r2
 8006ece:	2300      	movs	r3, #0
 8006ed0:	e72b      	b.n	8006d2a <_dtoa_r+0x722>
 8006ed2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ed6:	1ae3      	subs	r3, r4, r3
 8006ed8:	441a      	add	r2, r3
 8006eda:	940a      	str	r4, [sp, #40]	@ 0x28
 8006edc:	9e04      	ldr	r6, [sp, #16]
 8006ede:	2400      	movs	r4, #0
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ee4:	e721      	b.n	8006d2a <_dtoa_r+0x722>
 8006ee6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ee8:	9e04      	ldr	r6, [sp, #16]
 8006eea:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006eec:	e728      	b.n	8006d40 <_dtoa_r+0x738>
 8006eee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006ef2:	e751      	b.n	8006d98 <_dtoa_r+0x790>
 8006ef4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ef6:	9903      	ldr	r1, [sp, #12]
 8006ef8:	e750      	b.n	8006d9c <_dtoa_r+0x794>
 8006efa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006efe:	e751      	b.n	8006da4 <_dtoa_r+0x79c>
 8006f00:	2300      	movs	r3, #0
 8006f02:	e779      	b.n	8006df8 <_dtoa_r+0x7f0>
 8006f04:	9b06      	ldr	r3, [sp, #24]
 8006f06:	e777      	b.n	8006df8 <_dtoa_r+0x7f0>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f0c:	e779      	b.n	8006e02 <_dtoa_r+0x7fa>
 8006f0e:	d093      	beq.n	8006e38 <_dtoa_r+0x830>
 8006f10:	9a04      	ldr	r2, [sp, #16]
 8006f12:	331c      	adds	r3, #28
 8006f14:	441a      	add	r2, r3
 8006f16:	9204      	str	r2, [sp, #16]
 8006f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f1a:	441e      	add	r6, r3
 8006f1c:	441a      	add	r2, r3
 8006f1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f20:	e78a      	b.n	8006e38 <_dtoa_r+0x830>
 8006f22:	4603      	mov	r3, r0
 8006f24:	e7f4      	b.n	8006f10 <_dtoa_r+0x908>
 8006f26:	9b08      	ldr	r3, [sp, #32]
 8006f28:	46b8      	mov	r8, r7
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	dc20      	bgt.n	8006f70 <_dtoa_r+0x968>
 8006f2e:	469b      	mov	fp, r3
 8006f30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	dd1e      	ble.n	8006f74 <_dtoa_r+0x96c>
 8006f36:	f1bb 0f00 	cmp.w	fp, #0
 8006f3a:	f47f adb1 	bne.w	8006aa0 <_dtoa_r+0x498>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	465b      	mov	r3, fp
 8006f42:	2205      	movs	r2, #5
 8006f44:	4648      	mov	r0, r9
 8006f46:	f000 fc33 	bl	80077b0 <__multadd>
 8006f4a:	4601      	mov	r1, r0
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	9803      	ldr	r0, [sp, #12]
 8006f50:	f000 fe3e 	bl	8007bd0 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	f77f ada3 	ble.w	8006aa0 <_dtoa_r+0x498>
 8006f5a:	4656      	mov	r6, sl
 8006f5c:	2331      	movs	r3, #49	@ 0x31
 8006f5e:	f108 0801 	add.w	r8, r8, #1
 8006f62:	f806 3b01 	strb.w	r3, [r6], #1
 8006f66:	e59f      	b.n	8006aa8 <_dtoa_r+0x4a0>
 8006f68:	46b8      	mov	r8, r7
 8006f6a:	9c08      	ldr	r4, [sp, #32]
 8006f6c:	4625      	mov	r5, r4
 8006f6e:	e7f4      	b.n	8006f5a <_dtoa_r+0x952>
 8006f70:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006f74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 8101 	beq.w	800717e <_dtoa_r+0xb76>
 8006f7c:	2e00      	cmp	r6, #0
 8006f7e:	dd05      	ble.n	8006f8c <_dtoa_r+0x984>
 8006f80:	4629      	mov	r1, r5
 8006f82:	4632      	mov	r2, r6
 8006f84:	4648      	mov	r0, r9
 8006f86:	f000 fdb7 	bl	8007af8 <__lshift>
 8006f8a:	4605      	mov	r5, r0
 8006f8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d05c      	beq.n	800704c <_dtoa_r+0xa44>
 8006f92:	4648      	mov	r0, r9
 8006f94:	6869      	ldr	r1, [r5, #4]
 8006f96:	f000 fba9 	bl	80076ec <_Balloc>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	b928      	cbnz	r0, 8006faa <_dtoa_r+0x9a2>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fa4:	4b80      	ldr	r3, [pc, #512]	@ (80071a8 <_dtoa_r+0xba0>)
 8006fa6:	f7ff bb43 	b.w	8006630 <_dtoa_r+0x28>
 8006faa:	692a      	ldr	r2, [r5, #16]
 8006fac:	f105 010c 	add.w	r1, r5, #12
 8006fb0:	3202      	adds	r2, #2
 8006fb2:	0092      	lsls	r2, r2, #2
 8006fb4:	300c      	adds	r0, #12
 8006fb6:	f001 f8c5 	bl	8008144 <memcpy>
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4631      	mov	r1, r6
 8006fbe:	4648      	mov	r0, r9
 8006fc0:	f000 fd9a 	bl	8007af8 <__lshift>
 8006fc4:	462f      	mov	r7, r5
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	f10a 0301 	add.w	r3, sl, #1
 8006fcc:	9304      	str	r3, [sp, #16]
 8006fce:	eb0a 030b 	add.w	r3, sl, fp
 8006fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fd4:	9b06      	ldr	r3, [sp, #24]
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fdc:	9b04      	ldr	r3, [sp, #16]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	9803      	ldr	r0, [sp, #12]
 8006fe2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006fe6:	f7ff fa87 	bl	80064f8 <quorem>
 8006fea:	4603      	mov	r3, r0
 8006fec:	4639      	mov	r1, r7
 8006fee:	3330      	adds	r3, #48	@ 0x30
 8006ff0:	9006      	str	r0, [sp, #24]
 8006ff2:	9803      	ldr	r0, [sp, #12]
 8006ff4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ff6:	f000 fdeb 	bl	8007bd0 <__mcmp>
 8006ffa:	462a      	mov	r2, r5
 8006ffc:	9008      	str	r0, [sp, #32]
 8006ffe:	4621      	mov	r1, r4
 8007000:	4648      	mov	r0, r9
 8007002:	f000 fe01 	bl	8007c08 <__mdiff>
 8007006:	68c2      	ldr	r2, [r0, #12]
 8007008:	4606      	mov	r6, r0
 800700a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800700c:	bb02      	cbnz	r2, 8007050 <_dtoa_r+0xa48>
 800700e:	4601      	mov	r1, r0
 8007010:	9803      	ldr	r0, [sp, #12]
 8007012:	f000 fddd 	bl	8007bd0 <__mcmp>
 8007016:	4602      	mov	r2, r0
 8007018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800701a:	4631      	mov	r1, r6
 800701c:	4648      	mov	r0, r9
 800701e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007022:	f000 fba3 	bl	800776c <_Bfree>
 8007026:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007028:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800702a:	9e04      	ldr	r6, [sp, #16]
 800702c:	ea42 0103 	orr.w	r1, r2, r3
 8007030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007032:	4319      	orrs	r1, r3
 8007034:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007036:	d10d      	bne.n	8007054 <_dtoa_r+0xa4c>
 8007038:	2b39      	cmp	r3, #57	@ 0x39
 800703a:	d027      	beq.n	800708c <_dtoa_r+0xa84>
 800703c:	9a08      	ldr	r2, [sp, #32]
 800703e:	2a00      	cmp	r2, #0
 8007040:	dd01      	ble.n	8007046 <_dtoa_r+0xa3e>
 8007042:	9b06      	ldr	r3, [sp, #24]
 8007044:	3331      	adds	r3, #49	@ 0x31
 8007046:	f88b 3000 	strb.w	r3, [fp]
 800704a:	e52e      	b.n	8006aaa <_dtoa_r+0x4a2>
 800704c:	4628      	mov	r0, r5
 800704e:	e7b9      	b.n	8006fc4 <_dtoa_r+0x9bc>
 8007050:	2201      	movs	r2, #1
 8007052:	e7e2      	b.n	800701a <_dtoa_r+0xa12>
 8007054:	9908      	ldr	r1, [sp, #32]
 8007056:	2900      	cmp	r1, #0
 8007058:	db04      	blt.n	8007064 <_dtoa_r+0xa5c>
 800705a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800705c:	4301      	orrs	r1, r0
 800705e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007060:	4301      	orrs	r1, r0
 8007062:	d120      	bne.n	80070a6 <_dtoa_r+0xa9e>
 8007064:	2a00      	cmp	r2, #0
 8007066:	ddee      	ble.n	8007046 <_dtoa_r+0xa3e>
 8007068:	2201      	movs	r2, #1
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	4648      	mov	r0, r9
 800706e:	9304      	str	r3, [sp, #16]
 8007070:	f000 fd42 	bl	8007af8 <__lshift>
 8007074:	4621      	mov	r1, r4
 8007076:	9003      	str	r0, [sp, #12]
 8007078:	f000 fdaa 	bl	8007bd0 <__mcmp>
 800707c:	2800      	cmp	r0, #0
 800707e:	9b04      	ldr	r3, [sp, #16]
 8007080:	dc02      	bgt.n	8007088 <_dtoa_r+0xa80>
 8007082:	d1e0      	bne.n	8007046 <_dtoa_r+0xa3e>
 8007084:	07da      	lsls	r2, r3, #31
 8007086:	d5de      	bpl.n	8007046 <_dtoa_r+0xa3e>
 8007088:	2b39      	cmp	r3, #57	@ 0x39
 800708a:	d1da      	bne.n	8007042 <_dtoa_r+0xa3a>
 800708c:	2339      	movs	r3, #57	@ 0x39
 800708e:	f88b 3000 	strb.w	r3, [fp]
 8007092:	4633      	mov	r3, r6
 8007094:	461e      	mov	r6, r3
 8007096:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800709a:	3b01      	subs	r3, #1
 800709c:	2a39      	cmp	r2, #57	@ 0x39
 800709e:	d04e      	beq.n	800713e <_dtoa_r+0xb36>
 80070a0:	3201      	adds	r2, #1
 80070a2:	701a      	strb	r2, [r3, #0]
 80070a4:	e501      	b.n	8006aaa <_dtoa_r+0x4a2>
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	dd03      	ble.n	80070b2 <_dtoa_r+0xaaa>
 80070aa:	2b39      	cmp	r3, #57	@ 0x39
 80070ac:	d0ee      	beq.n	800708c <_dtoa_r+0xa84>
 80070ae:	3301      	adds	r3, #1
 80070b0:	e7c9      	b.n	8007046 <_dtoa_r+0xa3e>
 80070b2:	9a04      	ldr	r2, [sp, #16]
 80070b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80070b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80070ba:	428a      	cmp	r2, r1
 80070bc:	d028      	beq.n	8007110 <_dtoa_r+0xb08>
 80070be:	2300      	movs	r3, #0
 80070c0:	220a      	movs	r2, #10
 80070c2:	9903      	ldr	r1, [sp, #12]
 80070c4:	4648      	mov	r0, r9
 80070c6:	f000 fb73 	bl	80077b0 <__multadd>
 80070ca:	42af      	cmp	r7, r5
 80070cc:	9003      	str	r0, [sp, #12]
 80070ce:	f04f 0300 	mov.w	r3, #0
 80070d2:	f04f 020a 	mov.w	r2, #10
 80070d6:	4639      	mov	r1, r7
 80070d8:	4648      	mov	r0, r9
 80070da:	d107      	bne.n	80070ec <_dtoa_r+0xae4>
 80070dc:	f000 fb68 	bl	80077b0 <__multadd>
 80070e0:	4607      	mov	r7, r0
 80070e2:	4605      	mov	r5, r0
 80070e4:	9b04      	ldr	r3, [sp, #16]
 80070e6:	3301      	adds	r3, #1
 80070e8:	9304      	str	r3, [sp, #16]
 80070ea:	e777      	b.n	8006fdc <_dtoa_r+0x9d4>
 80070ec:	f000 fb60 	bl	80077b0 <__multadd>
 80070f0:	4629      	mov	r1, r5
 80070f2:	4607      	mov	r7, r0
 80070f4:	2300      	movs	r3, #0
 80070f6:	220a      	movs	r2, #10
 80070f8:	4648      	mov	r0, r9
 80070fa:	f000 fb59 	bl	80077b0 <__multadd>
 80070fe:	4605      	mov	r5, r0
 8007100:	e7f0      	b.n	80070e4 <_dtoa_r+0xadc>
 8007102:	f1bb 0f00 	cmp.w	fp, #0
 8007106:	bfcc      	ite	gt
 8007108:	465e      	movgt	r6, fp
 800710a:	2601      	movle	r6, #1
 800710c:	2700      	movs	r7, #0
 800710e:	4456      	add	r6, sl
 8007110:	2201      	movs	r2, #1
 8007112:	9903      	ldr	r1, [sp, #12]
 8007114:	4648      	mov	r0, r9
 8007116:	9304      	str	r3, [sp, #16]
 8007118:	f000 fcee 	bl	8007af8 <__lshift>
 800711c:	4621      	mov	r1, r4
 800711e:	9003      	str	r0, [sp, #12]
 8007120:	f000 fd56 	bl	8007bd0 <__mcmp>
 8007124:	2800      	cmp	r0, #0
 8007126:	dcb4      	bgt.n	8007092 <_dtoa_r+0xa8a>
 8007128:	d102      	bne.n	8007130 <_dtoa_r+0xb28>
 800712a:	9b04      	ldr	r3, [sp, #16]
 800712c:	07db      	lsls	r3, r3, #31
 800712e:	d4b0      	bmi.n	8007092 <_dtoa_r+0xa8a>
 8007130:	4633      	mov	r3, r6
 8007132:	461e      	mov	r6, r3
 8007134:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007138:	2a30      	cmp	r2, #48	@ 0x30
 800713a:	d0fa      	beq.n	8007132 <_dtoa_r+0xb2a>
 800713c:	e4b5      	b.n	8006aaa <_dtoa_r+0x4a2>
 800713e:	459a      	cmp	sl, r3
 8007140:	d1a8      	bne.n	8007094 <_dtoa_r+0xa8c>
 8007142:	2331      	movs	r3, #49	@ 0x31
 8007144:	f108 0801 	add.w	r8, r8, #1
 8007148:	f88a 3000 	strb.w	r3, [sl]
 800714c:	e4ad      	b.n	8006aaa <_dtoa_r+0x4a2>
 800714e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007150:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80071ac <_dtoa_r+0xba4>
 8007154:	b11b      	cbz	r3, 800715e <_dtoa_r+0xb56>
 8007156:	f10a 0308 	add.w	r3, sl, #8
 800715a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4650      	mov	r0, sl
 8007160:	b017      	add	sp, #92	@ 0x5c
 8007162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007166:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007168:	2b01      	cmp	r3, #1
 800716a:	f77f ae2e 	ble.w	8006dca <_dtoa_r+0x7c2>
 800716e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007170:	930a      	str	r3, [sp, #40]	@ 0x28
 8007172:	2001      	movs	r0, #1
 8007174:	e64d      	b.n	8006e12 <_dtoa_r+0x80a>
 8007176:	f1bb 0f00 	cmp.w	fp, #0
 800717a:	f77f aed9 	ble.w	8006f30 <_dtoa_r+0x928>
 800717e:	4656      	mov	r6, sl
 8007180:	4621      	mov	r1, r4
 8007182:	9803      	ldr	r0, [sp, #12]
 8007184:	f7ff f9b8 	bl	80064f8 <quorem>
 8007188:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800718c:	f806 3b01 	strb.w	r3, [r6], #1
 8007190:	eba6 020a 	sub.w	r2, r6, sl
 8007194:	4593      	cmp	fp, r2
 8007196:	ddb4      	ble.n	8007102 <_dtoa_r+0xafa>
 8007198:	2300      	movs	r3, #0
 800719a:	220a      	movs	r2, #10
 800719c:	4648      	mov	r0, r9
 800719e:	9903      	ldr	r1, [sp, #12]
 80071a0:	f000 fb06 	bl	80077b0 <__multadd>
 80071a4:	9003      	str	r0, [sp, #12]
 80071a6:	e7eb      	b.n	8007180 <_dtoa_r+0xb78>
 80071a8:	08008e0c 	.word	0x08008e0c
 80071ac:	08008d90 	.word	0x08008d90

080071b0 <__sfputc_r>:
 80071b0:	6893      	ldr	r3, [r2, #8]
 80071b2:	b410      	push	{r4}
 80071b4:	3b01      	subs	r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	6093      	str	r3, [r2, #8]
 80071ba:	da07      	bge.n	80071cc <__sfputc_r+0x1c>
 80071bc:	6994      	ldr	r4, [r2, #24]
 80071be:	42a3      	cmp	r3, r4
 80071c0:	db01      	blt.n	80071c6 <__sfputc_r+0x16>
 80071c2:	290a      	cmp	r1, #10
 80071c4:	d102      	bne.n	80071cc <__sfputc_r+0x1c>
 80071c6:	bc10      	pop	{r4}
 80071c8:	f000 be4d 	b.w	8007e66 <__swbuf_r>
 80071cc:	6813      	ldr	r3, [r2, #0]
 80071ce:	1c58      	adds	r0, r3, #1
 80071d0:	6010      	str	r0, [r2, #0]
 80071d2:	7019      	strb	r1, [r3, #0]
 80071d4:	4608      	mov	r0, r1
 80071d6:	bc10      	pop	{r4}
 80071d8:	4770      	bx	lr

080071da <__sfputs_r>:
 80071da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	18d5      	adds	r5, r2, r3
 80071e4:	42ac      	cmp	r4, r5
 80071e6:	d101      	bne.n	80071ec <__sfputs_r+0x12>
 80071e8:	2000      	movs	r0, #0
 80071ea:	e007      	b.n	80071fc <__sfputs_r+0x22>
 80071ec:	463a      	mov	r2, r7
 80071ee:	4630      	mov	r0, r6
 80071f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f4:	f7ff ffdc 	bl	80071b0 <__sfputc_r>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d1f3      	bne.n	80071e4 <__sfputs_r+0xa>
 80071fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007200 <_vfiprintf_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	460d      	mov	r5, r1
 8007206:	4614      	mov	r4, r2
 8007208:	4698      	mov	r8, r3
 800720a:	4606      	mov	r6, r0
 800720c:	b09d      	sub	sp, #116	@ 0x74
 800720e:	b118      	cbz	r0, 8007218 <_vfiprintf_r+0x18>
 8007210:	6a03      	ldr	r3, [r0, #32]
 8007212:	b90b      	cbnz	r3, 8007218 <_vfiprintf_r+0x18>
 8007214:	f7ff f882 	bl	800631c <__sinit>
 8007218:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800721a:	07d9      	lsls	r1, r3, #31
 800721c:	d405      	bmi.n	800722a <_vfiprintf_r+0x2a>
 800721e:	89ab      	ldrh	r3, [r5, #12]
 8007220:	059a      	lsls	r2, r3, #22
 8007222:	d402      	bmi.n	800722a <_vfiprintf_r+0x2a>
 8007224:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007226:	f7ff f952 	bl	80064ce <__retarget_lock_acquire_recursive>
 800722a:	89ab      	ldrh	r3, [r5, #12]
 800722c:	071b      	lsls	r3, r3, #28
 800722e:	d501      	bpl.n	8007234 <_vfiprintf_r+0x34>
 8007230:	692b      	ldr	r3, [r5, #16]
 8007232:	b99b      	cbnz	r3, 800725c <_vfiprintf_r+0x5c>
 8007234:	4629      	mov	r1, r5
 8007236:	4630      	mov	r0, r6
 8007238:	f000 fe54 	bl	8007ee4 <__swsetup_r>
 800723c:	b170      	cbz	r0, 800725c <_vfiprintf_r+0x5c>
 800723e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007240:	07dc      	lsls	r4, r3, #31
 8007242:	d504      	bpl.n	800724e <_vfiprintf_r+0x4e>
 8007244:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007248:	b01d      	add	sp, #116	@ 0x74
 800724a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800724e:	89ab      	ldrh	r3, [r5, #12]
 8007250:	0598      	lsls	r0, r3, #22
 8007252:	d4f7      	bmi.n	8007244 <_vfiprintf_r+0x44>
 8007254:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007256:	f7ff f93b 	bl	80064d0 <__retarget_lock_release_recursive>
 800725a:	e7f3      	b.n	8007244 <_vfiprintf_r+0x44>
 800725c:	2300      	movs	r3, #0
 800725e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007260:	2320      	movs	r3, #32
 8007262:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007266:	2330      	movs	r3, #48	@ 0x30
 8007268:	f04f 0901 	mov.w	r9, #1
 800726c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007270:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800741c <_vfiprintf_r+0x21c>
 8007274:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007278:	4623      	mov	r3, r4
 800727a:	469a      	mov	sl, r3
 800727c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007280:	b10a      	cbz	r2, 8007286 <_vfiprintf_r+0x86>
 8007282:	2a25      	cmp	r2, #37	@ 0x25
 8007284:	d1f9      	bne.n	800727a <_vfiprintf_r+0x7a>
 8007286:	ebba 0b04 	subs.w	fp, sl, r4
 800728a:	d00b      	beq.n	80072a4 <_vfiprintf_r+0xa4>
 800728c:	465b      	mov	r3, fp
 800728e:	4622      	mov	r2, r4
 8007290:	4629      	mov	r1, r5
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff ffa1 	bl	80071da <__sfputs_r>
 8007298:	3001      	adds	r0, #1
 800729a:	f000 80a7 	beq.w	80073ec <_vfiprintf_r+0x1ec>
 800729e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072a0:	445a      	add	r2, fp
 80072a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80072a4:	f89a 3000 	ldrb.w	r3, [sl]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f000 809f 	beq.w	80073ec <_vfiprintf_r+0x1ec>
 80072ae:	2300      	movs	r3, #0
 80072b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072b8:	f10a 0a01 	add.w	sl, sl, #1
 80072bc:	9304      	str	r3, [sp, #16]
 80072be:	9307      	str	r3, [sp, #28]
 80072c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80072c6:	4654      	mov	r4, sl
 80072c8:	2205      	movs	r2, #5
 80072ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ce:	4853      	ldr	r0, [pc, #332]	@ (800741c <_vfiprintf_r+0x21c>)
 80072d0:	f7ff f904 	bl	80064dc <memchr>
 80072d4:	9a04      	ldr	r2, [sp, #16]
 80072d6:	b9d8      	cbnz	r0, 8007310 <_vfiprintf_r+0x110>
 80072d8:	06d1      	lsls	r1, r2, #27
 80072da:	bf44      	itt	mi
 80072dc:	2320      	movmi	r3, #32
 80072de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072e2:	0713      	lsls	r3, r2, #28
 80072e4:	bf44      	itt	mi
 80072e6:	232b      	movmi	r3, #43	@ 0x2b
 80072e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ec:	f89a 3000 	ldrb.w	r3, [sl]
 80072f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80072f2:	d015      	beq.n	8007320 <_vfiprintf_r+0x120>
 80072f4:	4654      	mov	r4, sl
 80072f6:	2000      	movs	r0, #0
 80072f8:	f04f 0c0a 	mov.w	ip, #10
 80072fc:	9a07      	ldr	r2, [sp, #28]
 80072fe:	4621      	mov	r1, r4
 8007300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007304:	3b30      	subs	r3, #48	@ 0x30
 8007306:	2b09      	cmp	r3, #9
 8007308:	d94b      	bls.n	80073a2 <_vfiprintf_r+0x1a2>
 800730a:	b1b0      	cbz	r0, 800733a <_vfiprintf_r+0x13a>
 800730c:	9207      	str	r2, [sp, #28]
 800730e:	e014      	b.n	800733a <_vfiprintf_r+0x13a>
 8007310:	eba0 0308 	sub.w	r3, r0, r8
 8007314:	fa09 f303 	lsl.w	r3, r9, r3
 8007318:	4313      	orrs	r3, r2
 800731a:	46a2      	mov	sl, r4
 800731c:	9304      	str	r3, [sp, #16]
 800731e:	e7d2      	b.n	80072c6 <_vfiprintf_r+0xc6>
 8007320:	9b03      	ldr	r3, [sp, #12]
 8007322:	1d19      	adds	r1, r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	9103      	str	r1, [sp, #12]
 8007328:	2b00      	cmp	r3, #0
 800732a:	bfbb      	ittet	lt
 800732c:	425b      	neglt	r3, r3
 800732e:	f042 0202 	orrlt.w	r2, r2, #2
 8007332:	9307      	strge	r3, [sp, #28]
 8007334:	9307      	strlt	r3, [sp, #28]
 8007336:	bfb8      	it	lt
 8007338:	9204      	strlt	r2, [sp, #16]
 800733a:	7823      	ldrb	r3, [r4, #0]
 800733c:	2b2e      	cmp	r3, #46	@ 0x2e
 800733e:	d10a      	bne.n	8007356 <_vfiprintf_r+0x156>
 8007340:	7863      	ldrb	r3, [r4, #1]
 8007342:	2b2a      	cmp	r3, #42	@ 0x2a
 8007344:	d132      	bne.n	80073ac <_vfiprintf_r+0x1ac>
 8007346:	9b03      	ldr	r3, [sp, #12]
 8007348:	3402      	adds	r4, #2
 800734a:	1d1a      	adds	r2, r3, #4
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	9203      	str	r2, [sp, #12]
 8007350:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007354:	9305      	str	r3, [sp, #20]
 8007356:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007420 <_vfiprintf_r+0x220>
 800735a:	2203      	movs	r2, #3
 800735c:	4650      	mov	r0, sl
 800735e:	7821      	ldrb	r1, [r4, #0]
 8007360:	f7ff f8bc 	bl	80064dc <memchr>
 8007364:	b138      	cbz	r0, 8007376 <_vfiprintf_r+0x176>
 8007366:	2240      	movs	r2, #64	@ 0x40
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	eba0 000a 	sub.w	r0, r0, sl
 800736e:	4082      	lsls	r2, r0
 8007370:	4313      	orrs	r3, r2
 8007372:	3401      	adds	r4, #1
 8007374:	9304      	str	r3, [sp, #16]
 8007376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800737a:	2206      	movs	r2, #6
 800737c:	4829      	ldr	r0, [pc, #164]	@ (8007424 <_vfiprintf_r+0x224>)
 800737e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007382:	f7ff f8ab 	bl	80064dc <memchr>
 8007386:	2800      	cmp	r0, #0
 8007388:	d03f      	beq.n	800740a <_vfiprintf_r+0x20a>
 800738a:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <_vfiprintf_r+0x228>)
 800738c:	bb1b      	cbnz	r3, 80073d6 <_vfiprintf_r+0x1d6>
 800738e:	9b03      	ldr	r3, [sp, #12]
 8007390:	3307      	adds	r3, #7
 8007392:	f023 0307 	bic.w	r3, r3, #7
 8007396:	3308      	adds	r3, #8
 8007398:	9303      	str	r3, [sp, #12]
 800739a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800739c:	443b      	add	r3, r7
 800739e:	9309      	str	r3, [sp, #36]	@ 0x24
 80073a0:	e76a      	b.n	8007278 <_vfiprintf_r+0x78>
 80073a2:	460c      	mov	r4, r1
 80073a4:	2001      	movs	r0, #1
 80073a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073aa:	e7a8      	b.n	80072fe <_vfiprintf_r+0xfe>
 80073ac:	2300      	movs	r3, #0
 80073ae:	f04f 0c0a 	mov.w	ip, #10
 80073b2:	4619      	mov	r1, r3
 80073b4:	3401      	adds	r4, #1
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	4620      	mov	r0, r4
 80073ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073be:	3a30      	subs	r2, #48	@ 0x30
 80073c0:	2a09      	cmp	r2, #9
 80073c2:	d903      	bls.n	80073cc <_vfiprintf_r+0x1cc>
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d0c6      	beq.n	8007356 <_vfiprintf_r+0x156>
 80073c8:	9105      	str	r1, [sp, #20]
 80073ca:	e7c4      	b.n	8007356 <_vfiprintf_r+0x156>
 80073cc:	4604      	mov	r4, r0
 80073ce:	2301      	movs	r3, #1
 80073d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80073d4:	e7f0      	b.n	80073b8 <_vfiprintf_r+0x1b8>
 80073d6:	ab03      	add	r3, sp, #12
 80073d8:	9300      	str	r3, [sp, #0]
 80073da:	462a      	mov	r2, r5
 80073dc:	4630      	mov	r0, r6
 80073de:	4b13      	ldr	r3, [pc, #76]	@ (800742c <_vfiprintf_r+0x22c>)
 80073e0:	a904      	add	r1, sp, #16
 80073e2:	f7fe fb53 	bl	8005a8c <_printf_float>
 80073e6:	4607      	mov	r7, r0
 80073e8:	1c78      	adds	r0, r7, #1
 80073ea:	d1d6      	bne.n	800739a <_vfiprintf_r+0x19a>
 80073ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80073ee:	07d9      	lsls	r1, r3, #31
 80073f0:	d405      	bmi.n	80073fe <_vfiprintf_r+0x1fe>
 80073f2:	89ab      	ldrh	r3, [r5, #12]
 80073f4:	059a      	lsls	r2, r3, #22
 80073f6:	d402      	bmi.n	80073fe <_vfiprintf_r+0x1fe>
 80073f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80073fa:	f7ff f869 	bl	80064d0 <__retarget_lock_release_recursive>
 80073fe:	89ab      	ldrh	r3, [r5, #12]
 8007400:	065b      	lsls	r3, r3, #25
 8007402:	f53f af1f 	bmi.w	8007244 <_vfiprintf_r+0x44>
 8007406:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007408:	e71e      	b.n	8007248 <_vfiprintf_r+0x48>
 800740a:	ab03      	add	r3, sp, #12
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	462a      	mov	r2, r5
 8007410:	4630      	mov	r0, r6
 8007412:	4b06      	ldr	r3, [pc, #24]	@ (800742c <_vfiprintf_r+0x22c>)
 8007414:	a904      	add	r1, sp, #16
 8007416:	f7fe fdd7 	bl	8005fc8 <_printf_i>
 800741a:	e7e4      	b.n	80073e6 <_vfiprintf_r+0x1e6>
 800741c:	08008e1d 	.word	0x08008e1d
 8007420:	08008e23 	.word	0x08008e23
 8007424:	08008e27 	.word	0x08008e27
 8007428:	08005a8d 	.word	0x08005a8d
 800742c:	080071db 	.word	0x080071db

08007430 <malloc>:
 8007430:	4b02      	ldr	r3, [pc, #8]	@ (800743c <malloc+0xc>)
 8007432:	4601      	mov	r1, r0
 8007434:	6818      	ldr	r0, [r3, #0]
 8007436:	f000 b825 	b.w	8007484 <_malloc_r>
 800743a:	bf00      	nop
 800743c:	20000018 	.word	0x20000018

08007440 <sbrk_aligned>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	4e0f      	ldr	r6, [pc, #60]	@ (8007480 <sbrk_aligned+0x40>)
 8007444:	460c      	mov	r4, r1
 8007446:	6831      	ldr	r1, [r6, #0]
 8007448:	4605      	mov	r5, r0
 800744a:	b911      	cbnz	r1, 8007452 <sbrk_aligned+0x12>
 800744c:	f000 fe36 	bl	80080bc <_sbrk_r>
 8007450:	6030      	str	r0, [r6, #0]
 8007452:	4621      	mov	r1, r4
 8007454:	4628      	mov	r0, r5
 8007456:	f000 fe31 	bl	80080bc <_sbrk_r>
 800745a:	1c43      	adds	r3, r0, #1
 800745c:	d103      	bne.n	8007466 <sbrk_aligned+0x26>
 800745e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007462:	4620      	mov	r0, r4
 8007464:	bd70      	pop	{r4, r5, r6, pc}
 8007466:	1cc4      	adds	r4, r0, #3
 8007468:	f024 0403 	bic.w	r4, r4, #3
 800746c:	42a0      	cmp	r0, r4
 800746e:	d0f8      	beq.n	8007462 <sbrk_aligned+0x22>
 8007470:	1a21      	subs	r1, r4, r0
 8007472:	4628      	mov	r0, r5
 8007474:	f000 fe22 	bl	80080bc <_sbrk_r>
 8007478:	3001      	adds	r0, #1
 800747a:	d1f2      	bne.n	8007462 <sbrk_aligned+0x22>
 800747c:	e7ef      	b.n	800745e <sbrk_aligned+0x1e>
 800747e:	bf00      	nop
 8007480:	2000046c 	.word	0x2000046c

08007484 <_malloc_r>:
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	1ccd      	adds	r5, r1, #3
 800748a:	f025 0503 	bic.w	r5, r5, #3
 800748e:	3508      	adds	r5, #8
 8007490:	2d0c      	cmp	r5, #12
 8007492:	bf38      	it	cc
 8007494:	250c      	movcc	r5, #12
 8007496:	2d00      	cmp	r5, #0
 8007498:	4606      	mov	r6, r0
 800749a:	db01      	blt.n	80074a0 <_malloc_r+0x1c>
 800749c:	42a9      	cmp	r1, r5
 800749e:	d904      	bls.n	80074aa <_malloc_r+0x26>
 80074a0:	230c      	movs	r3, #12
 80074a2:	6033      	str	r3, [r6, #0]
 80074a4:	2000      	movs	r0, #0
 80074a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007580 <_malloc_r+0xfc>
 80074ae:	f000 f911 	bl	80076d4 <__malloc_lock>
 80074b2:	f8d8 3000 	ldr.w	r3, [r8]
 80074b6:	461c      	mov	r4, r3
 80074b8:	bb44      	cbnz	r4, 800750c <_malloc_r+0x88>
 80074ba:	4629      	mov	r1, r5
 80074bc:	4630      	mov	r0, r6
 80074be:	f7ff ffbf 	bl	8007440 <sbrk_aligned>
 80074c2:	1c43      	adds	r3, r0, #1
 80074c4:	4604      	mov	r4, r0
 80074c6:	d158      	bne.n	800757a <_malloc_r+0xf6>
 80074c8:	f8d8 4000 	ldr.w	r4, [r8]
 80074cc:	4627      	mov	r7, r4
 80074ce:	2f00      	cmp	r7, #0
 80074d0:	d143      	bne.n	800755a <_malloc_r+0xd6>
 80074d2:	2c00      	cmp	r4, #0
 80074d4:	d04b      	beq.n	800756e <_malloc_r+0xea>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	4639      	mov	r1, r7
 80074da:	4630      	mov	r0, r6
 80074dc:	eb04 0903 	add.w	r9, r4, r3
 80074e0:	f000 fdec 	bl	80080bc <_sbrk_r>
 80074e4:	4581      	cmp	r9, r0
 80074e6:	d142      	bne.n	800756e <_malloc_r+0xea>
 80074e8:	6821      	ldr	r1, [r4, #0]
 80074ea:	4630      	mov	r0, r6
 80074ec:	1a6d      	subs	r5, r5, r1
 80074ee:	4629      	mov	r1, r5
 80074f0:	f7ff ffa6 	bl	8007440 <sbrk_aligned>
 80074f4:	3001      	adds	r0, #1
 80074f6:	d03a      	beq.n	800756e <_malloc_r+0xea>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	442b      	add	r3, r5
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	bb62      	cbnz	r2, 8007560 <_malloc_r+0xdc>
 8007506:	f8c8 7000 	str.w	r7, [r8]
 800750a:	e00f      	b.n	800752c <_malloc_r+0xa8>
 800750c:	6822      	ldr	r2, [r4, #0]
 800750e:	1b52      	subs	r2, r2, r5
 8007510:	d420      	bmi.n	8007554 <_malloc_r+0xd0>
 8007512:	2a0b      	cmp	r2, #11
 8007514:	d917      	bls.n	8007546 <_malloc_r+0xc2>
 8007516:	1961      	adds	r1, r4, r5
 8007518:	42a3      	cmp	r3, r4
 800751a:	6025      	str	r5, [r4, #0]
 800751c:	bf18      	it	ne
 800751e:	6059      	strne	r1, [r3, #4]
 8007520:	6863      	ldr	r3, [r4, #4]
 8007522:	bf08      	it	eq
 8007524:	f8c8 1000 	streq.w	r1, [r8]
 8007528:	5162      	str	r2, [r4, r5]
 800752a:	604b      	str	r3, [r1, #4]
 800752c:	4630      	mov	r0, r6
 800752e:	f000 f8d7 	bl	80076e0 <__malloc_unlock>
 8007532:	f104 000b 	add.w	r0, r4, #11
 8007536:	1d23      	adds	r3, r4, #4
 8007538:	f020 0007 	bic.w	r0, r0, #7
 800753c:	1ac2      	subs	r2, r0, r3
 800753e:	bf1c      	itt	ne
 8007540:	1a1b      	subne	r3, r3, r0
 8007542:	50a3      	strne	r3, [r4, r2]
 8007544:	e7af      	b.n	80074a6 <_malloc_r+0x22>
 8007546:	6862      	ldr	r2, [r4, #4]
 8007548:	42a3      	cmp	r3, r4
 800754a:	bf0c      	ite	eq
 800754c:	f8c8 2000 	streq.w	r2, [r8]
 8007550:	605a      	strne	r2, [r3, #4]
 8007552:	e7eb      	b.n	800752c <_malloc_r+0xa8>
 8007554:	4623      	mov	r3, r4
 8007556:	6864      	ldr	r4, [r4, #4]
 8007558:	e7ae      	b.n	80074b8 <_malloc_r+0x34>
 800755a:	463c      	mov	r4, r7
 800755c:	687f      	ldr	r7, [r7, #4]
 800755e:	e7b6      	b.n	80074ce <_malloc_r+0x4a>
 8007560:	461a      	mov	r2, r3
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	42a3      	cmp	r3, r4
 8007566:	d1fb      	bne.n	8007560 <_malloc_r+0xdc>
 8007568:	2300      	movs	r3, #0
 800756a:	6053      	str	r3, [r2, #4]
 800756c:	e7de      	b.n	800752c <_malloc_r+0xa8>
 800756e:	230c      	movs	r3, #12
 8007570:	4630      	mov	r0, r6
 8007572:	6033      	str	r3, [r6, #0]
 8007574:	f000 f8b4 	bl	80076e0 <__malloc_unlock>
 8007578:	e794      	b.n	80074a4 <_malloc_r+0x20>
 800757a:	6005      	str	r5, [r0, #0]
 800757c:	e7d6      	b.n	800752c <_malloc_r+0xa8>
 800757e:	bf00      	nop
 8007580:	20000470 	.word	0x20000470

08007584 <__sflush_r>:
 8007584:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758a:	0716      	lsls	r6, r2, #28
 800758c:	4605      	mov	r5, r0
 800758e:	460c      	mov	r4, r1
 8007590:	d454      	bmi.n	800763c <__sflush_r+0xb8>
 8007592:	684b      	ldr	r3, [r1, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc02      	bgt.n	800759e <__sflush_r+0x1a>
 8007598:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	dd48      	ble.n	8007630 <__sflush_r+0xac>
 800759e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075a0:	2e00      	cmp	r6, #0
 80075a2:	d045      	beq.n	8007630 <__sflush_r+0xac>
 80075a4:	2300      	movs	r3, #0
 80075a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80075aa:	682f      	ldr	r7, [r5, #0]
 80075ac:	6a21      	ldr	r1, [r4, #32]
 80075ae:	602b      	str	r3, [r5, #0]
 80075b0:	d030      	beq.n	8007614 <__sflush_r+0x90>
 80075b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	0759      	lsls	r1, r3, #29
 80075b8:	d505      	bpl.n	80075c6 <__sflush_r+0x42>
 80075ba:	6863      	ldr	r3, [r4, #4]
 80075bc:	1ad2      	subs	r2, r2, r3
 80075be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80075c0:	b10b      	cbz	r3, 80075c6 <__sflush_r+0x42>
 80075c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80075c4:	1ad2      	subs	r2, r2, r3
 80075c6:	2300      	movs	r3, #0
 80075c8:	4628      	mov	r0, r5
 80075ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80075cc:	6a21      	ldr	r1, [r4, #32]
 80075ce:	47b0      	blx	r6
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	89a3      	ldrh	r3, [r4, #12]
 80075d4:	d106      	bne.n	80075e4 <__sflush_r+0x60>
 80075d6:	6829      	ldr	r1, [r5, #0]
 80075d8:	291d      	cmp	r1, #29
 80075da:	d82b      	bhi.n	8007634 <__sflush_r+0xb0>
 80075dc:	4a28      	ldr	r2, [pc, #160]	@ (8007680 <__sflush_r+0xfc>)
 80075de:	40ca      	lsrs	r2, r1
 80075e0:	07d6      	lsls	r6, r2, #31
 80075e2:	d527      	bpl.n	8007634 <__sflush_r+0xb0>
 80075e4:	2200      	movs	r2, #0
 80075e6:	6062      	str	r2, [r4, #4]
 80075e8:	6922      	ldr	r2, [r4, #16]
 80075ea:	04d9      	lsls	r1, r3, #19
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	d504      	bpl.n	80075fa <__sflush_r+0x76>
 80075f0:	1c42      	adds	r2, r0, #1
 80075f2:	d101      	bne.n	80075f8 <__sflush_r+0x74>
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	b903      	cbnz	r3, 80075fa <__sflush_r+0x76>
 80075f8:	6560      	str	r0, [r4, #84]	@ 0x54
 80075fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075fc:	602f      	str	r7, [r5, #0]
 80075fe:	b1b9      	cbz	r1, 8007630 <__sflush_r+0xac>
 8007600:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007604:	4299      	cmp	r1, r3
 8007606:	d002      	beq.n	800760e <__sflush_r+0x8a>
 8007608:	4628      	mov	r0, r5
 800760a:	f000 fddb 	bl	80081c4 <_free_r>
 800760e:	2300      	movs	r3, #0
 8007610:	6363      	str	r3, [r4, #52]	@ 0x34
 8007612:	e00d      	b.n	8007630 <__sflush_r+0xac>
 8007614:	2301      	movs	r3, #1
 8007616:	4628      	mov	r0, r5
 8007618:	47b0      	blx	r6
 800761a:	4602      	mov	r2, r0
 800761c:	1c50      	adds	r0, r2, #1
 800761e:	d1c9      	bne.n	80075b4 <__sflush_r+0x30>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d0c6      	beq.n	80075b4 <__sflush_r+0x30>
 8007626:	2b1d      	cmp	r3, #29
 8007628:	d001      	beq.n	800762e <__sflush_r+0xaa>
 800762a:	2b16      	cmp	r3, #22
 800762c:	d11d      	bne.n	800766a <__sflush_r+0xe6>
 800762e:	602f      	str	r7, [r5, #0]
 8007630:	2000      	movs	r0, #0
 8007632:	e021      	b.n	8007678 <__sflush_r+0xf4>
 8007634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007638:	b21b      	sxth	r3, r3
 800763a:	e01a      	b.n	8007672 <__sflush_r+0xee>
 800763c:	690f      	ldr	r7, [r1, #16]
 800763e:	2f00      	cmp	r7, #0
 8007640:	d0f6      	beq.n	8007630 <__sflush_r+0xac>
 8007642:	0793      	lsls	r3, r2, #30
 8007644:	bf18      	it	ne
 8007646:	2300      	movne	r3, #0
 8007648:	680e      	ldr	r6, [r1, #0]
 800764a:	bf08      	it	eq
 800764c:	694b      	ldreq	r3, [r1, #20]
 800764e:	1bf6      	subs	r6, r6, r7
 8007650:	600f      	str	r7, [r1, #0]
 8007652:	608b      	str	r3, [r1, #8]
 8007654:	2e00      	cmp	r6, #0
 8007656:	ddeb      	ble.n	8007630 <__sflush_r+0xac>
 8007658:	4633      	mov	r3, r6
 800765a:	463a      	mov	r2, r7
 800765c:	4628      	mov	r0, r5
 800765e:	6a21      	ldr	r1, [r4, #32]
 8007660:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007664:	47e0      	blx	ip
 8007666:	2800      	cmp	r0, #0
 8007668:	dc07      	bgt.n	800767a <__sflush_r+0xf6>
 800766a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800766e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007672:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007676:	81a3      	strh	r3, [r4, #12]
 8007678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800767a:	4407      	add	r7, r0
 800767c:	1a36      	subs	r6, r6, r0
 800767e:	e7e9      	b.n	8007654 <__sflush_r+0xd0>
 8007680:	20400001 	.word	0x20400001

08007684 <_fflush_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	690b      	ldr	r3, [r1, #16]
 8007688:	4605      	mov	r5, r0
 800768a:	460c      	mov	r4, r1
 800768c:	b913      	cbnz	r3, 8007694 <_fflush_r+0x10>
 800768e:	2500      	movs	r5, #0
 8007690:	4628      	mov	r0, r5
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	b118      	cbz	r0, 800769e <_fflush_r+0x1a>
 8007696:	6a03      	ldr	r3, [r0, #32]
 8007698:	b90b      	cbnz	r3, 800769e <_fflush_r+0x1a>
 800769a:	f7fe fe3f 	bl	800631c <__sinit>
 800769e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0f3      	beq.n	800768e <_fflush_r+0xa>
 80076a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80076a8:	07d0      	lsls	r0, r2, #31
 80076aa:	d404      	bmi.n	80076b6 <_fflush_r+0x32>
 80076ac:	0599      	lsls	r1, r3, #22
 80076ae:	d402      	bmi.n	80076b6 <_fflush_r+0x32>
 80076b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076b2:	f7fe ff0c 	bl	80064ce <__retarget_lock_acquire_recursive>
 80076b6:	4628      	mov	r0, r5
 80076b8:	4621      	mov	r1, r4
 80076ba:	f7ff ff63 	bl	8007584 <__sflush_r>
 80076be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076c0:	4605      	mov	r5, r0
 80076c2:	07da      	lsls	r2, r3, #31
 80076c4:	d4e4      	bmi.n	8007690 <_fflush_r+0xc>
 80076c6:	89a3      	ldrh	r3, [r4, #12]
 80076c8:	059b      	lsls	r3, r3, #22
 80076ca:	d4e1      	bmi.n	8007690 <_fflush_r+0xc>
 80076cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076ce:	f7fe feff 	bl	80064d0 <__retarget_lock_release_recursive>
 80076d2:	e7dd      	b.n	8007690 <_fflush_r+0xc>

080076d4 <__malloc_lock>:
 80076d4:	4801      	ldr	r0, [pc, #4]	@ (80076dc <__malloc_lock+0x8>)
 80076d6:	f7fe befa 	b.w	80064ce <__retarget_lock_acquire_recursive>
 80076da:	bf00      	nop
 80076dc:	20000468 	.word	0x20000468

080076e0 <__malloc_unlock>:
 80076e0:	4801      	ldr	r0, [pc, #4]	@ (80076e8 <__malloc_unlock+0x8>)
 80076e2:	f7fe bef5 	b.w	80064d0 <__retarget_lock_release_recursive>
 80076e6:	bf00      	nop
 80076e8:	20000468 	.word	0x20000468

080076ec <_Balloc>:
 80076ec:	b570      	push	{r4, r5, r6, lr}
 80076ee:	69c6      	ldr	r6, [r0, #28]
 80076f0:	4604      	mov	r4, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	b976      	cbnz	r6, 8007714 <_Balloc+0x28>
 80076f6:	2010      	movs	r0, #16
 80076f8:	f7ff fe9a 	bl	8007430 <malloc>
 80076fc:	4602      	mov	r2, r0
 80076fe:	61e0      	str	r0, [r4, #28]
 8007700:	b920      	cbnz	r0, 800770c <_Balloc+0x20>
 8007702:	216b      	movs	r1, #107	@ 0x6b
 8007704:	4b17      	ldr	r3, [pc, #92]	@ (8007764 <_Balloc+0x78>)
 8007706:	4818      	ldr	r0, [pc, #96]	@ (8007768 <_Balloc+0x7c>)
 8007708:	f000 fd2a 	bl	8008160 <__assert_func>
 800770c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007710:	6006      	str	r6, [r0, #0]
 8007712:	60c6      	str	r6, [r0, #12]
 8007714:	69e6      	ldr	r6, [r4, #28]
 8007716:	68f3      	ldr	r3, [r6, #12]
 8007718:	b183      	cbz	r3, 800773c <_Balloc+0x50>
 800771a:	69e3      	ldr	r3, [r4, #28]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007722:	b9b8      	cbnz	r0, 8007754 <_Balloc+0x68>
 8007724:	2101      	movs	r1, #1
 8007726:	fa01 f605 	lsl.w	r6, r1, r5
 800772a:	1d72      	adds	r2, r6, #5
 800772c:	4620      	mov	r0, r4
 800772e:	0092      	lsls	r2, r2, #2
 8007730:	f000 fd34 	bl	800819c <_calloc_r>
 8007734:	b160      	cbz	r0, 8007750 <_Balloc+0x64>
 8007736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800773a:	e00e      	b.n	800775a <_Balloc+0x6e>
 800773c:	2221      	movs	r2, #33	@ 0x21
 800773e:	2104      	movs	r1, #4
 8007740:	4620      	mov	r0, r4
 8007742:	f000 fd2b 	bl	800819c <_calloc_r>
 8007746:	69e3      	ldr	r3, [r4, #28]
 8007748:	60f0      	str	r0, [r6, #12]
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e4      	bne.n	800771a <_Balloc+0x2e>
 8007750:	2000      	movs	r0, #0
 8007752:	bd70      	pop	{r4, r5, r6, pc}
 8007754:	6802      	ldr	r2, [r0, #0]
 8007756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800775a:	2300      	movs	r3, #0
 800775c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007760:	e7f7      	b.n	8007752 <_Balloc+0x66>
 8007762:	bf00      	nop
 8007764:	08008d9d 	.word	0x08008d9d
 8007768:	08008e2e 	.word	0x08008e2e

0800776c <_Bfree>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	69c6      	ldr	r6, [r0, #28]
 8007770:	4605      	mov	r5, r0
 8007772:	460c      	mov	r4, r1
 8007774:	b976      	cbnz	r6, 8007794 <_Bfree+0x28>
 8007776:	2010      	movs	r0, #16
 8007778:	f7ff fe5a 	bl	8007430 <malloc>
 800777c:	4602      	mov	r2, r0
 800777e:	61e8      	str	r0, [r5, #28]
 8007780:	b920      	cbnz	r0, 800778c <_Bfree+0x20>
 8007782:	218f      	movs	r1, #143	@ 0x8f
 8007784:	4b08      	ldr	r3, [pc, #32]	@ (80077a8 <_Bfree+0x3c>)
 8007786:	4809      	ldr	r0, [pc, #36]	@ (80077ac <_Bfree+0x40>)
 8007788:	f000 fcea 	bl	8008160 <__assert_func>
 800778c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007790:	6006      	str	r6, [r0, #0]
 8007792:	60c6      	str	r6, [r0, #12]
 8007794:	b13c      	cbz	r4, 80077a6 <_Bfree+0x3a>
 8007796:	69eb      	ldr	r3, [r5, #28]
 8007798:	6862      	ldr	r2, [r4, #4]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80077a0:	6021      	str	r1, [r4, #0]
 80077a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	08008d9d 	.word	0x08008d9d
 80077ac:	08008e2e 	.word	0x08008e2e

080077b0 <__multadd>:
 80077b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b4:	4607      	mov	r7, r0
 80077b6:	460c      	mov	r4, r1
 80077b8:	461e      	mov	r6, r3
 80077ba:	2000      	movs	r0, #0
 80077bc:	690d      	ldr	r5, [r1, #16]
 80077be:	f101 0c14 	add.w	ip, r1, #20
 80077c2:	f8dc 3000 	ldr.w	r3, [ip]
 80077c6:	3001      	adds	r0, #1
 80077c8:	b299      	uxth	r1, r3
 80077ca:	fb02 6101 	mla	r1, r2, r1, r6
 80077ce:	0c1e      	lsrs	r6, r3, #16
 80077d0:	0c0b      	lsrs	r3, r1, #16
 80077d2:	fb02 3306 	mla	r3, r2, r6, r3
 80077d6:	b289      	uxth	r1, r1
 80077d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80077dc:	4285      	cmp	r5, r0
 80077de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077e2:	f84c 1b04 	str.w	r1, [ip], #4
 80077e6:	dcec      	bgt.n	80077c2 <__multadd+0x12>
 80077e8:	b30e      	cbz	r6, 800782e <__multadd+0x7e>
 80077ea:	68a3      	ldr	r3, [r4, #8]
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	dc19      	bgt.n	8007824 <__multadd+0x74>
 80077f0:	6861      	ldr	r1, [r4, #4]
 80077f2:	4638      	mov	r0, r7
 80077f4:	3101      	adds	r1, #1
 80077f6:	f7ff ff79 	bl	80076ec <_Balloc>
 80077fa:	4680      	mov	r8, r0
 80077fc:	b928      	cbnz	r0, 800780a <__multadd+0x5a>
 80077fe:	4602      	mov	r2, r0
 8007800:	21ba      	movs	r1, #186	@ 0xba
 8007802:	4b0c      	ldr	r3, [pc, #48]	@ (8007834 <__multadd+0x84>)
 8007804:	480c      	ldr	r0, [pc, #48]	@ (8007838 <__multadd+0x88>)
 8007806:	f000 fcab 	bl	8008160 <__assert_func>
 800780a:	6922      	ldr	r2, [r4, #16]
 800780c:	f104 010c 	add.w	r1, r4, #12
 8007810:	3202      	adds	r2, #2
 8007812:	0092      	lsls	r2, r2, #2
 8007814:	300c      	adds	r0, #12
 8007816:	f000 fc95 	bl	8008144 <memcpy>
 800781a:	4621      	mov	r1, r4
 800781c:	4638      	mov	r0, r7
 800781e:	f7ff ffa5 	bl	800776c <_Bfree>
 8007822:	4644      	mov	r4, r8
 8007824:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007828:	3501      	adds	r5, #1
 800782a:	615e      	str	r6, [r3, #20]
 800782c:	6125      	str	r5, [r4, #16]
 800782e:	4620      	mov	r0, r4
 8007830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007834:	08008e0c 	.word	0x08008e0c
 8007838:	08008e2e 	.word	0x08008e2e

0800783c <__hi0bits>:
 800783c:	4603      	mov	r3, r0
 800783e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007842:	bf3a      	itte	cc
 8007844:	0403      	lslcc	r3, r0, #16
 8007846:	2010      	movcc	r0, #16
 8007848:	2000      	movcs	r0, #0
 800784a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800784e:	bf3c      	itt	cc
 8007850:	021b      	lslcc	r3, r3, #8
 8007852:	3008      	addcc	r0, #8
 8007854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007858:	bf3c      	itt	cc
 800785a:	011b      	lslcc	r3, r3, #4
 800785c:	3004      	addcc	r0, #4
 800785e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007862:	bf3c      	itt	cc
 8007864:	009b      	lslcc	r3, r3, #2
 8007866:	3002      	addcc	r0, #2
 8007868:	2b00      	cmp	r3, #0
 800786a:	db05      	blt.n	8007878 <__hi0bits+0x3c>
 800786c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007870:	f100 0001 	add.w	r0, r0, #1
 8007874:	bf08      	it	eq
 8007876:	2020      	moveq	r0, #32
 8007878:	4770      	bx	lr

0800787a <__lo0bits>:
 800787a:	6803      	ldr	r3, [r0, #0]
 800787c:	4602      	mov	r2, r0
 800787e:	f013 0007 	ands.w	r0, r3, #7
 8007882:	d00b      	beq.n	800789c <__lo0bits+0x22>
 8007884:	07d9      	lsls	r1, r3, #31
 8007886:	d421      	bmi.n	80078cc <__lo0bits+0x52>
 8007888:	0798      	lsls	r0, r3, #30
 800788a:	bf49      	itett	mi
 800788c:	085b      	lsrmi	r3, r3, #1
 800788e:	089b      	lsrpl	r3, r3, #2
 8007890:	2001      	movmi	r0, #1
 8007892:	6013      	strmi	r3, [r2, #0]
 8007894:	bf5c      	itt	pl
 8007896:	2002      	movpl	r0, #2
 8007898:	6013      	strpl	r3, [r2, #0]
 800789a:	4770      	bx	lr
 800789c:	b299      	uxth	r1, r3
 800789e:	b909      	cbnz	r1, 80078a4 <__lo0bits+0x2a>
 80078a0:	2010      	movs	r0, #16
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	b2d9      	uxtb	r1, r3
 80078a6:	b909      	cbnz	r1, 80078ac <__lo0bits+0x32>
 80078a8:	3008      	adds	r0, #8
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	0719      	lsls	r1, r3, #28
 80078ae:	bf04      	itt	eq
 80078b0:	091b      	lsreq	r3, r3, #4
 80078b2:	3004      	addeq	r0, #4
 80078b4:	0799      	lsls	r1, r3, #30
 80078b6:	bf04      	itt	eq
 80078b8:	089b      	lsreq	r3, r3, #2
 80078ba:	3002      	addeq	r0, #2
 80078bc:	07d9      	lsls	r1, r3, #31
 80078be:	d403      	bmi.n	80078c8 <__lo0bits+0x4e>
 80078c0:	085b      	lsrs	r3, r3, #1
 80078c2:	f100 0001 	add.w	r0, r0, #1
 80078c6:	d003      	beq.n	80078d0 <__lo0bits+0x56>
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4770      	bx	lr
 80078cc:	2000      	movs	r0, #0
 80078ce:	4770      	bx	lr
 80078d0:	2020      	movs	r0, #32
 80078d2:	4770      	bx	lr

080078d4 <__i2b>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	2101      	movs	r1, #1
 80078da:	f7ff ff07 	bl	80076ec <_Balloc>
 80078de:	4602      	mov	r2, r0
 80078e0:	b928      	cbnz	r0, 80078ee <__i2b+0x1a>
 80078e2:	f240 1145 	movw	r1, #325	@ 0x145
 80078e6:	4b04      	ldr	r3, [pc, #16]	@ (80078f8 <__i2b+0x24>)
 80078e8:	4804      	ldr	r0, [pc, #16]	@ (80078fc <__i2b+0x28>)
 80078ea:	f000 fc39 	bl	8008160 <__assert_func>
 80078ee:	2301      	movs	r3, #1
 80078f0:	6144      	str	r4, [r0, #20]
 80078f2:	6103      	str	r3, [r0, #16]
 80078f4:	bd10      	pop	{r4, pc}
 80078f6:	bf00      	nop
 80078f8:	08008e0c 	.word	0x08008e0c
 80078fc:	08008e2e 	.word	0x08008e2e

08007900 <__multiply>:
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	4617      	mov	r7, r2
 8007906:	690a      	ldr	r2, [r1, #16]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4689      	mov	r9, r1
 800790c:	429a      	cmp	r2, r3
 800790e:	bfa2      	ittt	ge
 8007910:	463b      	movge	r3, r7
 8007912:	460f      	movge	r7, r1
 8007914:	4699      	movge	r9, r3
 8007916:	693d      	ldr	r5, [r7, #16]
 8007918:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	eb05 060a 	add.w	r6, r5, sl
 8007924:	42b3      	cmp	r3, r6
 8007926:	b085      	sub	sp, #20
 8007928:	bfb8      	it	lt
 800792a:	3101      	addlt	r1, #1
 800792c:	f7ff fede 	bl	80076ec <_Balloc>
 8007930:	b930      	cbnz	r0, 8007940 <__multiply+0x40>
 8007932:	4602      	mov	r2, r0
 8007934:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007938:	4b40      	ldr	r3, [pc, #256]	@ (8007a3c <__multiply+0x13c>)
 800793a:	4841      	ldr	r0, [pc, #260]	@ (8007a40 <__multiply+0x140>)
 800793c:	f000 fc10 	bl	8008160 <__assert_func>
 8007940:	f100 0414 	add.w	r4, r0, #20
 8007944:	4623      	mov	r3, r4
 8007946:	2200      	movs	r2, #0
 8007948:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800794c:	4573      	cmp	r3, lr
 800794e:	d320      	bcc.n	8007992 <__multiply+0x92>
 8007950:	f107 0814 	add.w	r8, r7, #20
 8007954:	f109 0114 	add.w	r1, r9, #20
 8007958:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800795c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007960:	9302      	str	r3, [sp, #8]
 8007962:	1beb      	subs	r3, r5, r7
 8007964:	3b15      	subs	r3, #21
 8007966:	f023 0303 	bic.w	r3, r3, #3
 800796a:	3304      	adds	r3, #4
 800796c:	3715      	adds	r7, #21
 800796e:	42bd      	cmp	r5, r7
 8007970:	bf38      	it	cc
 8007972:	2304      	movcc	r3, #4
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	9b02      	ldr	r3, [sp, #8]
 8007978:	9103      	str	r1, [sp, #12]
 800797a:	428b      	cmp	r3, r1
 800797c:	d80c      	bhi.n	8007998 <__multiply+0x98>
 800797e:	2e00      	cmp	r6, #0
 8007980:	dd03      	ble.n	800798a <__multiply+0x8a>
 8007982:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007986:	2b00      	cmp	r3, #0
 8007988:	d055      	beq.n	8007a36 <__multiply+0x136>
 800798a:	6106      	str	r6, [r0, #16]
 800798c:	b005      	add	sp, #20
 800798e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007992:	f843 2b04 	str.w	r2, [r3], #4
 8007996:	e7d9      	b.n	800794c <__multiply+0x4c>
 8007998:	f8b1 a000 	ldrh.w	sl, [r1]
 800799c:	f1ba 0f00 	cmp.w	sl, #0
 80079a0:	d01f      	beq.n	80079e2 <__multiply+0xe2>
 80079a2:	46c4      	mov	ip, r8
 80079a4:	46a1      	mov	r9, r4
 80079a6:	2700      	movs	r7, #0
 80079a8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80079ac:	f8d9 3000 	ldr.w	r3, [r9]
 80079b0:	fa1f fb82 	uxth.w	fp, r2
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	fb0a 330b 	mla	r3, sl, fp, r3
 80079ba:	443b      	add	r3, r7
 80079bc:	f8d9 7000 	ldr.w	r7, [r9]
 80079c0:	0c12      	lsrs	r2, r2, #16
 80079c2:	0c3f      	lsrs	r7, r7, #16
 80079c4:	fb0a 7202 	mla	r2, sl, r2, r7
 80079c8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079d2:	4565      	cmp	r5, ip
 80079d4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80079d8:	f849 3b04 	str.w	r3, [r9], #4
 80079dc:	d8e4      	bhi.n	80079a8 <__multiply+0xa8>
 80079de:	9b01      	ldr	r3, [sp, #4]
 80079e0:	50e7      	str	r7, [r4, r3]
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	3104      	adds	r1, #4
 80079e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80079ea:	f1b9 0f00 	cmp.w	r9, #0
 80079ee:	d020      	beq.n	8007a32 <__multiply+0x132>
 80079f0:	4647      	mov	r7, r8
 80079f2:	46a4      	mov	ip, r4
 80079f4:	f04f 0a00 	mov.w	sl, #0
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	f8b7 b000 	ldrh.w	fp, [r7]
 80079fe:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	fb09 220b 	mla	r2, r9, fp, r2
 8007a08:	4452      	add	r2, sl
 8007a0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007a12:	f857 3b04 	ldr.w	r3, [r7], #4
 8007a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a1a:	f8bc 3000 	ldrh.w	r3, [ip]
 8007a1e:	42bd      	cmp	r5, r7
 8007a20:	fb09 330a 	mla	r3, r9, sl, r3
 8007a24:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007a28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a2c:	d8e5      	bhi.n	80079fa <__multiply+0xfa>
 8007a2e:	9a01      	ldr	r2, [sp, #4]
 8007a30:	50a3      	str	r3, [r4, r2]
 8007a32:	3404      	adds	r4, #4
 8007a34:	e79f      	b.n	8007976 <__multiply+0x76>
 8007a36:	3e01      	subs	r6, #1
 8007a38:	e7a1      	b.n	800797e <__multiply+0x7e>
 8007a3a:	bf00      	nop
 8007a3c:	08008e0c 	.word	0x08008e0c
 8007a40:	08008e2e 	.word	0x08008e2e

08007a44 <__pow5mult>:
 8007a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a48:	4615      	mov	r5, r2
 8007a4a:	f012 0203 	ands.w	r2, r2, #3
 8007a4e:	4607      	mov	r7, r0
 8007a50:	460e      	mov	r6, r1
 8007a52:	d007      	beq.n	8007a64 <__pow5mult+0x20>
 8007a54:	4c25      	ldr	r4, [pc, #148]	@ (8007aec <__pow5mult+0xa8>)
 8007a56:	3a01      	subs	r2, #1
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a5e:	f7ff fea7 	bl	80077b0 <__multadd>
 8007a62:	4606      	mov	r6, r0
 8007a64:	10ad      	asrs	r5, r5, #2
 8007a66:	d03d      	beq.n	8007ae4 <__pow5mult+0xa0>
 8007a68:	69fc      	ldr	r4, [r7, #28]
 8007a6a:	b97c      	cbnz	r4, 8007a8c <__pow5mult+0x48>
 8007a6c:	2010      	movs	r0, #16
 8007a6e:	f7ff fcdf 	bl	8007430 <malloc>
 8007a72:	4602      	mov	r2, r0
 8007a74:	61f8      	str	r0, [r7, #28]
 8007a76:	b928      	cbnz	r0, 8007a84 <__pow5mult+0x40>
 8007a78:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a7c:	4b1c      	ldr	r3, [pc, #112]	@ (8007af0 <__pow5mult+0xac>)
 8007a7e:	481d      	ldr	r0, [pc, #116]	@ (8007af4 <__pow5mult+0xb0>)
 8007a80:	f000 fb6e 	bl	8008160 <__assert_func>
 8007a84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a88:	6004      	str	r4, [r0, #0]
 8007a8a:	60c4      	str	r4, [r0, #12]
 8007a8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a94:	b94c      	cbnz	r4, 8007aaa <__pow5mult+0x66>
 8007a96:	f240 2171 	movw	r1, #625	@ 0x271
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	f7ff ff1a 	bl	80078d4 <__i2b>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	f8c8 0008 	str.w	r0, [r8, #8]
 8007aa8:	6003      	str	r3, [r0, #0]
 8007aaa:	f04f 0900 	mov.w	r9, #0
 8007aae:	07eb      	lsls	r3, r5, #31
 8007ab0:	d50a      	bpl.n	8007ac8 <__pow5mult+0x84>
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7ff ff22 	bl	8007900 <__multiply>
 8007abc:	4680      	mov	r8, r0
 8007abe:	4631      	mov	r1, r6
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	f7ff fe53 	bl	800776c <_Bfree>
 8007ac6:	4646      	mov	r6, r8
 8007ac8:	106d      	asrs	r5, r5, #1
 8007aca:	d00b      	beq.n	8007ae4 <__pow5mult+0xa0>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	b938      	cbnz	r0, 8007ae0 <__pow5mult+0x9c>
 8007ad0:	4622      	mov	r2, r4
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	4638      	mov	r0, r7
 8007ad6:	f7ff ff13 	bl	8007900 <__multiply>
 8007ada:	6020      	str	r0, [r4, #0]
 8007adc:	f8c0 9000 	str.w	r9, [r0]
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	e7e4      	b.n	8007aae <__pow5mult+0x6a>
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aea:	bf00      	nop
 8007aec:	08008ed0 	.word	0x08008ed0
 8007af0:	08008d9d 	.word	0x08008d9d
 8007af4:	08008e2e 	.word	0x08008e2e

08007af8 <__lshift>:
 8007af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afc:	460c      	mov	r4, r1
 8007afe:	4607      	mov	r7, r0
 8007b00:	4691      	mov	r9, r2
 8007b02:	6923      	ldr	r3, [r4, #16]
 8007b04:	6849      	ldr	r1, [r1, #4]
 8007b06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007b10:	f108 0601 	add.w	r6, r8, #1
 8007b14:	42b3      	cmp	r3, r6
 8007b16:	db0b      	blt.n	8007b30 <__lshift+0x38>
 8007b18:	4638      	mov	r0, r7
 8007b1a:	f7ff fde7 	bl	80076ec <_Balloc>
 8007b1e:	4605      	mov	r5, r0
 8007b20:	b948      	cbnz	r0, 8007b36 <__lshift+0x3e>
 8007b22:	4602      	mov	r2, r0
 8007b24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007b28:	4b27      	ldr	r3, [pc, #156]	@ (8007bc8 <__lshift+0xd0>)
 8007b2a:	4828      	ldr	r0, [pc, #160]	@ (8007bcc <__lshift+0xd4>)
 8007b2c:	f000 fb18 	bl	8008160 <__assert_func>
 8007b30:	3101      	adds	r1, #1
 8007b32:	005b      	lsls	r3, r3, #1
 8007b34:	e7ee      	b.n	8007b14 <__lshift+0x1c>
 8007b36:	2300      	movs	r3, #0
 8007b38:	f100 0114 	add.w	r1, r0, #20
 8007b3c:	f100 0210 	add.w	r2, r0, #16
 8007b40:	4618      	mov	r0, r3
 8007b42:	4553      	cmp	r3, sl
 8007b44:	db33      	blt.n	8007bae <__lshift+0xb6>
 8007b46:	6920      	ldr	r0, [r4, #16]
 8007b48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b4c:	f104 0314 	add.w	r3, r4, #20
 8007b50:	f019 091f 	ands.w	r9, r9, #31
 8007b54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007b5c:	d02b      	beq.n	8007bb6 <__lshift+0xbe>
 8007b5e:	468a      	mov	sl, r1
 8007b60:	2200      	movs	r2, #0
 8007b62:	f1c9 0e20 	rsb	lr, r9, #32
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	fa00 f009 	lsl.w	r0, r0, r9
 8007b6c:	4310      	orrs	r0, r2
 8007b6e:	f84a 0b04 	str.w	r0, [sl], #4
 8007b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b76:	459c      	cmp	ip, r3
 8007b78:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b7c:	d8f3      	bhi.n	8007b66 <__lshift+0x6e>
 8007b7e:	ebac 0304 	sub.w	r3, ip, r4
 8007b82:	3b15      	subs	r3, #21
 8007b84:	f023 0303 	bic.w	r3, r3, #3
 8007b88:	3304      	adds	r3, #4
 8007b8a:	f104 0015 	add.w	r0, r4, #21
 8007b8e:	4560      	cmp	r0, ip
 8007b90:	bf88      	it	hi
 8007b92:	2304      	movhi	r3, #4
 8007b94:	50ca      	str	r2, [r1, r3]
 8007b96:	b10a      	cbz	r2, 8007b9c <__lshift+0xa4>
 8007b98:	f108 0602 	add.w	r6, r8, #2
 8007b9c:	3e01      	subs	r6, #1
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	612e      	str	r6, [r5, #16]
 8007ba4:	f7ff fde2 	bl	800776c <_Bfree>
 8007ba8:	4628      	mov	r0, r5
 8007baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bae:	f842 0f04 	str.w	r0, [r2, #4]!
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	e7c5      	b.n	8007b42 <__lshift+0x4a>
 8007bb6:	3904      	subs	r1, #4
 8007bb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bbc:	459c      	cmp	ip, r3
 8007bbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007bc2:	d8f9      	bhi.n	8007bb8 <__lshift+0xc0>
 8007bc4:	e7ea      	b.n	8007b9c <__lshift+0xa4>
 8007bc6:	bf00      	nop
 8007bc8:	08008e0c 	.word	0x08008e0c
 8007bcc:	08008e2e 	.word	0x08008e2e

08007bd0 <__mcmp>:
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	690a      	ldr	r2, [r1, #16]
 8007bd4:	6900      	ldr	r0, [r0, #16]
 8007bd6:	b530      	push	{r4, r5, lr}
 8007bd8:	1a80      	subs	r0, r0, r2
 8007bda:	d10e      	bne.n	8007bfa <__mcmp+0x2a>
 8007bdc:	3314      	adds	r3, #20
 8007bde:	3114      	adds	r1, #20
 8007be0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007be4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007be8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007bec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007bf0:	4295      	cmp	r5, r2
 8007bf2:	d003      	beq.n	8007bfc <__mcmp+0x2c>
 8007bf4:	d205      	bcs.n	8007c02 <__mcmp+0x32>
 8007bf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bfa:	bd30      	pop	{r4, r5, pc}
 8007bfc:	42a3      	cmp	r3, r4
 8007bfe:	d3f3      	bcc.n	8007be8 <__mcmp+0x18>
 8007c00:	e7fb      	b.n	8007bfa <__mcmp+0x2a>
 8007c02:	2001      	movs	r0, #1
 8007c04:	e7f9      	b.n	8007bfa <__mcmp+0x2a>
	...

08007c08 <__mdiff>:
 8007c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	4689      	mov	r9, r1
 8007c0e:	4606      	mov	r6, r0
 8007c10:	4611      	mov	r1, r2
 8007c12:	4648      	mov	r0, r9
 8007c14:	4614      	mov	r4, r2
 8007c16:	f7ff ffdb 	bl	8007bd0 <__mcmp>
 8007c1a:	1e05      	subs	r5, r0, #0
 8007c1c:	d112      	bne.n	8007c44 <__mdiff+0x3c>
 8007c1e:	4629      	mov	r1, r5
 8007c20:	4630      	mov	r0, r6
 8007c22:	f7ff fd63 	bl	80076ec <_Balloc>
 8007c26:	4602      	mov	r2, r0
 8007c28:	b928      	cbnz	r0, 8007c36 <__mdiff+0x2e>
 8007c2a:	f240 2137 	movw	r1, #567	@ 0x237
 8007c2e:	4b3e      	ldr	r3, [pc, #248]	@ (8007d28 <__mdiff+0x120>)
 8007c30:	483e      	ldr	r0, [pc, #248]	@ (8007d2c <__mdiff+0x124>)
 8007c32:	f000 fa95 	bl	8008160 <__assert_func>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	b003      	add	sp, #12
 8007c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c44:	bfbc      	itt	lt
 8007c46:	464b      	movlt	r3, r9
 8007c48:	46a1      	movlt	r9, r4
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007c50:	bfba      	itte	lt
 8007c52:	461c      	movlt	r4, r3
 8007c54:	2501      	movlt	r5, #1
 8007c56:	2500      	movge	r5, #0
 8007c58:	f7ff fd48 	bl	80076ec <_Balloc>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	b918      	cbnz	r0, 8007c68 <__mdiff+0x60>
 8007c60:	f240 2145 	movw	r1, #581	@ 0x245
 8007c64:	4b30      	ldr	r3, [pc, #192]	@ (8007d28 <__mdiff+0x120>)
 8007c66:	e7e3      	b.n	8007c30 <__mdiff+0x28>
 8007c68:	f100 0b14 	add.w	fp, r0, #20
 8007c6c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c70:	f109 0310 	add.w	r3, r9, #16
 8007c74:	60c5      	str	r5, [r0, #12]
 8007c76:	f04f 0c00 	mov.w	ip, #0
 8007c7a:	f109 0514 	add.w	r5, r9, #20
 8007c7e:	46d9      	mov	r9, fp
 8007c80:	6926      	ldr	r6, [r4, #16]
 8007c82:	f104 0e14 	add.w	lr, r4, #20
 8007c86:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c8a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	9b01      	ldr	r3, [sp, #4]
 8007c92:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c96:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c9a:	b281      	uxth	r1, r0
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	fa1f f38a 	uxth.w	r3, sl
 8007ca2:	1a5b      	subs	r3, r3, r1
 8007ca4:	0c00      	lsrs	r0, r0, #16
 8007ca6:	4463      	add	r3, ip
 8007ca8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007cac:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007cb6:	4576      	cmp	r6, lr
 8007cb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cbc:	f849 3b04 	str.w	r3, [r9], #4
 8007cc0:	d8e6      	bhi.n	8007c90 <__mdiff+0x88>
 8007cc2:	1b33      	subs	r3, r6, r4
 8007cc4:	3b15      	subs	r3, #21
 8007cc6:	f023 0303 	bic.w	r3, r3, #3
 8007cca:	3415      	adds	r4, #21
 8007ccc:	3304      	adds	r3, #4
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	bf38      	it	cc
 8007cd2:	2304      	movcc	r3, #4
 8007cd4:	441d      	add	r5, r3
 8007cd6:	445b      	add	r3, fp
 8007cd8:	461e      	mov	r6, r3
 8007cda:	462c      	mov	r4, r5
 8007cdc:	4544      	cmp	r4, r8
 8007cde:	d30e      	bcc.n	8007cfe <__mdiff+0xf6>
 8007ce0:	f108 0103 	add.w	r1, r8, #3
 8007ce4:	1b49      	subs	r1, r1, r5
 8007ce6:	f021 0103 	bic.w	r1, r1, #3
 8007cea:	3d03      	subs	r5, #3
 8007cec:	45a8      	cmp	r8, r5
 8007cee:	bf38      	it	cc
 8007cf0:	2100      	movcc	r1, #0
 8007cf2:	440b      	add	r3, r1
 8007cf4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cf8:	b199      	cbz	r1, 8007d22 <__mdiff+0x11a>
 8007cfa:	6117      	str	r7, [r2, #16]
 8007cfc:	e79e      	b.n	8007c3c <__mdiff+0x34>
 8007cfe:	46e6      	mov	lr, ip
 8007d00:	f854 1b04 	ldr.w	r1, [r4], #4
 8007d04:	fa1f fc81 	uxth.w	ip, r1
 8007d08:	44f4      	add	ip, lr
 8007d0a:	0c08      	lsrs	r0, r1, #16
 8007d0c:	4471      	add	r1, lr
 8007d0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007d12:	b289      	uxth	r1, r1
 8007d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007d18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007d1c:	f846 1b04 	str.w	r1, [r6], #4
 8007d20:	e7dc      	b.n	8007cdc <__mdiff+0xd4>
 8007d22:	3f01      	subs	r7, #1
 8007d24:	e7e6      	b.n	8007cf4 <__mdiff+0xec>
 8007d26:	bf00      	nop
 8007d28:	08008e0c 	.word	0x08008e0c
 8007d2c:	08008e2e 	.word	0x08008e2e

08007d30 <__d2b>:
 8007d30:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007d34:	2101      	movs	r1, #1
 8007d36:	4690      	mov	r8, r2
 8007d38:	4699      	mov	r9, r3
 8007d3a:	9e08      	ldr	r6, [sp, #32]
 8007d3c:	f7ff fcd6 	bl	80076ec <_Balloc>
 8007d40:	4604      	mov	r4, r0
 8007d42:	b930      	cbnz	r0, 8007d52 <__d2b+0x22>
 8007d44:	4602      	mov	r2, r0
 8007d46:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d4a:	4b23      	ldr	r3, [pc, #140]	@ (8007dd8 <__d2b+0xa8>)
 8007d4c:	4823      	ldr	r0, [pc, #140]	@ (8007ddc <__d2b+0xac>)
 8007d4e:	f000 fa07 	bl	8008160 <__assert_func>
 8007d52:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d56:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d5a:	b10d      	cbz	r5, 8007d60 <__d2b+0x30>
 8007d5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f1b8 0300 	subs.w	r3, r8, #0
 8007d66:	d024      	beq.n	8007db2 <__d2b+0x82>
 8007d68:	4668      	mov	r0, sp
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	f7ff fd85 	bl	800787a <__lo0bits>
 8007d70:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d74:	b1d8      	cbz	r0, 8007dae <__d2b+0x7e>
 8007d76:	f1c0 0320 	rsb	r3, r0, #32
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	40c2      	lsrs	r2, r0
 8007d82:	6163      	str	r3, [r4, #20]
 8007d84:	9201      	str	r2, [sp, #4]
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bf0c      	ite	eq
 8007d8c:	2201      	moveq	r2, #1
 8007d8e:	2202      	movne	r2, #2
 8007d90:	61a3      	str	r3, [r4, #24]
 8007d92:	6122      	str	r2, [r4, #16]
 8007d94:	b1ad      	cbz	r5, 8007dc2 <__d2b+0x92>
 8007d96:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d9a:	4405      	add	r5, r0
 8007d9c:	6035      	str	r5, [r6, #0]
 8007d9e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da4:	6018      	str	r0, [r3, #0]
 8007da6:	4620      	mov	r0, r4
 8007da8:	b002      	add	sp, #8
 8007daa:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007dae:	6161      	str	r1, [r4, #20]
 8007db0:	e7e9      	b.n	8007d86 <__d2b+0x56>
 8007db2:	a801      	add	r0, sp, #4
 8007db4:	f7ff fd61 	bl	800787a <__lo0bits>
 8007db8:	9b01      	ldr	r3, [sp, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	6163      	str	r3, [r4, #20]
 8007dbe:	3020      	adds	r0, #32
 8007dc0:	e7e7      	b.n	8007d92 <__d2b+0x62>
 8007dc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007dc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007dca:	6030      	str	r0, [r6, #0]
 8007dcc:	6918      	ldr	r0, [r3, #16]
 8007dce:	f7ff fd35 	bl	800783c <__hi0bits>
 8007dd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007dd6:	e7e4      	b.n	8007da2 <__d2b+0x72>
 8007dd8:	08008e0c 	.word	0x08008e0c
 8007ddc:	08008e2e 	.word	0x08008e2e

08007de0 <__sread>:
 8007de0:	b510      	push	{r4, lr}
 8007de2:	460c      	mov	r4, r1
 8007de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007de8:	f000 f956 	bl	8008098 <_read_r>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	bfab      	itete	ge
 8007df0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007df2:	89a3      	ldrhlt	r3, [r4, #12]
 8007df4:	181b      	addge	r3, r3, r0
 8007df6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007dfa:	bfac      	ite	ge
 8007dfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007dfe:	81a3      	strhlt	r3, [r4, #12]
 8007e00:	bd10      	pop	{r4, pc}

08007e02 <__swrite>:
 8007e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e06:	461f      	mov	r7, r3
 8007e08:	898b      	ldrh	r3, [r1, #12]
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	05db      	lsls	r3, r3, #23
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4616      	mov	r6, r2
 8007e12:	d505      	bpl.n	8007e20 <__swrite+0x1e>
 8007e14:	2302      	movs	r3, #2
 8007e16:	2200      	movs	r2, #0
 8007e18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e1c:	f000 f92a 	bl	8008074 <_lseek_r>
 8007e20:	89a3      	ldrh	r3, [r4, #12]
 8007e22:	4632      	mov	r2, r6
 8007e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e36:	f000 b951 	b.w	80080dc <_write_r>

08007e3a <__sseek>:
 8007e3a:	b510      	push	{r4, lr}
 8007e3c:	460c      	mov	r4, r1
 8007e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e42:	f000 f917 	bl	8008074 <_lseek_r>
 8007e46:	1c43      	adds	r3, r0, #1
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	bf15      	itete	ne
 8007e4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007e4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007e52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007e56:	81a3      	strheq	r3, [r4, #12]
 8007e58:	bf18      	it	ne
 8007e5a:	81a3      	strhne	r3, [r4, #12]
 8007e5c:	bd10      	pop	{r4, pc}

08007e5e <__sclose>:
 8007e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e62:	f000 b94d 	b.w	8008100 <_close_r>

08007e66 <__swbuf_r>:
 8007e66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e68:	460e      	mov	r6, r1
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	b118      	cbz	r0, 8007e78 <__swbuf_r+0x12>
 8007e70:	6a03      	ldr	r3, [r0, #32]
 8007e72:	b90b      	cbnz	r3, 8007e78 <__swbuf_r+0x12>
 8007e74:	f7fe fa52 	bl	800631c <__sinit>
 8007e78:	69a3      	ldr	r3, [r4, #24]
 8007e7a:	60a3      	str	r3, [r4, #8]
 8007e7c:	89a3      	ldrh	r3, [r4, #12]
 8007e7e:	071a      	lsls	r2, r3, #28
 8007e80:	d501      	bpl.n	8007e86 <__swbuf_r+0x20>
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	b943      	cbnz	r3, 8007e98 <__swbuf_r+0x32>
 8007e86:	4621      	mov	r1, r4
 8007e88:	4628      	mov	r0, r5
 8007e8a:	f000 f82b 	bl	8007ee4 <__swsetup_r>
 8007e8e:	b118      	cbz	r0, 8007e98 <__swbuf_r+0x32>
 8007e90:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007e94:	4638      	mov	r0, r7
 8007e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e98:	6823      	ldr	r3, [r4, #0]
 8007e9a:	6922      	ldr	r2, [r4, #16]
 8007e9c:	b2f6      	uxtb	r6, r6
 8007e9e:	1a98      	subs	r0, r3, r2
 8007ea0:	6963      	ldr	r3, [r4, #20]
 8007ea2:	4637      	mov	r7, r6
 8007ea4:	4283      	cmp	r3, r0
 8007ea6:	dc05      	bgt.n	8007eb4 <__swbuf_r+0x4e>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7ff fbea 	bl	8007684 <_fflush_r>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d1ed      	bne.n	8007e90 <__swbuf_r+0x2a>
 8007eb4:	68a3      	ldr	r3, [r4, #8]
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	60a3      	str	r3, [r4, #8]
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	6022      	str	r2, [r4, #0]
 8007ec0:	701e      	strb	r6, [r3, #0]
 8007ec2:	6962      	ldr	r2, [r4, #20]
 8007ec4:	1c43      	adds	r3, r0, #1
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d004      	beq.n	8007ed4 <__swbuf_r+0x6e>
 8007eca:	89a3      	ldrh	r3, [r4, #12]
 8007ecc:	07db      	lsls	r3, r3, #31
 8007ece:	d5e1      	bpl.n	8007e94 <__swbuf_r+0x2e>
 8007ed0:	2e0a      	cmp	r6, #10
 8007ed2:	d1df      	bne.n	8007e94 <__swbuf_r+0x2e>
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7ff fbd4 	bl	8007684 <_fflush_r>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	d0d9      	beq.n	8007e94 <__swbuf_r+0x2e>
 8007ee0:	e7d6      	b.n	8007e90 <__swbuf_r+0x2a>
	...

08007ee4 <__swsetup_r>:
 8007ee4:	b538      	push	{r3, r4, r5, lr}
 8007ee6:	4b29      	ldr	r3, [pc, #164]	@ (8007f8c <__swsetup_r+0xa8>)
 8007ee8:	4605      	mov	r5, r0
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	460c      	mov	r4, r1
 8007eee:	b118      	cbz	r0, 8007ef8 <__swsetup_r+0x14>
 8007ef0:	6a03      	ldr	r3, [r0, #32]
 8007ef2:	b90b      	cbnz	r3, 8007ef8 <__swsetup_r+0x14>
 8007ef4:	f7fe fa12 	bl	800631c <__sinit>
 8007ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efc:	0719      	lsls	r1, r3, #28
 8007efe:	d422      	bmi.n	8007f46 <__swsetup_r+0x62>
 8007f00:	06da      	lsls	r2, r3, #27
 8007f02:	d407      	bmi.n	8007f14 <__swsetup_r+0x30>
 8007f04:	2209      	movs	r2, #9
 8007f06:	602a      	str	r2, [r5, #0]
 8007f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f10:	81a3      	strh	r3, [r4, #12]
 8007f12:	e033      	b.n	8007f7c <__swsetup_r+0x98>
 8007f14:	0758      	lsls	r0, r3, #29
 8007f16:	d512      	bpl.n	8007f3e <__swsetup_r+0x5a>
 8007f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f1a:	b141      	cbz	r1, 8007f2e <__swsetup_r+0x4a>
 8007f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d002      	beq.n	8007f2a <__swsetup_r+0x46>
 8007f24:	4628      	mov	r0, r5
 8007f26:	f000 f94d 	bl	80081c4 <_free_r>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	2300      	movs	r3, #0
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	f043 0308 	orr.w	r3, r3, #8
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	b94b      	cbnz	r3, 8007f5e <__swsetup_r+0x7a>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f54:	d003      	beq.n	8007f5e <__swsetup_r+0x7a>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4628      	mov	r0, r5
 8007f5a:	f000 f83e 	bl	8007fda <__smakebuf_r>
 8007f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f62:	f013 0201 	ands.w	r2, r3, #1
 8007f66:	d00a      	beq.n	8007f7e <__swsetup_r+0x9a>
 8007f68:	2200      	movs	r2, #0
 8007f6a:	60a2      	str	r2, [r4, #8]
 8007f6c:	6962      	ldr	r2, [r4, #20]
 8007f6e:	4252      	negs	r2, r2
 8007f70:	61a2      	str	r2, [r4, #24]
 8007f72:	6922      	ldr	r2, [r4, #16]
 8007f74:	b942      	cbnz	r2, 8007f88 <__swsetup_r+0xa4>
 8007f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007f7a:	d1c5      	bne.n	8007f08 <__swsetup_r+0x24>
 8007f7c:	bd38      	pop	{r3, r4, r5, pc}
 8007f7e:	0799      	lsls	r1, r3, #30
 8007f80:	bf58      	it	pl
 8007f82:	6962      	ldrpl	r2, [r4, #20]
 8007f84:	60a2      	str	r2, [r4, #8]
 8007f86:	e7f4      	b.n	8007f72 <__swsetup_r+0x8e>
 8007f88:	2000      	movs	r0, #0
 8007f8a:	e7f7      	b.n	8007f7c <__swsetup_r+0x98>
 8007f8c:	20000018 	.word	0x20000018

08007f90 <__swhatbuf_r>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	460c      	mov	r4, r1
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	4615      	mov	r5, r2
 8007f9a:	2900      	cmp	r1, #0
 8007f9c:	461e      	mov	r6, r3
 8007f9e:	b096      	sub	sp, #88	@ 0x58
 8007fa0:	da0c      	bge.n	8007fbc <__swhatbuf_r+0x2c>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007faa:	bf14      	ite	ne
 8007fac:	2340      	movne	r3, #64	@ 0x40
 8007fae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fb2:	2000      	movs	r0, #0
 8007fb4:	6031      	str	r1, [r6, #0]
 8007fb6:	602b      	str	r3, [r5, #0]
 8007fb8:	b016      	add	sp, #88	@ 0x58
 8007fba:	bd70      	pop	{r4, r5, r6, pc}
 8007fbc:	466a      	mov	r2, sp
 8007fbe:	f000 f8af 	bl	8008120 <_fstat_r>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	dbed      	blt.n	8007fa2 <__swhatbuf_r+0x12>
 8007fc6:	9901      	ldr	r1, [sp, #4]
 8007fc8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fcc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fd0:	4259      	negs	r1, r3
 8007fd2:	4159      	adcs	r1, r3
 8007fd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fd8:	e7eb      	b.n	8007fb2 <__swhatbuf_r+0x22>

08007fda <__smakebuf_r>:
 8007fda:	898b      	ldrh	r3, [r1, #12]
 8007fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fde:	079d      	lsls	r5, r3, #30
 8007fe0:	4606      	mov	r6, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	d507      	bpl.n	8007ff6 <__smakebuf_r+0x1c>
 8007fe6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fea:	6023      	str	r3, [r4, #0]
 8007fec:	6123      	str	r3, [r4, #16]
 8007fee:	2301      	movs	r3, #1
 8007ff0:	6163      	str	r3, [r4, #20]
 8007ff2:	b003      	add	sp, #12
 8007ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff6:	466a      	mov	r2, sp
 8007ff8:	ab01      	add	r3, sp, #4
 8007ffa:	f7ff ffc9 	bl	8007f90 <__swhatbuf_r>
 8007ffe:	9f00      	ldr	r7, [sp, #0]
 8008000:	4605      	mov	r5, r0
 8008002:	4639      	mov	r1, r7
 8008004:	4630      	mov	r0, r6
 8008006:	f7ff fa3d 	bl	8007484 <_malloc_r>
 800800a:	b948      	cbnz	r0, 8008020 <__smakebuf_r+0x46>
 800800c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008010:	059a      	lsls	r2, r3, #22
 8008012:	d4ee      	bmi.n	8007ff2 <__smakebuf_r+0x18>
 8008014:	f023 0303 	bic.w	r3, r3, #3
 8008018:	f043 0302 	orr.w	r3, r3, #2
 800801c:	81a3      	strh	r3, [r4, #12]
 800801e:	e7e2      	b.n	8007fe6 <__smakebuf_r+0xc>
 8008020:	89a3      	ldrh	r3, [r4, #12]
 8008022:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	6020      	str	r0, [r4, #0]
 8008030:	b15b      	cbz	r3, 800804a <__smakebuf_r+0x70>
 8008032:	4630      	mov	r0, r6
 8008034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008038:	f000 f80c 	bl	8008054 <_isatty_r>
 800803c:	b128      	cbz	r0, 800804a <__smakebuf_r+0x70>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	f023 0303 	bic.w	r3, r3, #3
 8008044:	f043 0301 	orr.w	r3, r3, #1
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	431d      	orrs	r5, r3
 800804e:	81a5      	strh	r5, [r4, #12]
 8008050:	e7cf      	b.n	8007ff2 <__smakebuf_r+0x18>
	...

08008054 <_isatty_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	2300      	movs	r3, #0
 8008058:	4d05      	ldr	r5, [pc, #20]	@ (8008070 <_isatty_r+0x1c>)
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	602b      	str	r3, [r5, #0]
 8008060:	f7f9 feb1 	bl	8001dc6 <_isatty>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	d102      	bne.n	800806e <_isatty_r+0x1a>
 8008068:	682b      	ldr	r3, [r5, #0]
 800806a:	b103      	cbz	r3, 800806e <_isatty_r+0x1a>
 800806c:	6023      	str	r3, [r4, #0]
 800806e:	bd38      	pop	{r3, r4, r5, pc}
 8008070:	20000474 	.word	0x20000474

08008074 <_lseek_r>:
 8008074:	b538      	push	{r3, r4, r5, lr}
 8008076:	4604      	mov	r4, r0
 8008078:	4608      	mov	r0, r1
 800807a:	4611      	mov	r1, r2
 800807c:	2200      	movs	r2, #0
 800807e:	4d05      	ldr	r5, [pc, #20]	@ (8008094 <_lseek_r+0x20>)
 8008080:	602a      	str	r2, [r5, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	f7f9 fea9 	bl	8001dda <_lseek>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_lseek_r+0x1e>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_lseek_r+0x1e>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000474 	.word	0x20000474

08008098 <_read_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4604      	mov	r4, r0
 800809c:	4608      	mov	r0, r1
 800809e:	4611      	mov	r1, r2
 80080a0:	2200      	movs	r2, #0
 80080a2:	4d05      	ldr	r5, [pc, #20]	@ (80080b8 <_read_r+0x20>)
 80080a4:	602a      	str	r2, [r5, #0]
 80080a6:	461a      	mov	r2, r3
 80080a8:	f7f9 fe3a 	bl	8001d20 <_read>
 80080ac:	1c43      	adds	r3, r0, #1
 80080ae:	d102      	bne.n	80080b6 <_read_r+0x1e>
 80080b0:	682b      	ldr	r3, [r5, #0]
 80080b2:	b103      	cbz	r3, 80080b6 <_read_r+0x1e>
 80080b4:	6023      	str	r3, [r4, #0]
 80080b6:	bd38      	pop	{r3, r4, r5, pc}
 80080b8:	20000474 	.word	0x20000474

080080bc <_sbrk_r>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	2300      	movs	r3, #0
 80080c0:	4d05      	ldr	r5, [pc, #20]	@ (80080d8 <_sbrk_r+0x1c>)
 80080c2:	4604      	mov	r4, r0
 80080c4:	4608      	mov	r0, r1
 80080c6:	602b      	str	r3, [r5, #0]
 80080c8:	f7f9 fe94 	bl	8001df4 <_sbrk>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_sbrk_r+0x1a>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_sbrk_r+0x1a>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20000474 	.word	0x20000474

080080dc <_write_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4604      	mov	r4, r0
 80080e0:	4608      	mov	r0, r1
 80080e2:	4611      	mov	r1, r2
 80080e4:	2200      	movs	r2, #0
 80080e6:	4d05      	ldr	r5, [pc, #20]	@ (80080fc <_write_r+0x20>)
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7f9 fe35 	bl	8001d5a <_write>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_write_r+0x1e>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_write_r+0x1e>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	20000474 	.word	0x20000474

08008100 <_close_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	2300      	movs	r3, #0
 8008104:	4d05      	ldr	r5, [pc, #20]	@ (800811c <_close_r+0x1c>)
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7f9 fe41 	bl	8001d92 <_close>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_close_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_close_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20000474 	.word	0x20000474

08008120 <_fstat_r>:
 8008120:	b538      	push	{r3, r4, r5, lr}
 8008122:	2300      	movs	r3, #0
 8008124:	4d06      	ldr	r5, [pc, #24]	@ (8008140 <_fstat_r+0x20>)
 8008126:	4604      	mov	r4, r0
 8008128:	4608      	mov	r0, r1
 800812a:	4611      	mov	r1, r2
 800812c:	602b      	str	r3, [r5, #0]
 800812e:	f7f9 fe3b 	bl	8001da8 <_fstat>
 8008132:	1c43      	adds	r3, r0, #1
 8008134:	d102      	bne.n	800813c <_fstat_r+0x1c>
 8008136:	682b      	ldr	r3, [r5, #0]
 8008138:	b103      	cbz	r3, 800813c <_fstat_r+0x1c>
 800813a:	6023      	str	r3, [r4, #0]
 800813c:	bd38      	pop	{r3, r4, r5, pc}
 800813e:	bf00      	nop
 8008140:	20000474 	.word	0x20000474

08008144 <memcpy>:
 8008144:	440a      	add	r2, r1
 8008146:	4291      	cmp	r1, r2
 8008148:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800814c:	d100      	bne.n	8008150 <memcpy+0xc>
 800814e:	4770      	bx	lr
 8008150:	b510      	push	{r4, lr}
 8008152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008156:	4291      	cmp	r1, r2
 8008158:	f803 4f01 	strb.w	r4, [r3, #1]!
 800815c:	d1f9      	bne.n	8008152 <memcpy+0xe>
 800815e:	bd10      	pop	{r4, pc}

08008160 <__assert_func>:
 8008160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008162:	4614      	mov	r4, r2
 8008164:	461a      	mov	r2, r3
 8008166:	4b09      	ldr	r3, [pc, #36]	@ (800818c <__assert_func+0x2c>)
 8008168:	4605      	mov	r5, r0
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68d8      	ldr	r0, [r3, #12]
 800816e:	b14c      	cbz	r4, 8008184 <__assert_func+0x24>
 8008170:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <__assert_func+0x30>)
 8008172:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008176:	9100      	str	r1, [sp, #0]
 8008178:	462b      	mov	r3, r5
 800817a:	4906      	ldr	r1, [pc, #24]	@ (8008194 <__assert_func+0x34>)
 800817c:	f000 f87c 	bl	8008278 <fiprintf>
 8008180:	f000 f899 	bl	80082b6 <abort>
 8008184:	4b04      	ldr	r3, [pc, #16]	@ (8008198 <__assert_func+0x38>)
 8008186:	461c      	mov	r4, r3
 8008188:	e7f3      	b.n	8008172 <__assert_func+0x12>
 800818a:	bf00      	nop
 800818c:	20000018 	.word	0x20000018
 8008190:	08008e91 	.word	0x08008e91
 8008194:	08008e9e 	.word	0x08008e9e
 8008198:	08008ecc 	.word	0x08008ecc

0800819c <_calloc_r>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	fba1 5402 	umull	r5, r4, r1, r2
 80081a2:	b934      	cbnz	r4, 80081b2 <_calloc_r+0x16>
 80081a4:	4629      	mov	r1, r5
 80081a6:	f7ff f96d 	bl	8007484 <_malloc_r>
 80081aa:	4606      	mov	r6, r0
 80081ac:	b928      	cbnz	r0, 80081ba <_calloc_r+0x1e>
 80081ae:	4630      	mov	r0, r6
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	220c      	movs	r2, #12
 80081b4:	2600      	movs	r6, #0
 80081b6:	6002      	str	r2, [r0, #0]
 80081b8:	e7f9      	b.n	80081ae <_calloc_r+0x12>
 80081ba:	462a      	mov	r2, r5
 80081bc:	4621      	mov	r1, r4
 80081be:	f7fe f953 	bl	8006468 <memset>
 80081c2:	e7f4      	b.n	80081ae <_calloc_r+0x12>

080081c4 <_free_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	4605      	mov	r5, r0
 80081c8:	2900      	cmp	r1, #0
 80081ca:	d040      	beq.n	800824e <_free_r+0x8a>
 80081cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081d0:	1f0c      	subs	r4, r1, #4
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	bfb8      	it	lt
 80081d6:	18e4      	addlt	r4, r4, r3
 80081d8:	f7ff fa7c 	bl	80076d4 <__malloc_lock>
 80081dc:	4a1c      	ldr	r2, [pc, #112]	@ (8008250 <_free_r+0x8c>)
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	b933      	cbnz	r3, 80081f0 <_free_r+0x2c>
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	6014      	str	r4, [r2, #0]
 80081e6:	4628      	mov	r0, r5
 80081e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081ec:	f7ff ba78 	b.w	80076e0 <__malloc_unlock>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d908      	bls.n	8008206 <_free_r+0x42>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	1821      	adds	r1, r4, r0
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf01      	itttt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	1809      	addeq	r1, r1, r0
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	e7ed      	b.n	80081e2 <_free_r+0x1e>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x4c>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x42>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1850      	adds	r0, r2, r1
 8008214:	42a0      	cmp	r0, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x6c>
 8008218:	6820      	ldr	r0, [r4, #0]
 800821a:	4401      	add	r1, r0
 800821c:	1850      	adds	r0, r2, r1
 800821e:	4283      	cmp	r3, r0
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1e0      	bne.n	80081e6 <_free_r+0x22>
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	4408      	add	r0, r1
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	6053      	str	r3, [r2, #4]
 800822e:	e7da      	b.n	80081e6 <_free_r+0x22>
 8008230:	d902      	bls.n	8008238 <_free_r+0x74>
 8008232:	230c      	movs	r3, #12
 8008234:	602b      	str	r3, [r5, #0]
 8008236:	e7d6      	b.n	80081e6 <_free_r+0x22>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	1821      	adds	r1, r4, r0
 800823c:	428b      	cmp	r3, r1
 800823e:	bf01      	itttt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	1809      	addeq	r1, r1, r0
 8008246:	6021      	streq	r1, [r4, #0]
 8008248:	6063      	str	r3, [r4, #4]
 800824a:	6054      	str	r4, [r2, #4]
 800824c:	e7cb      	b.n	80081e6 <_free_r+0x22>
 800824e:	bd38      	pop	{r3, r4, r5, pc}
 8008250:	20000470 	.word	0x20000470

08008254 <__ascii_mbtowc>:
 8008254:	b082      	sub	sp, #8
 8008256:	b901      	cbnz	r1, 800825a <__ascii_mbtowc+0x6>
 8008258:	a901      	add	r1, sp, #4
 800825a:	b142      	cbz	r2, 800826e <__ascii_mbtowc+0x1a>
 800825c:	b14b      	cbz	r3, 8008272 <__ascii_mbtowc+0x1e>
 800825e:	7813      	ldrb	r3, [r2, #0]
 8008260:	600b      	str	r3, [r1, #0]
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	1e10      	subs	r0, r2, #0
 8008266:	bf18      	it	ne
 8008268:	2001      	movne	r0, #1
 800826a:	b002      	add	sp, #8
 800826c:	4770      	bx	lr
 800826e:	4610      	mov	r0, r2
 8008270:	e7fb      	b.n	800826a <__ascii_mbtowc+0x16>
 8008272:	f06f 0001 	mvn.w	r0, #1
 8008276:	e7f8      	b.n	800826a <__ascii_mbtowc+0x16>

08008278 <fiprintf>:
 8008278:	b40e      	push	{r1, r2, r3}
 800827a:	b503      	push	{r0, r1, lr}
 800827c:	4601      	mov	r1, r0
 800827e:	ab03      	add	r3, sp, #12
 8008280:	4805      	ldr	r0, [pc, #20]	@ (8008298 <fiprintf+0x20>)
 8008282:	f853 2b04 	ldr.w	r2, [r3], #4
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	f7fe ffb9 	bl	8007200 <_vfiprintf_r>
 800828e:	b002      	add	sp, #8
 8008290:	f85d eb04 	ldr.w	lr, [sp], #4
 8008294:	b003      	add	sp, #12
 8008296:	4770      	bx	lr
 8008298:	20000018 	.word	0x20000018

0800829c <__ascii_wctomb>:
 800829c:	4603      	mov	r3, r0
 800829e:	4608      	mov	r0, r1
 80082a0:	b141      	cbz	r1, 80082b4 <__ascii_wctomb+0x18>
 80082a2:	2aff      	cmp	r2, #255	@ 0xff
 80082a4:	d904      	bls.n	80082b0 <__ascii_wctomb+0x14>
 80082a6:	228a      	movs	r2, #138	@ 0x8a
 80082a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	4770      	bx	lr
 80082b0:	2001      	movs	r0, #1
 80082b2:	700a      	strb	r2, [r1, #0]
 80082b4:	4770      	bx	lr

080082b6 <abort>:
 80082b6:	2006      	movs	r0, #6
 80082b8:	b508      	push	{r3, lr}
 80082ba:	f000 f82b 	bl	8008314 <raise>
 80082be:	2001      	movs	r0, #1
 80082c0:	f7f9 fd23 	bl	8001d0a <_exit>

080082c4 <_raise_r>:
 80082c4:	291f      	cmp	r1, #31
 80082c6:	b538      	push	{r3, r4, r5, lr}
 80082c8:	4605      	mov	r5, r0
 80082ca:	460c      	mov	r4, r1
 80082cc:	d904      	bls.n	80082d8 <_raise_r+0x14>
 80082ce:	2316      	movs	r3, #22
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082da:	b112      	cbz	r2, 80082e2 <_raise_r+0x1e>
 80082dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082e0:	b94b      	cbnz	r3, 80082f6 <_raise_r+0x32>
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f830 	bl	8008348 <_getpid_r>
 80082e8:	4622      	mov	r2, r4
 80082ea:	4601      	mov	r1, r0
 80082ec:	4628      	mov	r0, r5
 80082ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082f2:	f000 b817 	b.w	8008324 <_kill_r>
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d00a      	beq.n	8008310 <_raise_r+0x4c>
 80082fa:	1c59      	adds	r1, r3, #1
 80082fc:	d103      	bne.n	8008306 <_raise_r+0x42>
 80082fe:	2316      	movs	r3, #22
 8008300:	6003      	str	r3, [r0, #0]
 8008302:	2001      	movs	r0, #1
 8008304:	e7e7      	b.n	80082d6 <_raise_r+0x12>
 8008306:	2100      	movs	r1, #0
 8008308:	4620      	mov	r0, r4
 800830a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800830e:	4798      	blx	r3
 8008310:	2000      	movs	r0, #0
 8008312:	e7e0      	b.n	80082d6 <_raise_r+0x12>

08008314 <raise>:
 8008314:	4b02      	ldr	r3, [pc, #8]	@ (8008320 <raise+0xc>)
 8008316:	4601      	mov	r1, r0
 8008318:	6818      	ldr	r0, [r3, #0]
 800831a:	f7ff bfd3 	b.w	80082c4 <_raise_r>
 800831e:	bf00      	nop
 8008320:	20000018 	.word	0x20000018

08008324 <_kill_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	2300      	movs	r3, #0
 8008328:	4d06      	ldr	r5, [pc, #24]	@ (8008344 <_kill_r+0x20>)
 800832a:	4604      	mov	r4, r0
 800832c:	4608      	mov	r0, r1
 800832e:	4611      	mov	r1, r2
 8008330:	602b      	str	r3, [r5, #0]
 8008332:	f7f9 fcda 	bl	8001cea <_kill>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	d102      	bne.n	8008340 <_kill_r+0x1c>
 800833a:	682b      	ldr	r3, [r5, #0]
 800833c:	b103      	cbz	r3, 8008340 <_kill_r+0x1c>
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	bd38      	pop	{r3, r4, r5, pc}
 8008342:	bf00      	nop
 8008344:	20000474 	.word	0x20000474

08008348 <_getpid_r>:
 8008348:	f7f9 bcc8 	b.w	8001cdc <_getpid>

0800834c <powf>:
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	460c      	mov	r4, r1
 8008350:	4606      	mov	r6, r0
 8008352:	f000 f851 	bl	80083f8 <__ieee754_powf>
 8008356:	4621      	mov	r1, r4
 8008358:	4605      	mov	r5, r0
 800835a:	4620      	mov	r0, r4
 800835c:	f7f8 fe80 	bl	8001060 <__aeabi_fcmpun>
 8008360:	bb68      	cbnz	r0, 80083be <powf+0x72>
 8008362:	2100      	movs	r1, #0
 8008364:	4630      	mov	r0, r6
 8008366:	f7f8 fe49 	bl	8000ffc <__aeabi_fcmpeq>
 800836a:	b190      	cbz	r0, 8008392 <powf+0x46>
 800836c:	2100      	movs	r1, #0
 800836e:	4620      	mov	r0, r4
 8008370:	f7f8 fe44 	bl	8000ffc <__aeabi_fcmpeq>
 8008374:	2800      	cmp	r0, #0
 8008376:	d133      	bne.n	80083e0 <powf+0x94>
 8008378:	4620      	mov	r0, r4
 800837a:	f000 f834 	bl	80083e6 <finitef>
 800837e:	b1f0      	cbz	r0, 80083be <powf+0x72>
 8008380:	2100      	movs	r1, #0
 8008382:	4620      	mov	r0, r4
 8008384:	f7f8 fe44 	bl	8001010 <__aeabi_fcmplt>
 8008388:	b1c8      	cbz	r0, 80083be <powf+0x72>
 800838a:	f7fe f875 	bl	8006478 <__errno>
 800838e:	2322      	movs	r3, #34	@ 0x22
 8008390:	e014      	b.n	80083bc <powf+0x70>
 8008392:	4628      	mov	r0, r5
 8008394:	f000 f827 	bl	80083e6 <finitef>
 8008398:	b998      	cbnz	r0, 80083c2 <powf+0x76>
 800839a:	4630      	mov	r0, r6
 800839c:	f000 f823 	bl	80083e6 <finitef>
 80083a0:	b178      	cbz	r0, 80083c2 <powf+0x76>
 80083a2:	4620      	mov	r0, r4
 80083a4:	f000 f81f 	bl	80083e6 <finitef>
 80083a8:	b158      	cbz	r0, 80083c2 <powf+0x76>
 80083aa:	4629      	mov	r1, r5
 80083ac:	4628      	mov	r0, r5
 80083ae:	f7f8 fe57 	bl	8001060 <__aeabi_fcmpun>
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d0e9      	beq.n	800838a <powf+0x3e>
 80083b6:	f7fe f85f 	bl	8006478 <__errno>
 80083ba:	2321      	movs	r3, #33	@ 0x21
 80083bc:	6003      	str	r3, [r0, #0]
 80083be:	4628      	mov	r0, r5
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
 80083c2:	2100      	movs	r1, #0
 80083c4:	4628      	mov	r0, r5
 80083c6:	f7f8 fe19 	bl	8000ffc <__aeabi_fcmpeq>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	d0f7      	beq.n	80083be <powf+0x72>
 80083ce:	4630      	mov	r0, r6
 80083d0:	f000 f809 	bl	80083e6 <finitef>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d0f2      	beq.n	80083be <powf+0x72>
 80083d8:	4620      	mov	r0, r4
 80083da:	f000 f804 	bl	80083e6 <finitef>
 80083de:	e7d3      	b.n	8008388 <powf+0x3c>
 80083e0:	f04f 557e 	mov.w	r5, #1065353216	@ 0x3f800000
 80083e4:	e7eb      	b.n	80083be <powf+0x72>

080083e6 <finitef>:
 80083e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80083ea:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80083ee:	bfac      	ite	ge
 80083f0:	2000      	movge	r0, #0
 80083f2:	2001      	movlt	r0, #1
 80083f4:	4770      	bx	lr
	...

080083f8 <__ieee754_powf>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	f031 4b00 	bics.w	fp, r1, #2147483648	@ 0x80000000
 8008400:	4681      	mov	r9, r0
 8008402:	460f      	mov	r7, r1
 8008404:	4606      	mov	r6, r0
 8008406:	460c      	mov	r4, r1
 8008408:	b087      	sub	sp, #28
 800840a:	d10c      	bne.n	8008426 <__ieee754_powf+0x2e>
 800840c:	f480 0680 	eor.w	r6, r0, #4194304	@ 0x400000
 8008410:	0076      	lsls	r6, r6, #1
 8008412:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8008416:	f240 8310 	bls.w	8008a3a <__ieee754_powf+0x642>
 800841a:	4639      	mov	r1, r7
 800841c:	4648      	mov	r0, r9
 800841e:	f7f8 fb51 	bl	8000ac4 <__addsf3>
 8008422:	4601      	mov	r1, r0
 8008424:	e043      	b.n	80084ae <__ieee754_powf+0xb6>
 8008426:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800842a:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800842e:	d802      	bhi.n	8008436 <__ieee754_powf+0x3e>
 8008430:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008434:	d908      	bls.n	8008448 <__ieee754_powf+0x50>
 8008436:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800843a:	d1ee      	bne.n	800841a <__ieee754_powf+0x22>
 800843c:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8008440:	0064      	lsls	r4, r4, #1
 8008442:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8008446:	e7e6      	b.n	8008416 <__ieee754_powf+0x1e>
 8008448:	2800      	cmp	r0, #0
 800844a:	da1f      	bge.n	800848c <__ieee754_powf+0x94>
 800844c:	f1bb 4f97 	cmp.w	fp, #1266679808	@ 0x4b800000
 8008450:	f080 82f8 	bcs.w	8008a44 <__ieee754_powf+0x64c>
 8008454:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 8008458:	d32f      	bcc.n	80084ba <__ieee754_powf+0xc2>
 800845a:	ea4f 53eb 	mov.w	r3, fp, asr #23
 800845e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8008462:	fa4b f503 	asr.w	r5, fp, r3
 8008466:	fa05 f303 	lsl.w	r3, r5, r3
 800846a:	455b      	cmp	r3, fp
 800846c:	d123      	bne.n	80084b6 <__ieee754_powf+0xbe>
 800846e:	f005 0501 	and.w	r5, r5, #1
 8008472:	f1c5 0502 	rsb	r5, r5, #2
 8008476:	f1bb 5f7e 	cmp.w	fp, #1065353216	@ 0x3f800000
 800847a:	d11f      	bne.n	80084bc <__ieee754_powf+0xc4>
 800847c:	2c00      	cmp	r4, #0
 800847e:	4649      	mov	r1, r9
 8008480:	da15      	bge.n	80084ae <__ieee754_powf+0xb6>
 8008482:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008486:	f7f8 fcd9 	bl	8000e3c <__aeabi_fdiv>
 800848a:	e7ca      	b.n	8008422 <__ieee754_powf+0x2a>
 800848c:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008490:	d111      	bne.n	80084b6 <__ieee754_powf+0xbe>
 8008492:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8008496:	f000 82d0 	beq.w	8008a3a <__ieee754_powf+0x642>
 800849a:	d904      	bls.n	80084a6 <__ieee754_powf+0xae>
 800849c:	2c00      	cmp	r4, #0
 800849e:	f280 82cf 	bge.w	8008a40 <__ieee754_powf+0x648>
 80084a2:	2100      	movs	r1, #0
 80084a4:	e003      	b.n	80084ae <__ieee754_powf+0xb6>
 80084a6:	2c00      	cmp	r4, #0
 80084a8:	dafb      	bge.n	80084a2 <__ieee754_powf+0xaa>
 80084aa:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 80084ae:	4608      	mov	r0, r1
 80084b0:	b007      	add	sp, #28
 80084b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084b6:	2500      	movs	r5, #0
 80084b8:	e7dd      	b.n	8008476 <__ieee754_powf+0x7e>
 80084ba:	2500      	movs	r5, #0
 80084bc:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80084c0:	d104      	bne.n	80084cc <__ieee754_powf+0xd4>
 80084c2:	4649      	mov	r1, r9
 80084c4:	4648      	mov	r0, r9
 80084c6:	f7f8 fc05 	bl	8000cd4 <__aeabi_fmul>
 80084ca:	e7aa      	b.n	8008422 <__ieee754_powf+0x2a>
 80084cc:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 80084d0:	f040 82bd 	bne.w	8008a4e <__ieee754_powf+0x656>
 80084d4:	2e00      	cmp	r6, #0
 80084d6:	f2c0 82ba 	blt.w	8008a4e <__ieee754_powf+0x656>
 80084da:	4648      	mov	r0, r9
 80084dc:	b007      	add	sp, #28
 80084de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e2:	f000 bb57 	b.w	8008b94 <__ieee754_sqrtf>
 80084e6:	2d01      	cmp	r5, #1
 80084e8:	d1e1      	bne.n	80084ae <__ieee754_powf+0xb6>
 80084ea:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80084ee:	e798      	b.n	8008422 <__ieee754_powf+0x2a>
 80084f0:	0ff3      	lsrs	r3, r6, #31
 80084f2:	3b01      	subs	r3, #1
 80084f4:	9303      	str	r3, [sp, #12]
 80084f6:	432b      	orrs	r3, r5
 80084f8:	d101      	bne.n	80084fe <__ieee754_powf+0x106>
 80084fa:	4649      	mov	r1, r9
 80084fc:	e2c5      	b.n	8008a8a <__ieee754_powf+0x692>
 80084fe:	f1bb 4f9a 	cmp.w	fp, #1291845632	@ 0x4d000000
 8008502:	f240 809b 	bls.w	800863c <__ieee754_powf+0x244>
 8008506:	4b46      	ldr	r3, [pc, #280]	@ (8008620 <__ieee754_powf+0x228>)
 8008508:	4598      	cmp	r8, r3
 800850a:	d807      	bhi.n	800851c <__ieee754_powf+0x124>
 800850c:	2c00      	cmp	r4, #0
 800850e:	da0a      	bge.n	8008526 <__ieee754_powf+0x12e>
 8008510:	2000      	movs	r0, #0
 8008512:	b007      	add	sp, #28
 8008514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	f000 bae7 	b.w	8008aea <__math_oflowf>
 800851c:	4b41      	ldr	r3, [pc, #260]	@ (8008624 <__ieee754_powf+0x22c>)
 800851e:	4598      	cmp	r8, r3
 8008520:	d907      	bls.n	8008532 <__ieee754_powf+0x13a>
 8008522:	2c00      	cmp	r4, #0
 8008524:	dcf4      	bgt.n	8008510 <__ieee754_powf+0x118>
 8008526:	2000      	movs	r0, #0
 8008528:	b007      	add	sp, #28
 800852a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852e:	f000 bad8 	b.w	8008ae2 <__math_uflowf>
 8008532:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008536:	f7f8 fac3 	bl	8000ac0 <__aeabi_fsub>
 800853a:	493b      	ldr	r1, [pc, #236]	@ (8008628 <__ieee754_powf+0x230>)
 800853c:	4606      	mov	r6, r0
 800853e:	f7f8 fbc9 	bl	8000cd4 <__aeabi_fmul>
 8008542:	493a      	ldr	r1, [pc, #232]	@ (800862c <__ieee754_powf+0x234>)
 8008544:	4680      	mov	r8, r0
 8008546:	4630      	mov	r0, r6
 8008548:	f7f8 fbc4 	bl	8000cd4 <__aeabi_fmul>
 800854c:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8008550:	4681      	mov	r9, r0
 8008552:	4630      	mov	r0, r6
 8008554:	f7f8 fbbe 	bl	8000cd4 <__aeabi_fmul>
 8008558:	4601      	mov	r1, r0
 800855a:	4835      	ldr	r0, [pc, #212]	@ (8008630 <__ieee754_powf+0x238>)
 800855c:	f7f8 fab0 	bl	8000ac0 <__aeabi_fsub>
 8008560:	4631      	mov	r1, r6
 8008562:	f7f8 fbb7 	bl	8000cd4 <__aeabi_fmul>
 8008566:	4601      	mov	r1, r0
 8008568:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 800856c:	f7f8 faa8 	bl	8000ac0 <__aeabi_fsub>
 8008570:	4631      	mov	r1, r6
 8008572:	4682      	mov	sl, r0
 8008574:	4630      	mov	r0, r6
 8008576:	f7f8 fbad 	bl	8000cd4 <__aeabi_fmul>
 800857a:	4601      	mov	r1, r0
 800857c:	4650      	mov	r0, sl
 800857e:	f7f8 fba9 	bl	8000cd4 <__aeabi_fmul>
 8008582:	492c      	ldr	r1, [pc, #176]	@ (8008634 <__ieee754_powf+0x23c>)
 8008584:	f7f8 fba6 	bl	8000cd4 <__aeabi_fmul>
 8008588:	4601      	mov	r1, r0
 800858a:	4648      	mov	r0, r9
 800858c:	f7f8 fa98 	bl	8000ac0 <__aeabi_fsub>
 8008590:	4601      	mov	r1, r0
 8008592:	4606      	mov	r6, r0
 8008594:	4640      	mov	r0, r8
 8008596:	f7f8 fa95 	bl	8000ac4 <__addsf3>
 800859a:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 800859e:	f02b 0b0f 	bic.w	fp, fp, #15
 80085a2:	4641      	mov	r1, r8
 80085a4:	4658      	mov	r0, fp
 80085a6:	f7f8 fa8b 	bl	8000ac0 <__aeabi_fsub>
 80085aa:	4601      	mov	r1, r0
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7f8 fa87 	bl	8000ac0 <__aeabi_fsub>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	3d01      	subs	r5, #1
 80085b6:	f36f 040b 	bfc	r4, #0, #12
 80085ba:	431d      	orrs	r5, r3
 80085bc:	4606      	mov	r6, r0
 80085be:	4621      	mov	r1, r4
 80085c0:	4638      	mov	r0, r7
 80085c2:	bf14      	ite	ne
 80085c4:	f04f 557e 	movne.w	r5, #1065353216	@ 0x3f800000
 80085c8:	4d1b      	ldreq	r5, [pc, #108]	@ (8008638 <__ieee754_powf+0x240>)
 80085ca:	f7f8 fa79 	bl	8000ac0 <__aeabi_fsub>
 80085ce:	4659      	mov	r1, fp
 80085d0:	f7f8 fb80 	bl	8000cd4 <__aeabi_fmul>
 80085d4:	4639      	mov	r1, r7
 80085d6:	4680      	mov	r8, r0
 80085d8:	4630      	mov	r0, r6
 80085da:	f7f8 fb7b 	bl	8000cd4 <__aeabi_fmul>
 80085de:	4601      	mov	r1, r0
 80085e0:	4640      	mov	r0, r8
 80085e2:	f7f8 fa6f 	bl	8000ac4 <__addsf3>
 80085e6:	4621      	mov	r1, r4
 80085e8:	4606      	mov	r6, r0
 80085ea:	4658      	mov	r0, fp
 80085ec:	f7f8 fb72 	bl	8000cd4 <__aeabi_fmul>
 80085f0:	4601      	mov	r1, r0
 80085f2:	4607      	mov	r7, r0
 80085f4:	4630      	mov	r0, r6
 80085f6:	f7f8 fa65 	bl	8000ac4 <__addsf3>
 80085fa:	2800      	cmp	r0, #0
 80085fc:	4604      	mov	r4, r0
 80085fe:	4680      	mov	r8, r0
 8008600:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008604:	f340 813f 	ble.w	8008886 <__ieee754_powf+0x48e>
 8008608:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800860c:	f240 8128 	bls.w	8008860 <__ieee754_powf+0x468>
 8008610:	2100      	movs	r1, #0
 8008612:	4628      	mov	r0, r5
 8008614:	f7f8 fcfc 	bl	8001010 <__aeabi_fcmplt>
 8008618:	3800      	subs	r0, #0
 800861a:	bf18      	it	ne
 800861c:	2001      	movne	r0, #1
 800861e:	e778      	b.n	8008512 <__ieee754_powf+0x11a>
 8008620:	3f7ffff3 	.word	0x3f7ffff3
 8008624:	3f800007 	.word	0x3f800007
 8008628:	3fb8aa00 	.word	0x3fb8aa00
 800862c:	36eca570 	.word	0x36eca570
 8008630:	3eaaaaab 	.word	0x3eaaaaab
 8008634:	3fb8aa3b 	.word	0x3fb8aa3b
 8008638:	bf800000 	.word	0xbf800000
 800863c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008640:	f040 810a 	bne.w	8008858 <__ieee754_powf+0x460>
 8008644:	f04f 4197 	mov.w	r1, #1266679808	@ 0x4b800000
 8008648:	f7f8 fb44 	bl	8000cd4 <__aeabi_fmul>
 800864c:	f06f 0217 	mvn.w	r2, #23
 8008650:	4682      	mov	sl, r0
 8008652:	ea4f 53ea 	mov.w	r3, sl, asr #23
 8008656:	3b7f      	subs	r3, #127	@ 0x7f
 8008658:	441a      	add	r2, r3
 800865a:	4b95      	ldr	r3, [pc, #596]	@ (80088b0 <__ieee754_powf+0x4b8>)
 800865c:	f3ca 0a16 	ubfx	sl, sl, #0, #23
 8008660:	459a      	cmp	sl, r3
 8008662:	f04a 567e 	orr.w	r6, sl, #1065353216	@ 0x3f800000
 8008666:	dd06      	ble.n	8008676 <__ieee754_powf+0x27e>
 8008668:	4b92      	ldr	r3, [pc, #584]	@ (80088b4 <__ieee754_powf+0x4bc>)
 800866a:	459a      	cmp	sl, r3
 800866c:	f340 80f6 	ble.w	800885c <__ieee754_powf+0x464>
 8008670:	3201      	adds	r2, #1
 8008672:	f5a6 0600 	sub.w	r6, r6, #8388608	@ 0x800000
 8008676:	2300      	movs	r3, #0
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	9205      	str	r2, [sp, #20]
 800867c:	4b8e      	ldr	r3, [pc, #568]	@ (80088b8 <__ieee754_powf+0x4c0>)
 800867e:	9a01      	ldr	r2, [sp, #4]
 8008680:	4630      	mov	r0, r6
 8008682:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8008686:	46b2      	mov	sl, r6
 8008688:	4659      	mov	r1, fp
 800868a:	f7f8 fa19 	bl	8000ac0 <__aeabi_fsub>
 800868e:	4631      	mov	r1, r6
 8008690:	4681      	mov	r9, r0
 8008692:	4658      	mov	r0, fp
 8008694:	f7f8 fa16 	bl	8000ac4 <__addsf3>
 8008698:	4601      	mov	r1, r0
 800869a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800869e:	f7f8 fbcd 	bl	8000e3c <__aeabi_fdiv>
 80086a2:	4601      	mov	r1, r0
 80086a4:	9004      	str	r0, [sp, #16]
 80086a6:	4648      	mov	r0, r9
 80086a8:	f7f8 fb14 	bl	8000cd4 <__aeabi_fmul>
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	9b02      	ldr	r3, [sp, #8]
 80086b0:	1076      	asrs	r6, r6, #1
 80086b2:	f36f 030b 	bfc	r3, #0, #12
 80086b6:	4698      	mov	r8, r3
 80086b8:	f046 5600 	orr.w	r6, r6, #536870912	@ 0x20000000
 80086bc:	9b01      	ldr	r3, [sp, #4]
 80086be:	f506 2680 	add.w	r6, r6, #262144	@ 0x40000
 80086c2:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80086c6:	4631      	mov	r1, r6
 80086c8:	4640      	mov	r0, r8
 80086ca:	f7f8 fb03 	bl	8000cd4 <__aeabi_fmul>
 80086ce:	4601      	mov	r1, r0
 80086d0:	4648      	mov	r0, r9
 80086d2:	f7f8 f9f5 	bl	8000ac0 <__aeabi_fsub>
 80086d6:	4659      	mov	r1, fp
 80086d8:	4681      	mov	r9, r0
 80086da:	4630      	mov	r0, r6
 80086dc:	f7f8 f9f0 	bl	8000ac0 <__aeabi_fsub>
 80086e0:	4601      	mov	r1, r0
 80086e2:	4650      	mov	r0, sl
 80086e4:	f7f8 f9ec 	bl	8000ac0 <__aeabi_fsub>
 80086e8:	4641      	mov	r1, r8
 80086ea:	f7f8 faf3 	bl	8000cd4 <__aeabi_fmul>
 80086ee:	4601      	mov	r1, r0
 80086f0:	4648      	mov	r0, r9
 80086f2:	f7f8 f9e5 	bl	8000ac0 <__aeabi_fsub>
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	4619      	mov	r1, r3
 80086fa:	f7f8 faeb 	bl	8000cd4 <__aeabi_fmul>
 80086fe:	9902      	ldr	r1, [sp, #8]
 8008700:	4683      	mov	fp, r0
 8008702:	4608      	mov	r0, r1
 8008704:	f7f8 fae6 	bl	8000cd4 <__aeabi_fmul>
 8008708:	4606      	mov	r6, r0
 800870a:	496c      	ldr	r1, [pc, #432]	@ (80088bc <__ieee754_powf+0x4c4>)
 800870c:	f7f8 fae2 	bl	8000cd4 <__aeabi_fmul>
 8008710:	496b      	ldr	r1, [pc, #428]	@ (80088c0 <__ieee754_powf+0x4c8>)
 8008712:	f7f8 f9d7 	bl	8000ac4 <__addsf3>
 8008716:	4631      	mov	r1, r6
 8008718:	f7f8 fadc 	bl	8000cd4 <__aeabi_fmul>
 800871c:	4969      	ldr	r1, [pc, #420]	@ (80088c4 <__ieee754_powf+0x4cc>)
 800871e:	f7f8 f9d1 	bl	8000ac4 <__addsf3>
 8008722:	4631      	mov	r1, r6
 8008724:	f7f8 fad6 	bl	8000cd4 <__aeabi_fmul>
 8008728:	4967      	ldr	r1, [pc, #412]	@ (80088c8 <__ieee754_powf+0x4d0>)
 800872a:	f7f8 f9cb 	bl	8000ac4 <__addsf3>
 800872e:	4631      	mov	r1, r6
 8008730:	f7f8 fad0 	bl	8000cd4 <__aeabi_fmul>
 8008734:	4965      	ldr	r1, [pc, #404]	@ (80088cc <__ieee754_powf+0x4d4>)
 8008736:	f7f8 f9c5 	bl	8000ac4 <__addsf3>
 800873a:	4631      	mov	r1, r6
 800873c:	f7f8 faca 	bl	8000cd4 <__aeabi_fmul>
 8008740:	4963      	ldr	r1, [pc, #396]	@ (80088d0 <__ieee754_powf+0x4d8>)
 8008742:	f7f8 f9bf 	bl	8000ac4 <__addsf3>
 8008746:	4631      	mov	r1, r6
 8008748:	4681      	mov	r9, r0
 800874a:	4630      	mov	r0, r6
 800874c:	f7f8 fac2 	bl	8000cd4 <__aeabi_fmul>
 8008750:	4601      	mov	r1, r0
 8008752:	4648      	mov	r0, r9
 8008754:	f7f8 fabe 	bl	8000cd4 <__aeabi_fmul>
 8008758:	4606      	mov	r6, r0
 800875a:	4641      	mov	r1, r8
 800875c:	9802      	ldr	r0, [sp, #8]
 800875e:	f7f8 f9b1 	bl	8000ac4 <__addsf3>
 8008762:	4659      	mov	r1, fp
 8008764:	f7f8 fab6 	bl	8000cd4 <__aeabi_fmul>
 8008768:	4631      	mov	r1, r6
 800876a:	f7f8 f9ab 	bl	8000ac4 <__addsf3>
 800876e:	4641      	mov	r1, r8
 8008770:	4681      	mov	r9, r0
 8008772:	4640      	mov	r0, r8
 8008774:	f7f8 faae 	bl	8000cd4 <__aeabi_fmul>
 8008778:	4956      	ldr	r1, [pc, #344]	@ (80088d4 <__ieee754_powf+0x4dc>)
 800877a:	4682      	mov	sl, r0
 800877c:	f7f8 f9a2 	bl	8000ac4 <__addsf3>
 8008780:	4649      	mov	r1, r9
 8008782:	f7f8 f99f 	bl	8000ac4 <__addsf3>
 8008786:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 800878a:	f026 060f 	bic.w	r6, r6, #15
 800878e:	4631      	mov	r1, r6
 8008790:	4640      	mov	r0, r8
 8008792:	f7f8 fa9f 	bl	8000cd4 <__aeabi_fmul>
 8008796:	494f      	ldr	r1, [pc, #316]	@ (80088d4 <__ieee754_powf+0x4dc>)
 8008798:	4680      	mov	r8, r0
 800879a:	4630      	mov	r0, r6
 800879c:	f7f8 f990 	bl	8000ac0 <__aeabi_fsub>
 80087a0:	4651      	mov	r1, sl
 80087a2:	f7f8 f98d 	bl	8000ac0 <__aeabi_fsub>
 80087a6:	4601      	mov	r1, r0
 80087a8:	4648      	mov	r0, r9
 80087aa:	f7f8 f989 	bl	8000ac0 <__aeabi_fsub>
 80087ae:	9902      	ldr	r1, [sp, #8]
 80087b0:	f7f8 fa90 	bl	8000cd4 <__aeabi_fmul>
 80087b4:	4631      	mov	r1, r6
 80087b6:	4681      	mov	r9, r0
 80087b8:	4658      	mov	r0, fp
 80087ba:	f7f8 fa8b 	bl	8000cd4 <__aeabi_fmul>
 80087be:	4601      	mov	r1, r0
 80087c0:	4648      	mov	r0, r9
 80087c2:	f7f8 f97f 	bl	8000ac4 <__addsf3>
 80087c6:	4682      	mov	sl, r0
 80087c8:	4601      	mov	r1, r0
 80087ca:	4640      	mov	r0, r8
 80087cc:	f7f8 f97a 	bl	8000ac4 <__addsf3>
 80087d0:	f420 667f 	bic.w	r6, r0, #4080	@ 0xff0
 80087d4:	f026 060f 	bic.w	r6, r6, #15
 80087d8:	4630      	mov	r0, r6
 80087da:	493f      	ldr	r1, [pc, #252]	@ (80088d8 <__ieee754_powf+0x4e0>)
 80087dc:	f7f8 fa7a 	bl	8000cd4 <__aeabi_fmul>
 80087e0:	4641      	mov	r1, r8
 80087e2:	4681      	mov	r9, r0
 80087e4:	4630      	mov	r0, r6
 80087e6:	f7f8 f96b 	bl	8000ac0 <__aeabi_fsub>
 80087ea:	4601      	mov	r1, r0
 80087ec:	4650      	mov	r0, sl
 80087ee:	f7f8 f967 	bl	8000ac0 <__aeabi_fsub>
 80087f2:	493a      	ldr	r1, [pc, #232]	@ (80088dc <__ieee754_powf+0x4e4>)
 80087f4:	f7f8 fa6e 	bl	8000cd4 <__aeabi_fmul>
 80087f8:	4939      	ldr	r1, [pc, #228]	@ (80088e0 <__ieee754_powf+0x4e8>)
 80087fa:	4680      	mov	r8, r0
 80087fc:	4630      	mov	r0, r6
 80087fe:	f7f8 fa69 	bl	8000cd4 <__aeabi_fmul>
 8008802:	4601      	mov	r1, r0
 8008804:	4640      	mov	r0, r8
 8008806:	f7f8 f95d 	bl	8000ac4 <__addsf3>
 800880a:	4b36      	ldr	r3, [pc, #216]	@ (80088e4 <__ieee754_powf+0x4ec>)
 800880c:	9a01      	ldr	r2, [sp, #4]
 800880e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008812:	f7f8 f957 	bl	8000ac4 <__addsf3>
 8008816:	9a05      	ldr	r2, [sp, #20]
 8008818:	4606      	mov	r6, r0
 800881a:	4610      	mov	r0, r2
 800881c:	f7f8 fa06 	bl	8000c2c <__aeabi_i2f>
 8008820:	4680      	mov	r8, r0
 8008822:	4b31      	ldr	r3, [pc, #196]	@ (80088e8 <__ieee754_powf+0x4f0>)
 8008824:	9a01      	ldr	r2, [sp, #4]
 8008826:	4631      	mov	r1, r6
 8008828:	f853 a022 	ldr.w	sl, [r3, r2, lsl #2]
 800882c:	4648      	mov	r0, r9
 800882e:	f7f8 f949 	bl	8000ac4 <__addsf3>
 8008832:	4651      	mov	r1, sl
 8008834:	f7f8 f946 	bl	8000ac4 <__addsf3>
 8008838:	4641      	mov	r1, r8
 800883a:	f7f8 f943 	bl	8000ac4 <__addsf3>
 800883e:	f420 6b7f 	bic.w	fp, r0, #4080	@ 0xff0
 8008842:	f02b 0b0f 	bic.w	fp, fp, #15
 8008846:	4641      	mov	r1, r8
 8008848:	4658      	mov	r0, fp
 800884a:	f7f8 f939 	bl	8000ac0 <__aeabi_fsub>
 800884e:	4651      	mov	r1, sl
 8008850:	f7f8 f936 	bl	8000ac0 <__aeabi_fsub>
 8008854:	4649      	mov	r1, r9
 8008856:	e6a6      	b.n	80085a6 <__ieee754_powf+0x1ae>
 8008858:	2200      	movs	r2, #0
 800885a:	e6fa      	b.n	8008652 <__ieee754_powf+0x25a>
 800885c:	2301      	movs	r3, #1
 800885e:	e70b      	b.n	8008678 <__ieee754_powf+0x280>
 8008860:	d148      	bne.n	80088f4 <__ieee754_powf+0x4fc>
 8008862:	4922      	ldr	r1, [pc, #136]	@ (80088ec <__ieee754_powf+0x4f4>)
 8008864:	4630      	mov	r0, r6
 8008866:	f7f8 f92d 	bl	8000ac4 <__addsf3>
 800886a:	4639      	mov	r1, r7
 800886c:	4681      	mov	r9, r0
 800886e:	4620      	mov	r0, r4
 8008870:	f7f8 f926 	bl	8000ac0 <__aeabi_fsub>
 8008874:	4601      	mov	r1, r0
 8008876:	4648      	mov	r0, r9
 8008878:	f7f8 fbe8 	bl	800104c <__aeabi_fcmpgt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f47f aec7 	bne.w	8008610 <__ieee754_powf+0x218>
 8008882:	2386      	movs	r3, #134	@ 0x86
 8008884:	e03b      	b.n	80088fe <__ieee754_powf+0x506>
 8008886:	4a1a      	ldr	r2, [pc, #104]	@ (80088f0 <__ieee754_powf+0x4f8>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d907      	bls.n	800889c <__ieee754_powf+0x4a4>
 800888c:	2100      	movs	r1, #0
 800888e:	4628      	mov	r0, r5
 8008890:	f7f8 fbbe 	bl	8001010 <__aeabi_fcmplt>
 8008894:	3800      	subs	r0, #0
 8008896:	bf18      	it	ne
 8008898:	2001      	movne	r0, #1
 800889a:	e645      	b.n	8008528 <__ieee754_powf+0x130>
 800889c:	d12a      	bne.n	80088f4 <__ieee754_powf+0x4fc>
 800889e:	4639      	mov	r1, r7
 80088a0:	f7f8 f90e 	bl	8000ac0 <__aeabi_fsub>
 80088a4:	4631      	mov	r1, r6
 80088a6:	f7f8 fbc7 	bl	8001038 <__aeabi_fcmpge>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d0e9      	beq.n	8008882 <__ieee754_powf+0x48a>
 80088ae:	e7ed      	b.n	800888c <__ieee754_powf+0x494>
 80088b0:	001cc471 	.word	0x001cc471
 80088b4:	005db3d6 	.word	0x005db3d6
 80088b8:	080090e4 	.word	0x080090e4
 80088bc:	3e53f142 	.word	0x3e53f142
 80088c0:	3e6c3255 	.word	0x3e6c3255
 80088c4:	3e8ba305 	.word	0x3e8ba305
 80088c8:	3eaaaaab 	.word	0x3eaaaaab
 80088cc:	3edb6db7 	.word	0x3edb6db7
 80088d0:	3f19999a 	.word	0x3f19999a
 80088d4:	40400000 	.word	0x40400000
 80088d8:	3f763800 	.word	0x3f763800
 80088dc:	3f76384f 	.word	0x3f76384f
 80088e0:	369dc3a0 	.word	0x369dc3a0
 80088e4:	080090d4 	.word	0x080090d4
 80088e8:	080090dc 	.word	0x080090dc
 80088ec:	3338aa3c 	.word	0x3338aa3c
 80088f0:	43160000 	.word	0x43160000
 80088f4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80088f8:	f240 809b 	bls.w	8008a32 <__ieee754_powf+0x63a>
 80088fc:	15db      	asrs	r3, r3, #23
 80088fe:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 8008902:	3b7e      	subs	r3, #126	@ 0x7e
 8008904:	411c      	asrs	r4, r3
 8008906:	4444      	add	r4, r8
 8008908:	f3c4 53c7 	ubfx	r3, r4, #23, #8
 800890c:	4961      	ldr	r1, [pc, #388]	@ (8008a94 <__ieee754_powf+0x69c>)
 800890e:	3b7f      	subs	r3, #127	@ 0x7f
 8008910:	4119      	asrs	r1, r3
 8008912:	4021      	ands	r1, r4
 8008914:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8008918:	f1c3 0317 	rsb	r3, r3, #23
 800891c:	f444 0400 	orr.w	r4, r4, #8388608	@ 0x800000
 8008920:	4638      	mov	r0, r7
 8008922:	411c      	asrs	r4, r3
 8008924:	f1b8 0f00 	cmp.w	r8, #0
 8008928:	bfb8      	it	lt
 800892a:	4264      	neglt	r4, r4
 800892c:	f7f8 f8c8 	bl	8000ac0 <__aeabi_fsub>
 8008930:	4607      	mov	r7, r0
 8008932:	4631      	mov	r1, r6
 8008934:	4638      	mov	r0, r7
 8008936:	f7f8 f8c5 	bl	8000ac4 <__addsf3>
 800893a:	f420 687f 	bic.w	r8, r0, #4080	@ 0xff0
 800893e:	f028 080f 	bic.w	r8, r8, #15
 8008942:	4640      	mov	r0, r8
 8008944:	4954      	ldr	r1, [pc, #336]	@ (8008a98 <__ieee754_powf+0x6a0>)
 8008946:	f7f8 f9c5 	bl	8000cd4 <__aeabi_fmul>
 800894a:	4639      	mov	r1, r7
 800894c:	4681      	mov	r9, r0
 800894e:	4640      	mov	r0, r8
 8008950:	f7f8 f8b6 	bl	8000ac0 <__aeabi_fsub>
 8008954:	4601      	mov	r1, r0
 8008956:	4630      	mov	r0, r6
 8008958:	f7f8 f8b2 	bl	8000ac0 <__aeabi_fsub>
 800895c:	494f      	ldr	r1, [pc, #316]	@ (8008a9c <__ieee754_powf+0x6a4>)
 800895e:	f7f8 f9b9 	bl	8000cd4 <__aeabi_fmul>
 8008962:	494f      	ldr	r1, [pc, #316]	@ (8008aa0 <__ieee754_powf+0x6a8>)
 8008964:	4606      	mov	r6, r0
 8008966:	4640      	mov	r0, r8
 8008968:	f7f8 f9b4 	bl	8000cd4 <__aeabi_fmul>
 800896c:	4601      	mov	r1, r0
 800896e:	4630      	mov	r0, r6
 8008970:	f7f8 f8a8 	bl	8000ac4 <__addsf3>
 8008974:	4607      	mov	r7, r0
 8008976:	4601      	mov	r1, r0
 8008978:	4648      	mov	r0, r9
 800897a:	f7f8 f8a3 	bl	8000ac4 <__addsf3>
 800897e:	4649      	mov	r1, r9
 8008980:	4606      	mov	r6, r0
 8008982:	f7f8 f89d 	bl	8000ac0 <__aeabi_fsub>
 8008986:	4601      	mov	r1, r0
 8008988:	4638      	mov	r0, r7
 800898a:	f7f8 f899 	bl	8000ac0 <__aeabi_fsub>
 800898e:	4631      	mov	r1, r6
 8008990:	4680      	mov	r8, r0
 8008992:	4630      	mov	r0, r6
 8008994:	f7f8 f99e 	bl	8000cd4 <__aeabi_fmul>
 8008998:	4607      	mov	r7, r0
 800899a:	4942      	ldr	r1, [pc, #264]	@ (8008aa4 <__ieee754_powf+0x6ac>)
 800899c:	f7f8 f99a 	bl	8000cd4 <__aeabi_fmul>
 80089a0:	4941      	ldr	r1, [pc, #260]	@ (8008aa8 <__ieee754_powf+0x6b0>)
 80089a2:	f7f8 f88d 	bl	8000ac0 <__aeabi_fsub>
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f8 f994 	bl	8000cd4 <__aeabi_fmul>
 80089ac:	493f      	ldr	r1, [pc, #252]	@ (8008aac <__ieee754_powf+0x6b4>)
 80089ae:	f7f8 f889 	bl	8000ac4 <__addsf3>
 80089b2:	4639      	mov	r1, r7
 80089b4:	f7f8 f98e 	bl	8000cd4 <__aeabi_fmul>
 80089b8:	493d      	ldr	r1, [pc, #244]	@ (8008ab0 <__ieee754_powf+0x6b8>)
 80089ba:	f7f8 f881 	bl	8000ac0 <__aeabi_fsub>
 80089be:	4639      	mov	r1, r7
 80089c0:	f7f8 f988 	bl	8000cd4 <__aeabi_fmul>
 80089c4:	493b      	ldr	r1, [pc, #236]	@ (8008ab4 <__ieee754_powf+0x6bc>)
 80089c6:	f7f8 f87d 	bl	8000ac4 <__addsf3>
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f8 f982 	bl	8000cd4 <__aeabi_fmul>
 80089d0:	4601      	mov	r1, r0
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7f8 f874 	bl	8000ac0 <__aeabi_fsub>
 80089d8:	4607      	mov	r7, r0
 80089da:	4601      	mov	r1, r0
 80089dc:	4630      	mov	r0, r6
 80089de:	f7f8 f979 	bl	8000cd4 <__aeabi_fmul>
 80089e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80089e6:	4681      	mov	r9, r0
 80089e8:	4638      	mov	r0, r7
 80089ea:	f7f8 f869 	bl	8000ac0 <__aeabi_fsub>
 80089ee:	4601      	mov	r1, r0
 80089f0:	4648      	mov	r0, r9
 80089f2:	f7f8 fa23 	bl	8000e3c <__aeabi_fdiv>
 80089f6:	4641      	mov	r1, r8
 80089f8:	4607      	mov	r7, r0
 80089fa:	4630      	mov	r0, r6
 80089fc:	f7f8 f96a 	bl	8000cd4 <__aeabi_fmul>
 8008a00:	4641      	mov	r1, r8
 8008a02:	f7f8 f85f 	bl	8000ac4 <__addsf3>
 8008a06:	4601      	mov	r1, r0
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7f8 f859 	bl	8000ac0 <__aeabi_fsub>
 8008a0e:	4631      	mov	r1, r6
 8008a10:	f7f8 f856 	bl	8000ac0 <__aeabi_fsub>
 8008a14:	4601      	mov	r1, r0
 8008a16:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008a1a:	f7f8 f851 	bl	8000ac0 <__aeabi_fsub>
 8008a1e:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008a22:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a26:	da06      	bge.n	8008a36 <__ieee754_powf+0x63e>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	f000 f863 	bl	8008af4 <scalbnf>
 8008a2e:	4629      	mov	r1, r5
 8008a30:	e549      	b.n	80084c6 <__ieee754_powf+0xce>
 8008a32:	2400      	movs	r4, #0
 8008a34:	e77d      	b.n	8008932 <__ieee754_powf+0x53a>
 8008a36:	4618      	mov	r0, r3
 8008a38:	e7f9      	b.n	8008a2e <__ieee754_powf+0x636>
 8008a3a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008a3e:	e536      	b.n	80084ae <__ieee754_powf+0xb6>
 8008a40:	4639      	mov	r1, r7
 8008a42:	e534      	b.n	80084ae <__ieee754_powf+0xb6>
 8008a44:	f1bb 4fff 	cmp.w	fp, #2139095040	@ 0x7f800000
 8008a48:	f43f ad23 	beq.w	8008492 <__ieee754_powf+0x9a>
 8008a4c:	2502      	movs	r5, #2
 8008a4e:	4648      	mov	r0, r9
 8008a50:	f000 f89c 	bl	8008b8c <fabsf>
 8008a54:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8008a58:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8008a5c:	46c2      	mov	sl, r8
 8008a5e:	4601      	mov	r1, r0
 8008a60:	d003      	beq.n	8008a6a <__ieee754_powf+0x672>
 8008a62:	f1b8 0f00 	cmp.w	r8, #0
 8008a66:	f47f ad43 	bne.w	80084f0 <__ieee754_powf+0xf8>
 8008a6a:	2c00      	cmp	r4, #0
 8008a6c:	da04      	bge.n	8008a78 <__ieee754_powf+0x680>
 8008a6e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008a72:	f7f8 f9e3 	bl	8000e3c <__aeabi_fdiv>
 8008a76:	4601      	mov	r1, r0
 8008a78:	2e00      	cmp	r6, #0
 8008a7a:	f6bf ad18 	bge.w	80084ae <__ieee754_powf+0xb6>
 8008a7e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8008a82:	ea58 0805 	orrs.w	r8, r8, r5
 8008a86:	f47f ad2e 	bne.w	80084e6 <__ieee754_powf+0xee>
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	f7f8 f818 	bl	8000ac0 <__aeabi_fsub>
 8008a90:	4601      	mov	r1, r0
 8008a92:	e4f8      	b.n	8008486 <__ieee754_powf+0x8e>
 8008a94:	ff800000 	.word	0xff800000
 8008a98:	3f317200 	.word	0x3f317200
 8008a9c:	3f317218 	.word	0x3f317218
 8008aa0:	35bfbe8c 	.word	0x35bfbe8c
 8008aa4:	3331bb4c 	.word	0x3331bb4c
 8008aa8:	35ddea0e 	.word	0x35ddea0e
 8008aac:	388ab355 	.word	0x388ab355
 8008ab0:	3b360b61 	.word	0x3b360b61
 8008ab4:	3e2aaaab 	.word	0x3e2aaaab

08008ab8 <with_errnof>:
 8008ab8:	b538      	push	{r3, r4, r5, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	460d      	mov	r5, r1
 8008abe:	f7fd fcdb 	bl	8006478 <__errno>
 8008ac2:	6005      	str	r5, [r0, #0]
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	bd38      	pop	{r3, r4, r5, pc}

08008ac8 <xflowf>:
 8008ac8:	b508      	push	{r3, lr}
 8008aca:	b140      	cbz	r0, 8008ade <xflowf+0x16>
 8008acc:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8008ad0:	f7f8 f900 	bl	8000cd4 <__aeabi_fmul>
 8008ad4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008ad8:	2122      	movs	r1, #34	@ 0x22
 8008ada:	f7ff bfed 	b.w	8008ab8 <with_errnof>
 8008ade:	4608      	mov	r0, r1
 8008ae0:	e7f6      	b.n	8008ad0 <xflowf+0x8>

08008ae2 <__math_uflowf>:
 8008ae2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8008ae6:	f7ff bfef 	b.w	8008ac8 <xflowf>

08008aea <__math_oflowf>:
 8008aea:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8008aee:	f7ff bfeb 	b.w	8008ac8 <xflowf>
	...

08008af4 <scalbnf>:
 8008af4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	4603      	mov	r3, r0
 8008afc:	460d      	mov	r5, r1
 8008afe:	4604      	mov	r4, r0
 8008b00:	d02e      	beq.n	8008b60 <scalbnf+0x6c>
 8008b02:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008b06:	d304      	bcc.n	8008b12 <scalbnf+0x1e>
 8008b08:	4601      	mov	r1, r0
 8008b0a:	f7f7 ffdb 	bl	8000ac4 <__addsf3>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	e026      	b.n	8008b60 <scalbnf+0x6c>
 8008b12:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8008b16:	d118      	bne.n	8008b4a <scalbnf+0x56>
 8008b18:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8008b1c:	f7f8 f8da 	bl	8000cd4 <__aeabi_fmul>
 8008b20:	4a17      	ldr	r2, [pc, #92]	@ (8008b80 <scalbnf+0x8c>)
 8008b22:	4603      	mov	r3, r0
 8008b24:	4295      	cmp	r5, r2
 8008b26:	db0c      	blt.n	8008b42 <scalbnf+0x4e>
 8008b28:	4604      	mov	r4, r0
 8008b2a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008b2e:	3a19      	subs	r2, #25
 8008b30:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008b34:	428d      	cmp	r5, r1
 8008b36:	dd0a      	ble.n	8008b4e <scalbnf+0x5a>
 8008b38:	4912      	ldr	r1, [pc, #72]	@ (8008b84 <scalbnf+0x90>)
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f361 001e 	bfi	r0, r1, #0, #31
 8008b40:	e000      	b.n	8008b44 <scalbnf+0x50>
 8008b42:	4911      	ldr	r1, [pc, #68]	@ (8008b88 <scalbnf+0x94>)
 8008b44:	f7f8 f8c6 	bl	8000cd4 <__aeabi_fmul>
 8008b48:	e7e1      	b.n	8008b0e <scalbnf+0x1a>
 8008b4a:	0dd2      	lsrs	r2, r2, #23
 8008b4c:	e7f0      	b.n	8008b30 <scalbnf+0x3c>
 8008b4e:	1951      	adds	r1, r2, r5
 8008b50:	29fe      	cmp	r1, #254	@ 0xfe
 8008b52:	dcf1      	bgt.n	8008b38 <scalbnf+0x44>
 8008b54:	2900      	cmp	r1, #0
 8008b56:	dd05      	ble.n	8008b64 <scalbnf+0x70>
 8008b58:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008b5c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008b60:	4618      	mov	r0, r3
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	f111 0f16 	cmn.w	r1, #22
 8008b68:	da01      	bge.n	8008b6e <scalbnf+0x7a>
 8008b6a:	4907      	ldr	r1, [pc, #28]	@ (8008b88 <scalbnf+0x94>)
 8008b6c:	e7e5      	b.n	8008b3a <scalbnf+0x46>
 8008b6e:	f101 0019 	add.w	r0, r1, #25
 8008b72:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008b76:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8008b7a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008b7e:	e7e1      	b.n	8008b44 <scalbnf+0x50>
 8008b80:	ffff3cb0 	.word	0xffff3cb0
 8008b84:	7149f2ca 	.word	0x7149f2ca
 8008b88:	0da24260 	.word	0x0da24260

08008b8c <fabsf>:
 8008b8c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008b90:	4770      	bx	lr
	...

08008b94 <__ieee754_sqrtf>:
 8008b94:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008b98:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	d30a      	bcc.n	8008bbc <__ieee754_sqrtf+0x28>
 8008ba6:	4601      	mov	r1, r0
 8008ba8:	f7f8 f894 	bl	8000cd4 <__aeabi_fmul>
 8008bac:	4601      	mov	r1, r0
 8008bae:	4620      	mov	r0, r4
 8008bb0:	f7f7 ff88 	bl	8000ac4 <__addsf3>
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bbc:	2a00      	cmp	r2, #0
 8008bbe:	d0fa      	beq.n	8008bb6 <__ieee754_sqrtf+0x22>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	da06      	bge.n	8008bd2 <__ieee754_sqrtf+0x3e>
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	f7f7 ff7b 	bl	8000ac0 <__aeabi_fsub>
 8008bca:	4601      	mov	r1, r0
 8008bcc:	f7f8 f936 	bl	8000e3c <__aeabi_fdiv>
 8008bd0:	e7f0      	b.n	8008bb4 <__ieee754_sqrtf+0x20>
 8008bd2:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 8008bd6:	d03c      	beq.n	8008c52 <__ieee754_sqrtf+0xbe>
 8008bd8:	15c2      	asrs	r2, r0, #23
 8008bda:	2400      	movs	r4, #0
 8008bdc:	2019      	movs	r0, #25
 8008bde:	4626      	mov	r6, r4
 8008be0:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8008be4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008be8:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 8008bec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008bf0:	07d2      	lsls	r2, r2, #31
 8008bf2:	bf58      	it	pl
 8008bf4:	005b      	lslpl	r3, r3, #1
 8008bf6:	106d      	asrs	r5, r5, #1
 8008bf8:	005b      	lsls	r3, r3, #1
 8008bfa:	1872      	adds	r2, r6, r1
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	bfcf      	iteee	gt
 8008c00:	461a      	movgt	r2, r3
 8008c02:	1856      	addle	r6, r2, r1
 8008c04:	1864      	addle	r4, r4, r1
 8008c06:	1a9a      	suble	r2, r3, r2
 8008c08:	3801      	subs	r0, #1
 8008c0a:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8008c0e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008c12:	d1f2      	bne.n	8008bfa <__ieee754_sqrtf+0x66>
 8008c14:	b1ba      	cbz	r2, 8008c46 <__ieee754_sqrtf+0xb2>
 8008c16:	4e15      	ldr	r6, [pc, #84]	@ (8008c6c <__ieee754_sqrtf+0xd8>)
 8008c18:	4f15      	ldr	r7, [pc, #84]	@ (8008c70 <__ieee754_sqrtf+0xdc>)
 8008c1a:	6830      	ldr	r0, [r6, #0]
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	f7f7 ff4f 	bl	8000ac0 <__aeabi_fsub>
 8008c22:	f8d6 8000 	ldr.w	r8, [r6]
 8008c26:	4601      	mov	r1, r0
 8008c28:	4640      	mov	r0, r8
 8008c2a:	f7f8 f9fb 	bl	8001024 <__aeabi_fcmple>
 8008c2e:	b150      	cbz	r0, 8008c46 <__ieee754_sqrtf+0xb2>
 8008c30:	6830      	ldr	r0, [r6, #0]
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	f7f7 ff46 	bl	8000ac4 <__addsf3>
 8008c38:	6836      	ldr	r6, [r6, #0]
 8008c3a:	4601      	mov	r1, r0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7f8 f9e7 	bl	8001010 <__aeabi_fcmplt>
 8008c42:	b170      	cbz	r0, 8008c62 <__ieee754_sqrtf+0xce>
 8008c44:	3402      	adds	r4, #2
 8008c46:	1064      	asrs	r4, r4, #1
 8008c48:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8008c4c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8008c50:	e7b1      	b.n	8008bb6 <__ieee754_sqrtf+0x22>
 8008c52:	005b      	lsls	r3, r3, #1
 8008c54:	0218      	lsls	r0, r3, #8
 8008c56:	460a      	mov	r2, r1
 8008c58:	f101 0101 	add.w	r1, r1, #1
 8008c5c:	d5f9      	bpl.n	8008c52 <__ieee754_sqrtf+0xbe>
 8008c5e:	4252      	negs	r2, r2
 8008c60:	e7bb      	b.n	8008bda <__ieee754_sqrtf+0x46>
 8008c62:	3401      	adds	r4, #1
 8008c64:	f024 0401 	bic.w	r4, r4, #1
 8008c68:	e7ed      	b.n	8008c46 <__ieee754_sqrtf+0xb2>
 8008c6a:	bf00      	nop
 8008c6c:	080090f0 	.word	0x080090f0
 8008c70:	080090ec 	.word	0x080090ec

08008c74 <_init>:
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	bf00      	nop
 8008c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c7a:	bc08      	pop	{r3}
 8008c7c:	469e      	mov	lr, r3
 8008c7e:	4770      	bx	lr

08008c80 <_fini>:
 8008c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c82:	bf00      	nop
 8008c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c86:	bc08      	pop	{r3}
 8008c88:	469e      	mov	lr, r3
 8008c8a:	4770      	bx	lr
